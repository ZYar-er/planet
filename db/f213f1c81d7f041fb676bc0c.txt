<blockquote><img src="https://legacy.superbart.top/picture/Flutter%20Introduction/Maggie's%20Butterfly%20Longest%20Daycard%20Short.jpg" alt="Featured image of post Flutter 介绍" /><p>有人邀请我去开个沙龙，我决定将这个，这个就是当时我的演讲稿。</p>
<h2 id="什么是-flutter--flutter-的好处">什么是 Flutter &amp; Flutter 的好处</h2>
<p>Flutter 是一个跨平台的客户端(以及网络前端)开发工具，官方定义为：</p>
<blockquote>
<p>Flutter 是 Google 开源的应用开发框架，仅通过一套代码库，就能构建精美的、原生平台编译的多平台应用。</p>
</blockquote>
<p>鉴于入门介绍，我就说的明白些。</p>
<ol>
<li>
<p>这玩意是用来写客户端程序的，也就是面向用户的程序。</p>
</li>
<li>
<p>这个东西能够为很多平台生成应用，尽量做到了“平台无关”。</p>
</li>
<li>
<p>这个东西上手比较简单，性能比较高，开发效率很高。</p>
</li>
</ol>
<p>目前这个和 React Native 并列两大最流行的跨平台开发平台。而 React Native 还是占用了 React 前端开发框架（Flutter 受 React 影响很大）的优势，Flutter 相比之下就比较小众了，找工作不太好找:-P</p>
<p>对我而言，有了 Flutter 的基础，后面要适应其他的类似框架就方便多了。最近我被(zi)人(ji)拉(zhao)过(shi)去(qing)写 vue 去了，我之前没有接触过。但是我稍微看了一下 vue 组合式的教程，就能给人打下手了。CSS 我现在还不会，感觉要会了，我就又会了一个框架(逃)。</p>
<h2 id="dart-语言介绍">Dart 语言介绍</h2>
<p>Flutter 使用的是 Dart 语言，目前是 Google 专门为 Flutter 设计的语言，因为我根本没找到任何在其他方面用 Dart 编程的例子。而且这玩意曾经还想嵌入到 Chrome&hellip;&hellip;</p>
<h3 id="dart--javascript--java">Dart = Javascript + Java</h3>
<p>语法像 Javascript，运行时环境像 Java。</p>
<p>像 Javascript 在于存在箭头函数，函数变量之类。Dart 对异步的实现 Future 也借鉴了 JS 的 Promise。因为 Dart 设计的时候，对标的就是 JavaScript。</p>
<p>而运行环境像 Java，因为他的类设计，编译和运行也很像 Java。类的方面下面会说明。</p>
<p>Dart 代码的运行有三种方式：一种是直接解释，一种是转码成  Javascript ，一种是编译成 DartVM 虚拟机机器码，然后在 DartVM 里面运行。最后一种有一种 Java VM 的既视感讲道理:-P</p>
<p>上面三种方式对应了 Flutter 的开发：调试开发，网页开发，客户端程序。</p>
<h3 id="给点例子吧">给点例子吧</h3>
<h4 id="基本">基本</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// Dart 是强类型语言，但是支持类型推断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="n">lineCount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="n">count</span> <span class="o">=</span> <span class="m">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 循环，判断和 C 和 JS 一样
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">weLikeToCount</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">lineCount</span> <span class="o">=</span> <span class="n">countLines</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">lineCount</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">print</span><span class="p">(</span><span class="n">lineCount</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="函数">函数</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// 普通函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">fibonacci</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="m">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="m">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 箭头函数(和 JS 的有点区别)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">fib</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="m">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="m">1</span><span class="p">)</span> <span class="o">?</span> <span class="n">n</span> <span class="o">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 另一个使用例子 (e) =&gt; print(e))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">8</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">nums</span><span class="p">.</span><span class="n">forEach</span><span class="p">((</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">print</span><span class="p">(</span><span class="n">e</span><span class="p">));</span>
</span></span></code></pre></div><h4 id="类">类</h4>
<p>这玩意东西太多了，我就光码字吧：</p>
<ul>
<li>
<p>类的成员默认都是公共成员，私有成员是在变量名前加 <code>_</code>号，有<code>@protected</code>宏。</p>
</li>
<li>
<p>Dart 的类是单向继承，支持接口类</p>
</li>
<li>
<p>支持 abstract 抽象类，也就是需要继承来实现的类</p>
</li>
</ul>
<h4 id="异步方法">异步方法</h4>
<p>先来个定义</p>
<blockquote>
<p>异步是在很多领域都有的概念，在编程中，是相对于同步的。同步就是一条指令一条指令，按顺序执行。异步则可以同时运行多个任务，执行任务的时候，可以先返回一个“包含进度的实例”。然后有“回调函数”来把该实例中执行的状态返回。</p>
</blockquote>
<p>Dart 的异步叫 <code>Future&lt;T&gt;</code>，其中 T 是泛型啦。当你运行异步方法的时候，他会先返回一个 Future 类，然后按需返回结果，或者处理结果。我们有两个方式处理异步编程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="kd">const</span> <span class="n">oneSecond</span> <span class="o">=</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="m">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Futur</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">printWithDelay</span><span class="p">(</span><span class="kt">String</span> <span class="n">message</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">await</span> <span class="n">Future</span><span class="p">.</span><span class="n">delayed</span><span class="p">(</span><span class="n">oneSecond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">print</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>相当于下面这段代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="kd">const</span> <span class="n">oneSecond</span> <span class="o">=</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="m">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Future</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">printWithDelay</span><span class="p">(</span><span class="kt">String</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">Future</span><span class="p">.</span><span class="n">delayed</span><span class="p">(</span><span class="n">oneSecond</span><span class="p">).</span><span class="n">then</span><span class="p">((</span><span class="n">_</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">print</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="空安全">空安全</h4>
<p>在你们使用 C 语言变量的时候，经常出现变量尚未定义就被使用了。Dart 引入了空安全机制，来帮助避免这个现象，让代码更稳定。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// 默认所有类型均不可空，类型加问号，表示该变量可空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span><span class="o">?</span> <span class="n">a</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 如此写会报编译错误，语言会进行空检查的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 可以使用 late 表示稍后赋值，但你不能忘了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">late</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span></code></pre></div><p>当然还有很多，想知道的话请去看官方介绍。我当时看了俩下就上手了&hellip;&hellip;</p>
<h2 id="flutter-的基本部件介绍">Flutter 的基本部件介绍</h2>
<p>Flutter 的 Widget 是一个一个的类，描述了在当前的配置和状态下视图所应该呈现的样子。在 Flutter 里面，万物都是围绕部件旋转的。</p>
<p>接下来我要展示一个信息卡，用这个方式给大家展示 Flutter 的基本组件。顺便我搞点 HTML 之类的东西，来给大家做点对比。接下来的部件，都是按照 Material 部件来说明的，iOS 的不在此说明。</p>
<h3 id="text-部件">Text 部件</h3>
<p>Text 是用来渲染一段文字的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Maggie Rules!&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p>效果大致说，跟HTML的这个一样。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Maggie Rules!<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Text 的属性有很多，比如说大小，斜体之类。有一个类叫 TextStyle，来给Text加属性，比如字体，阴影，颜色之类。那么，我可以这么写一个绿色的字。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Text</span><span class="p">(</span><span class="s2">&#34;50 sucks&#34;</span><span class="p">,</span><span class="nl">size:</span><span class="m">14</span><span class="p">,</span><span class="nl">style:</span><span class="n">TextStyle</span><span class="p">(</span><span class="nl">color:</span> <span class="n">Colors</span><span class="p">.</span><span class="n">green</span><span class="p">));</span>
</span></span></code></pre></div><p>效果大致说，跟HTML的这个一样。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;color: green&#34;</span><span class="p">&gt;</span> 50 sucks <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>我感觉通过这个，你们知道这玩意和 HTML+CSS 的对应了吧，也许。</p>
<h3 id="rowcolumnwarp">Row，Column，Warp</h3>
<p>你们可以看到，我在这些卡片上画了几条线。这是为了说明我们设计该卡片的基本架构，行和列。Flutter 的部件构造，就是在 Row 和 Column 之上的。</p>
<p>Row 和 Column 的写法差不多，都是这样的，更多属性一会再说：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Row</span><span class="p">(</span><span class="nl">children:</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[]);</span>
</span></span><span class="line"><span class="cl"><span class="n">Column</span><span class="p">(</span><span class="nl">children:</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[]);</span>
</span></span></code></pre></div><p>Row 代表行，Column 代表列。我们这个卡片是有三行的，每行是有对应元素的。通过这个，我们可以写出这个东西的框架了。</p>
<p>我们先实现每一行，第一行是在两侧的两个元素，注意到中间很大间隔了吗？这个是 Row 的一个属性，AxisAlignment。</p>
<p>AxisAlignment 是指这个部件两个轴上部件的排列方式，分为主轴 MainAxisAlignment 和交叉轴 CrossAxisAlignment。这张图片显示出这两个部件的主轴和交叉轴。我们通过修改这个，来规划好在该列/行上元素的排列方式。对于第一行，我们是这样写的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="p">.</span><span class="n">center</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nl">children:</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//第一个Text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//第二个Text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><p>剩下两行我这里就不赘述了，他们的排列方式都是靠左，也就是默认值。大致的代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Column</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">children:</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="p">.</span><span class="n">center</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nl">children:</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;第1次&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;打卡成功&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nl">children:</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">pumch_clock</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;2022-12-12 11:11:11&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nl">children:</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">error</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;打卡成功&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><p>以上部分是最基本设计Flutter布局的样例了。实际使用中，这样写的方式很死板，遇到一些动态变化的组件，比如说很多行的文字，Column高度侦测问题等等，会花费大量的时间设置这些东西的样式。所以，在实际PDA的编写中，我是使用了Warp来让其自动排列这些组件，你只是需要输入这些部件就好了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Wrap</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="nl">alignment:</span> <span class="n">WrapAlignment</span><span class="p">.</span><span class="n">spaceBetween</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">     <span class="nl">children:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">TagsBoxes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="nl">text:</span> <span class="s2">&#34;第 </span><span class="si">$</span><span class="n">mark</span><span class="s2"> 条&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nl">backgroundColor:</span> <span class="n">Theme</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">primaryColor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">situation</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="kd">const</span> <span class="n">Divider</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="nl">color:</span> <span class="n">Colors</span><span class="p">.</span><span class="n">transparent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nl">height:</span> <span class="m">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">informationWithIcon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">punch_clock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;</span><span class="si">${</span><span class="n">toUse</span><span class="p">.</span><span class="n">punchDay</span><span class="si">}</span><span class="s2">-</span><span class="si">${</span><span class="n">toUse</span><span class="p">.</span><span class="n">punchTime</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">context</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">informationWithIcon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">place</span><span class="p">,</span> <span class="n">toUse</span><span class="p">.</span><span class="n">machineName</span><span class="p">,</span> <span class="n">context</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">toUse</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s2">&#34;成功&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">              <span class="n">informationWithIcon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                  <span class="n">Icons</span><span class="p">.</span><span class="n">error_outline</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">toUse</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s2">&#34;锻炼间隔需30分钟以上&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                      <span class="o">?</span> <span class="n">toUse</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">replaceAll</span><span class="p">(</span><span class="s2">&#34;锻炼间隔需30分钟以上&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                      <span class="o">:</span> <span class="n">toUse</span><span class="p">.</span><span class="n">state</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">context</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">          <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span></code></pre></div><p>其中 InformationWithIcon 是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Widget</span> <span class="n">informationWithIcon</span><span class="p">(</span><span class="n">IconData</span> <span class="n">icon</span><span class="p">,</span> <span class="kt">String</span> <span class="n">text</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nl">children:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">Icon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">icon</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nl">size:</span> <span class="m">14</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nl">color:</span> <span class="n">Theme</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">tertiary</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="kd">const</span> <span class="n">SizedBox</span><span class="p">(</span><span class="nl">width:</span> <span class="m">5</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">Expanded</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="n">text</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span></code></pre></div><p>TagsBoxes 需要在 Container 讲明白了之后才能说明。</p>
<h3 id="container">Container</h3>
<p>Container是一个拥有绘制、定位、调整大小的 widget，是开发中最常用、最基础的组件。顾名思义，他能包装很多的组件。地位类似于 HTML 的 div。</p>
<p>上面的组件，如果我要成为一个个卡片，我得用这个包装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Container</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">child:</span> <span class="n">Wrap</span><span class="p">(</span><span class="cm">/* 上面展示的东西 */</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>对于 Container，我们需要引入一些对于有些人很熟悉的东西，也就是说，Margin 和 Padding，外边距和内边距。对于 Container 而言，内边距用到的最多。我们还可以设置这玩意的边框，圆角，背景颜色之类。扩展完相当于这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Container</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="m">15</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="nl">borderRadious:</span> <span class="n">BorderRadius</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">Radius</span><span class="p">.</span><span class="n">circular</span><span class="p">(</span><span class="m">10</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">        <span class="nl">color:</span> <span class="n">Color</span><span class="p">.</span><span class="n">purple</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nl">child:</span> <span class="n">Wrap</span><span class="p">(</span><span class="cm">/* 上面展示的东西 */</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>类似于这个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span>
</span></span><span class="line"><span class="cl">    <span class="na">style</span><span class="o">=</span><span class="s">&#34;background-color:purple;border-radius:10%;padding:15px&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">xxx
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>实际上 Container 是很多部件的最终实现方式，比如 Card，他就说按照设计规范，设计好背景颜色，边框圆角，背景颜色之类。除此之外，还有强制设定长宽的 SizedBox，强制设定装饰的 DecortatedBox 等，都可以算 Container 的扩展。实际代码中，我直接把上面提到的 Warp 套进 Card 了。</p>
<p>最终，我说明一下上面说到的 TagBoxes。代码是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">Container</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="p">.</span><span class="n">fromLTRB</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">color:</span> <span class="n">backgroundColor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nl">borderRadius:</span> <span class="kd">const</span> <span class="n">BorderRadius</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">Radius</span><span class="p">.</span><span class="n">circular</span><span class="p">(</span><span class="m">9</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">  <span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span><span class="nl">color:</span> <span class="n">textColor</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nl">textScaleFactor:</span> <span class="m">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h3 id="listview">ListView</h3>
<p>卡片介绍就这样了，在实际情况下，我们会有超级多的记录。根据思维惯性，我们会想让其做成一个可以滚动的菜单。不过不能用 Column，因为单纯的 Column 缺少滚动侦测器，也就是说，我们缺少一个侦测目前该滚动菜单滚动位置的侦测器。所以，我们需要使用 ListView 部件，他默认有一个滚动侦测器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">ListView</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">children:</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">Card</span><span class="p">(</span><span class="n">xxx</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">......</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>滚动侦测器涉及到接下来要说的状态管理。</p>
<h3 id="scafford">Scafford</h3>
<p>Material 设计的页面部件框架，包括但不限于：</p>
<ul>
<li>
<p>appBar：上面的导航栏（可以设置标题和右面的小按钮，称为 action）</p>
</li>
<li>
<p>tabBar：一个框架的分页，分页内容另有设置</p>
</li>
<li>
<p>body：页面的主要部分，对于截图是打卡记录</p>
</li>
<li>
<p>bottomNavigationBar：底部的导航栏，对于截图是展示次数以及转换</p>
</li>
</ul>
<h2 id="flutter-内部的状态管理">Flutter 内部的状态管理</h2>
<h3 id="声明式编程">声明式编程</h3>
<p>我先念一段上网找到的定义：</p>
<blockquote>
<p>命令式编程就像它的名字一样，它由开发者我们一步一步的告述计算机，执行一系列的操作，然后得到想要的结果，起主要作用的是开发者，计算机只是帮助开发者执行计算而已。我们日常使用的大多数语言都属于命令式。</p>
<p>而声明式编程却与此相反，它不是告述计算机做什么做，而是直接告述计算它想要的结果，至于怎么做，由预先写好的程序依据一定的算法由计算机自动推算出来。这类定义比如 SQL，Vue 的响应式组件。</p>
</blockquote>
<p>官方给了个这个公式：</p>
<blockquote>
<p>UI = f(state)</p>
</blockquote>
<p>Flutter 部件的构造过程，如这个公式所见，是这样的：</p>
<p>我们有一个UI，或者说部件，的构造函数，里面写好了这个部件需要接收，或者监听的状态。我们通过创建，修改这个状态，让程序组建/更新我们的部件。这个状态就是我们希望的结果。这说起来十分拗口，我们上两个例子。</p>
<h3 id="statefulwidget-内部管理和-setstate">StatefulWidget 内部管理和 setstate</h3>
<p>之前我们提到的部件，都是 Stateless 部件，也就是说，这个部件的状态不会变，在我们一开始渲染的时候，就写死了。</p>
<p>但是，状态有时候是需要更新的。比如说，最开始那个计数器应用，我们需要记下来目前数字是多少，并且我们需要能响应添加和减少。鉴于这个，我们需要引入 StatefulWidget 来实现这个。</p>
<p>StatefulWidget 依靠 setState 来刷新部件，我们看一下计数器代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="k">import</span> <span class="s1">&#39;package:flutter/material.dart&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 所有应用的入口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">runApp</span><span class="p">(</span><span class="kd">const</span> <span class="n">MyApp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 这些都是定义框架的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">MyApp</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">const</span> <span class="n">MyApp</span><span class="p">({</span><span class="k">super</span><span class="p">.</span><span class="n">key</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">MaterialApp</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nl">title:</span> <span class="s1">&#39;Flutter Demo&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nl">theme:</span> <span class="n">ThemeData</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="nl">primarySwatch:</span> <span class="n">Colors</span><span class="p">.</span><span class="n">blue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="nl">home:</span> <span class="kd">const</span> <span class="n">MyHomePage</span><span class="p">(</span><span class="nl">title:</span> <span class="s1">&#39;Flutter Demo Home Page&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// StatefulWidget 可以通过输入 stful 来快速生成
</span></span></span><span class="line"><span class="cl"><span class="c1">// StatelessWidget 通过输入 stless 来生成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">const</span> <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="p">.</span><span class="n">title</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 所有在 Widget 里面的东西都是 final
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">final</span> <span class="kt">String</span> <span class="n">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 状态在此生成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">@</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">  <span class="n">State</span><span class="o">&lt;</span><span class="n">MyHomePage</span><span class="o">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="n">_MyHomePageState</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">_MyHomePageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">MyHomePage</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">_counter</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 注意里面的 setState，他是用来更新部件状态的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 里面的函数就是状态是如何被更新的了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="n">_incrementCounter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 每当 setState 运行，部件状态被更新，这个函数会重新运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 更新适应这个状态的部件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">@</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="n">widget</span><span class="p">.</span><span class="n">title</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 这里看不懂，建议看上面的组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="p">.</span><span class="n">center</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nl">children:</span> <span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;You have pushed the button this many times:&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;</span><span class="si">$</span><span class="n">_counter</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nl">style:</span> <span class="n">Theme</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">textTheme</span><span class="p">.</span><span class="n">headlineMedium</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">          <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="nl">floatingActionButton:</span> <span class="n">FloatingActionButton</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 注意这里，这个按钮按下的时候，会执行这个函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nl">onPressed:</span> <span class="n">_incrementCounter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nl">tooltip:</span> <span class="s1">&#39;Increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">add</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="p">),</span> 
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>StatefulWidget 适合于一个小部件内部短时状态的维护。如果我们要搞牵扯到许多部件，乃至于各个页面的共同状态，就很难办了。这里我要给大家介绍一个我日常在使用的状态管理器：GetX。</p>
<h3 id="getx">GetX</h3>
<p>GetX 是三个库的集合：状态管理，路由管理，和依赖管理。这里只关注状态管理。</p>
<h4 id="getx-观察者模式状态管理">GetX 观察者模式状态管理</h4>
<p>第一个状态管理使用的是obs-&gt;观察者模式，我们记住这么几点：</p>
<ul>
<li>
<p>在变量初始化的时候，初始化值的后面添加<code>.obs</code>来使其可观察化</p>
</li>
<li>
<p>使用<code>Obx</code>部件来渲染需要用到可观察化变量的部件</p>
</li>
<li>
<p>使用平常的方法修改可观察化变量的值</p>
</li>
</ul>
<p>比如这个计数器应用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="k">import</span> <span class="s1">&#39;package:flutter/material.dart&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="s1">&#39;package:get/get.dart&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">runApp</span><span class="p">(</span><span class="kd">const</span> <span class="n">MainApp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在 GetX 中，给变量添加 .obs 就可以使其被观察
</span></span></span><span class="line"><span class="cl"><span class="c1">// 这时，他的类型不再是值的类型了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="n">count</span> <span class="o">=</span> <span class="m">0.</span><span class="n">obs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MainApp</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">const</span> <span class="n">MainApp</span><span class="p">({</span><span class="k">super</span><span class="p">.</span><span class="n">key</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">MaterialApp</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nl">home:</span> <span class="n">Scaffold</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 注意这里 Obx 部件，他能获取对应的可观察部件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// GetX 保证这个寻找是相当快的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="n">Obx</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Clicks: </span><span class="si">$</span><span class="n">count</span><span class="s2">&#34;</span><span class="p">))),</span>
</span></span><span class="line"><span class="cl">        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="nl">child:</span> <span class="n">TextButton</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="c1">// 这里没用 setState，仅仅对该可观察变量里面的值修改即可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">count</span><span class="p">.</span><span class="n">value</span> <span class="o">+=</span> <span class="m">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;Add it!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nl">fontSize:</span> <span class="m">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">          <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="getx-控制器类状态管理">GetX 控制器类状态管理</h4>
<p>再给大家介绍一下<code>GetxController</code>，我 PDA 用的后者更多。</p>
<p>我先给大家介绍 MVC 架构，Model 模型，是说程序的功能。控制器是和视图View进行交流，View视图就是显示了。View 通过 Controller 获取 Model 中的东西。</p>
<p>每个 GetX Controller 都是继承 GetController 虚拟类的一个类。这个类里面，除了你要使用到的值和方法，还有两个方法：</p>
<ul>
<li>
<p>onInit()：在这个控制器初始化的时候使用。</p>
</li>
<li>
<p>onReady()：在这个控制器刚初始化（时间大约一帧后）运行，处理异步请求。</p>
</li>
</ul>
<p>在使用控制器的时候，我们可以直接用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="n">GetBuilder</span><span class="o">&lt;</span><span class="n">Controller</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">builder:</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">Widget</span><span class="p">(</span><span class="n">xxx</span><span class="p">));</span>
</span></span></code></pre></div><p>建议阅读 Traintime PDA 代码中的<code>controller/sport_controller.dart</code>，<code>repository/xidian_sport/xidian_sport_session.dart</code>，以及 page 下面关于体育部件的代码。以下这段展示的是我程序对应的模型各组成的部分。</p>
<blockquote>
<p>Controller(GetX Controller) &ndash; Model(Dio网络库) &ndash; View(Flutter)</p>
</blockquote>
<h2 id="杂项">杂项</h2>
<h3 id="路由栈">路由栈</h3>
<p>栈是先进后出的结构，而路由栈里面，存的是每个页面的信息了。在 Flutter 中，我们这么处理路由栈：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// 这个是说压入路由栈，进入这个页面。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Navigator</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">push</span><span class="p">(</span><span class="n">route</span><span class="o">/</span><span class="n">widget</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个是说弹出路由栈的顶，也就是返回上一个页面
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Navigator</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 可以做到按需弹栈，然后压栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Navigator</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">pushNamedAndRemoveUntil</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">route</span><span class="o">/</span><span class="n">widget</span><span class="p">,</span>                      <span class="c1">// 弹栈之后要压入的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">(</span><span class="n">Route</span><span class="o">&lt;</span><span class="kt">dynamic</span><span class="o">&gt;</span> <span class="n">route</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span>   <span class="c1">// 这个是判断栈顶元素是否符合要求的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">);</span>
</span></span></code></pre></div><p>这里面的 context 是指，这个应用，或者这个部件的状态。</p>
<h3 id="dio-网络插件">Dio 网络插件</h3>
<p>Flutter 提供了很多的插件，来方便我们的开发体验。其中最著名的就是 Dio 网络库。他是一个异步网络访问库，使用方式和 axios 比较像。</p>
<p>先说明一下拦截器，它可以在获取回复/发送请求时，先拦截之，然后对该包进行修改。</p>
<p>Dio 类的定义，其中我用到了拦截器和对基地址的设置，设置了这个，后面的访问就可以输入那个网站的子路由了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">/// Maybe I wrote how to store the data is better.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Dio</span> <span class="kd">get</span> <span class="n">_dio</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Dio</span> <span class="n">toReturn</span> <span class="o">=</span> <span class="n">Dio</span><span class="p">(</span><span class="n">BaseOptions</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">baseUrl:</span> <span class="n">_baseURL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nl">contentType:</span> <span class="n">Headers</span><span class="p">.</span><span class="n">formUrlEncodedContentType</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 这个拦截器是 Cookie 管理器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">toReturn</span><span class="p">.</span><span class="n">interceptors</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">CookieManager</span><span class="p">(</span><span class="n">SportCookieJar</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">toReturn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Dio 的使用示例，它可以支持 POST，GET 等常见的 HTTP 请求方式。可以设定传输参数，请求头等很多东西。它的返回和 axios 大致相同，有响应数据，响应代码等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="kt">String</span> <span class="n">termStartDay</span> <span class="o">=</span> <span class="kd">await</span> <span class="n">dio</span><span class="p">.</span><span class="n">post</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;https://ehall.xidian.edu.cn/jwapp/sys/wdkb/modules/jshkcb/cxjcs.do&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nl">data:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;XN&#39;</span><span class="o">:</span> <span class="s1">&#39;</span><span class="si">${</span><span class="n">semesterCode</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)[</span><span class="m">0</span><span class="p">]</span><span class="si">}</span><span class="s1">-</span><span class="si">${</span><span class="n">semesterCode</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)[</span><span class="m">1</span><span class="p">]</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;XQ&#39;</span><span class="o">:</span> <span class="n">semesterCode</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)[</span><span class="m">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">).</span><span class="n">then</span><span class="p">((</span><span class="n">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;datas&#39;</span><span class="p">][</span><span class="s1">&#39;cxjcs&#39;</span><span class="p">][</span><span class="s1">&#39;rows&#39;</span><span class="p">][</span><span class="m">0</span><span class="p">][</span><span class="s2">&#34;XQKSRQ&#34;</span><span class="p">]);</span>
</span></span></code></pre></div><h3 id="存储">存储</h3>
<h4 id="dart-操作文件的函数">Dart 操作文件的函数</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// 这样定义一个文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="s1">&#39;file.txt&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 按照字符读取文件的方法，异步和同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Future</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="n">readAsString</span><span class="p">({</span><span class="n">Encoding</span> <span class="nl">encoding:</span> <span class="n">utf8</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="kt">String</span> <span class="n">readAsStringSync</span><span class="p">({</span><span class="n">Encoding</span> <span class="nl">encoding:</span> <span class="n">utf8</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 按照一行一行字符读取文件的方式，异步和同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Future</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;&gt;</span> <span class="n">readAsLines</span><span class="p">({</span><span class="n">Encoding</span> <span class="nl">encoding:</span> <span class="n">utf8</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="n">readAsLinesSync</span><span class="p">({</span><span class="n">Encoding</span> <span class="nl">encoding:</span> <span class="n">utf8</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 二进制读取方法
</span></span></span><span class="line"><span class="cl"><span class="c1">// Dart 中表示二进制有一个专门的类型，叫做 Uint8List
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Uint8List</span><span class="o">&gt;</span> <span class="n">readAsBytes</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Uint8List</span> <span class="n">readAsBytesSync</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 二进制写入方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Future</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">writeAsBytes</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="n">FileMode</span> <span class="nl">mode:</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">write</span><span class="p">,</span> <span class="kt">bool</span> <span class="nl">flush:</span> <span class="kc">false</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">writeAsBytesSync</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="n">FileMode</span> <span class="nl">mode:</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">write</span><span class="p">,</span> <span class="kt">bool</span> <span class="nl">flush:</span> <span class="kc">false</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 字符串写入方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Future</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">writeAsString</span><span class="p">(</span><span class="kt">String</span> <span class="n">contents</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="n">FileMode</span> <span class="nl">mode:</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">write</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">Encoding</span> <span class="nl">encoding:</span> <span class="n">utf8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kt">bool</span> <span class="nl">flush:</span> <span class="kc">false</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">writeAsStringSync</span><span class="p">(</span><span class="kt">String</span> <span class="n">contents</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="n">FileMode</span> <span class="nl">mode:</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">write</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">Encoding</span> <span class="nl">encoding:</span> <span class="n">utf8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kt">bool</span> <span class="nl">flush:</span> <span class="kc">false</span><span class="p">});</span>
</span></span></code></pre></div><h4 id="path_provider">path_provider</h4>
<p>作为一个跨平台的开发框架，Flutter 要能适应很多方面，其中最主要的就是存储位置。我们要存储一个文件的时候，需要在不同设备上，找到对应的位置。而在很多设备上，相同类型文件的存储地方是不一致的。<code>path_provider</code>能够让我们找到相应的位置。具体使用方式请参阅它的文档。</p>
<p>以下这个表格能体现出存储地方不同的问题：</p>
<table>
<thead>
<tr>
<th>Directory</th>
<th>Android</th>
<th>iOS</th>
<th>Linux</th>
<th>macOS</th>
<th>Windows</th>
</tr>
</thead>
<tbody>
<tr>
<td>Temporary</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>Application Support</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>Application Library</td>
<td>❌️</td>
<td>✔️</td>
<td>❌️</td>
<td>✔️</td>
<td>❌️</td>
</tr>
<tr>
<td>Application Documents</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>External Storage</td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
<td>❌️</td>
<td>❌️</td>
</tr>
<tr>
<td>External Cache Directories</td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
<td>❌️</td>
<td>❌️</td>
</tr>
<tr>
<td>External Storage Directories</td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
<td>❌️</td>
<td>❌️</td>
</tr>
<tr>
<td>Downloads</td>
<td>❌</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
</tbody>
</table>
<p>以下是我程序的一份示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// Loading cookiejar.
</span></span></span><span class="line"><span class="cl"><span class="c1">// 先获取到 ApplicationSupport 的位置在哪
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Directory</span> <span class="n">supportPath</span> <span class="o">=</span> <span class="kd">await</span> <span class="n">getApplicationSupportDirectory</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 注意 supportPath.path，这里我读取了路径结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">SportCookieJar</span> <span class="o">=</span> <span class="n">PersistCookieJar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">ignoreExpires:</span> <span class="kc">true</span><span class="p">,</span> <span class="nl">storage:</span> <span class="n">FileStorage</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">${</span><span class="n">supportPath</span><span class="p">.</span><span class="n">path</span><span class="si">}</span><span class="s2">/sport&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="n">IDSCookieJar</span> <span class="o">=</span> <span class="n">PersistCookieJar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nl">ignoreExpires:</span> <span class="kc">true</span><span class="p">,</span> <span class="nl">storage:</span> <span class="n">FileStorage</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">${</span><span class="n">supportPath</span><span class="p">.</span><span class="n">path</span><span class="si">}</span><span class="s2">/ids&#34;</span><span class="p">));</span>
</span></span></code></pre></div><h4 id="shared_preferences">shared_preferences</h4>
<p>我们程序更多的是要在本地存储一些简单的设置信息，具体来说，是很简单的 key-value 东西了。比如说，你的学号和密码是什么，你的宿舍号之类。我们使用 shared_preferences 来解决这个问题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="c1">// 初始化一个示例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">final</span> <span class="n">SharedPreferences</span> <span class="n">prefs</span> <span class="o">=</span> <span class="kd">await</span> <span class="n">SharedPreferences</span><span class="p">.</span><span class="n">getInstance</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置一份 key-value
</span></span></span><span class="line"><span class="cl"><span class="c1">// String 可以改成 Int, Bool, Double 等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">await</span> <span class="n">prefs</span><span class="p">.</span><span class="n">setString</span><span class="p">(</span><span class="n">key</span> <span class="o">as</span> <span class="kt">String</span><span class="p">,</span> <span class="n">value</span> <span class="o">as</span> <span class="kt">String</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 读取一份 key 对应的数据
</span></span></span><span class="line"><span class="cl"><span class="c1">// String 可以改成 Int, Bool, Double 等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">String</span><span class="o">?</span> <span class="n">v</span> <span class="o">=</span> <span class="n">prefs</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="n">key</span> <span class="o">as</span> <span class="kt">String</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 清除所有设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">prefs</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span></span></code></pre></div><h2 id="推荐阅读">推荐阅读</h2>
<p><a class="link" href="https://dart.dev/language"  target="_blank" rel="noopener"
    >Dart 语言官方简介</a><br>
<a class="link" href="https://flutter.cn/docs/get-started/codelab"  target="_blank" rel="noopener"
    >Flutter 上手教程</a><br>
<a class="link" href="https://flutter.cn/docs/development/ui/layout/tutorial"  target="_blank" rel="noopener"
    >布局构建教程</a><br>
<a class="link" href="https://github.com/BenderBlog/watermeter"  target="_blank" rel="noopener"
    >Traintime PDA (Watermeter) 代码</a></p>
<h2 id="封面">封面</h2>
<p>Maggie 去日托所的一天。</p>
<p>主要看中了蝴蝶，因为蝴蝶和 Dart 的吉祥物蜂鸟类似。</p></blockquote>