<blockquote>
<p>WIP</p>
</blockquote>
<h2 id="第三场">第三场</h2>
<h3 id="B-Crazy-Binary-String">B: Crazy Binary String</h3>
<p>签到题<br>
初步想法是$v_i$<hr /><blockquote><p>WIP</p></blockquote><h2 id="第三场">第三场</h2><h3 id="B-Crazy-Binary-String">B: Crazy Binary String</h3><p>签到题<br>初步想法是$v_i$记录在$i$处出现过的0与1个数之差，当$v_j == v_i (j \gt i)$时计算$j-i$，记录其最大值<br>然而这就是个前缀和。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i])state++;</span><br><span class="line">    <span class="keyword">else</span> state--;</span><br><span class="line">    <span class="keyword">if</span>(first[state])</span><br><span class="line">        maxx = <span class="built_in">max</span>(maxx, i-first[state]);</span><br><span class="line">    <span class="keyword">else</span> first[state] = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;maxx;</span><br></pre></td></tr></table></figure><h3 id="J-LRU-management">J: LRU management</h3><p>大暴力，模拟<br>赛后补题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">list&lt;pair&lt;string, <span class="keyword">int</span>&gt;&gt; cache;</span><br><span class="line">unordered_map&lt;string, list&lt;pair&lt;string, <span class="keyword">int</span>&gt;&gt;::iterator&gt; last;</span><br><span class="line"><span class="keyword">int</span> T, Q, M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">const</span> string &amp;str, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ite = last.<span class="built_in">find</span>(str);</span><br><span class="line">    <span class="keyword">if</span> (ite != last.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cur = ite-&gt;second;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cur-&gt;second);</span><br><span class="line">        cache.<span class="built_in">push_back</span>(*cur);</span><br><span class="line">        cache.<span class="built_in">erase</span>(cur);</span><br><span class="line">        last[cur-&gt;first] = <span class="built_in">prev</span>(cache.<span class="built_in">end</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v);</span><br><span class="line">        cache.<span class="built_in">emplace_back</span>(str, v);</span><br><span class="line">        last[str] = <span class="built_in">prev</span>(cache.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(cache.<span class="built_in">size</span>()) &gt; M) &#123;</span><br><span class="line">            last.<span class="built_in">erase</span>(cache.<span class="built_in">front</span>().first);</span><br><span class="line">            cache.<span class="built_in">erase</span>(cache.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last[str] = <span class="built_in">prev</span>(cache.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> string &amp;str, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ite = last.<span class="built_in">find</span>(str);</span><br><span class="line">    <span class="keyword">if</span> ((ite == last.<span class="built_in">end</span>()) ||</span><br><span class="line">        (v == <span class="number">1</span> &amp;&amp; <span class="built_in">next</span>(ite-&gt;second) == cache.<span class="built_in">end</span>()) ||</span><br><span class="line">        (v == <span class="number">-1</span> &amp;&amp; ite-&gt;second == cache.<span class="built_in">begin</span>()))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> result = ite-&gt;second;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">            result--;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">1</span>)</span><br><span class="line">            result++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">int</span> opt, v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cache.<span class="built_in">clear</span>();</span><br><span class="line">        last.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;Q, &amp;M);</span><br><span class="line">        <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d&quot;</span>, &amp;opt, buffer, &amp;v);</span><br><span class="line">            <span class="keyword">if</span> (opt)</span><br><span class="line">                <span class="built_in">query</span>(buffer, v);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">access</span>(buffer, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Magic-Line">Magic Line</h3><blockquote><p>做几何的时候一定要注意代码的细节</p></blockquote><p>过分别按照x与y取中位数得到的点画一条线，将坐标延伸至无限远，进行微小的调整，即可错开这个点。<br>此处有一细节问题：当调整极远处坐标时应考虑到线的旋转，从而会影响到一开始排序的方向。</p><h2 id="第五场">第五场</h2><h3 id="generator1">generator1</h3><h4 id="题意">题意</h4><p>计算$2*2$矩阵的$n$次幂($n \leq 10^{10^6}$)</p><h4 id="思路">思路</h4><p>首先$n$这么大，快速幂是肯定的。但是有个问题就是<br>这个整数转换为&quot;整数&quot;的复杂度不可忽略。<br>将n视为字符串$n_1,n_2,n_3,…,n_{|n|}$，其中$n_i$代表n的第i数位，对矩阵T有</p><p>\begin{align}<br>&amp; T^{int(n)} \\<br>==&amp; T^{n_1*10^{|n|}+n_2*10^{|n|-1}+…} \\<br>==&amp; T^{n_1*10^{|n|}}*T^{n_2*10^{|n|-1}}*…*T^{n_{|n|} *10^0}<br>\end{align}</p><h4 id="备注">备注</h4><p>考场上应当就问题考虑解决问题的办法，找到问题的特征，不应该抱着现成的板子不放。过不去肯定有别的问题。<br><s>但是我现在只想去世</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; /**/&gt; mat;</span><br><span class="line">mat unit = mat&#123;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">mat zero = mat&#123;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> a, b, x1, x2, mod;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">const</span> mat <span class="keyword">operator</span>*(<span class="keyword">const</span> mat &amp;a, <span class="keyword">const</span> mat &amp;b) &#123;</span><br><span class="line">    mat ret = zero;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                ret[i][j] += a[i][k] * b[k][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">            ret[i][j] %= mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> T <span class="keyword">operator</span>^(T a, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    T ret = unit;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;x2, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, n, &amp;mod);</span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(n);</span><br><span class="line">    mat res = unit;</span><br><span class="line">    mat base = mat&#123;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;a, b&#125;, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            res = res * (base ^ (n[i] - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">        base = base ^ <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res = res * mat&#123;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;x2, <span class="number">0</span>&#125;, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&#123;x1, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="three-points-1">three points 1</h3><blockquote><p>有思路有思路。。。。<br>十分钟能写完么<br>不能</p></blockquote><h2 id="第六场">第六场</h2><h3 id="B-Shorten-IPv6-Address">B: Shorten IPv6 Address</h3><p>比赛的时候我在干什么系列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">case = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> T &gt; case:</span><br><span class="line">    case += <span class="number">1</span></span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    x = [</span><br><span class="line">        <span class="built_in">int</span>(x[i:i+<span class="number">16</span>], <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(</span><br><span class="line">            <span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">16</span></span><br><span class="line">        )]</span><br><span class="line">    s = [<span class="string">&#x27;:&#x27;</span>.join([<span class="built_in">hex</span>(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> x])]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> x[i:j+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> k != <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                s.append(<span class="string">&#x27;:&#x27;</span>.join([<span class="built_in">hex</span>(_)[<span class="number">2</span>:] <span class="keyword">for</span> _ <span class="keyword">in</span> x[:i]])+<span class="string">&#x27;::&#x27;</span>+</span><br><span class="line">                         <span class="string">&#x27;:&#x27;</span>.join([<span class="built_in">hex</span>(_)[<span class="number">2</span>:] <span class="keyword">for</span> _ <span class="keyword">in</span> x[j+<span class="number">1</span>:]]))</span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x: (<span class="built_in">len</span>(x), x))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Case #%d:&#x27;</span> % (case), s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>但是python里头有个all，可以判断一个可遍历对象里头是否都为true</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">case = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> T&gt;case:</span><br><span class="line">    case+=<span class="number">1</span></span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    x = [<span class="built_in">hex</span>(<span class="built_in">int</span>(x[i:i+<span class="number">16</span>], <span class="number">2</span>))[<span class="number">2</span>:] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">16</span>)</span><br><span class="line">    ]</span><br><span class="line">    s = [<span class="string">&#x27;:&#x27;</span>.join(x)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x==<span class="string">&#x27;0&#x27;</span>,x[i:j+<span class="number">1</span>])):</span><br><span class="line">                s.append(<span class="string">&#x27;:&#x27;</span>.join(x[:i])+<span class="string">&#x27;::&#x27;</span>+<span class="string">&#x27;:&#x27;</span>.join(x[j+<span class="number">1</span>:]) )</span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x:(<span class="built_in">len</span>(x),x))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Case #%d:&#x27;</span>%(case),s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="D-Move">D: Move</h3><p>数据毒瘤。。。有多少人的二分都过了。。<br>证明&quot;$f(V)=需要的盒子数$&quot;不单调：<br>首先取体积为V的流体（即$\lim\limits_{n \to \infty}v_1,v_2…v_n$）放满K个盒子，取$v_i, v_j$合并为一个物体，此时$\sum v_i$没变，而多了一个需要的盒子<br>貌似遍历check一遍就能过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> V)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(put, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">bool</span>) * n);</span><br><span class="line">    <span class="keyword">int</span> cnt_obj = n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sumV) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!put[i] &amp;&amp; v[i] &lt;= cur) &#123;</span><br><span class="line">                put[i] = <span class="literal">true</span>;</span><br><span class="line">                cnt_obj--;</span><br><span class="line">                cur -= v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"5955d155fe2ea768241e","clientSecret":"f96bbda9ff434950217f24f7f9369f8b8de3b025","repo":"frankli0324.github.io","owner":"frankli0324","admin":["frankli0324"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>