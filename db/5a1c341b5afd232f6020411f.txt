<h1 id="STM32温湿度测量与显示-单总线协议学习"><a href="#STM32温湿度测量与显示-单总线协议学习" class="headerlink" title="STM32温湿度测量与显示-单总线协议学习"></a>STM32温湿度测量与显示-单总线协议学习</<hr /><h1 id="STM32温湿度测量与显示-单总线协议学习"><a href="#STM32温湿度测量与显示-单总线协议学习" class="headerlink" title="STM32温湿度测量与显示-单总线协议学习"></a>STM32温湿度测量与显示-单总线协议学习</h1><p>为了验收个小玩意用一晚上搓了一个，比较氵。 <del>那就氵篇博客算了。</del> </p><p>手头正好有个ST的板子，型号是STM32G431KBT6，主频170M。刚好拿过来用了。（真好用啊，就是做这个有点浪费。</p><p>温湿度传感器使用 <strong>DHT11</strong> （单总线协议），屏幕是个IIC的小OLED，还用到了串口来看数据是否正确。（没了，确实氵。</p><p>效果图：</p><img src="https://yun.ksfu.top/blog/DHT11/index.webp" alt="效果图" style="zoom: 33%;" /><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先去官网下载 <strong>STM32G4xx</strong> 的包。（<a href="https://keilpack.azureedge.net/pack/Keil.STM32G4xx_DFP.1.5.0.pack">Keil.STM32G4xx_DFP.1.5.0.pack</a>）。官网直连下载很慢，很慢……</p><p>然后去CubeMX里面新建工程，因为是官方的板子，所以可以直接选择这块板子的模板创建。时钟设置170M（默认的）。选择一个没有中文的路径生成工程。</p><p>接下来的流程是：</p><ul><li>设置串口</li><li>驱动OLED屏幕<ul><li>重新配置延时函数</li><li>添加软件IIC</li><li>添加OLED驱动</li></ul></li><li>驱动DHT11温湿度传感器（<strong>单总线协议的学习</strong>）</li></ul><p>因为使用的OLED驱动比较特殊，添加之后无法使用原来的 <code>HAL_Dealy()</code> 函数，需要按照该驱动的要求重新配置延时函数，之后使用其提供的 <code>delay_ms()</code> 和 <code>delay_us()</code> 两个函数代替  <code>HAL_Dealy()</code> 函数，当然实际上是方便不少的，因为 <code>HAL_Dealy()</code> 是毫秒级延时，所以直接使用上面两个函数可以让自己少写一个微秒的延时函数，具体原理可以参考<a href="https://blog.ksfu.top/posts/463a/">之前的一篇博客</a>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="串口设置"><a href="#串口设置" class="headerlink" title="串口设置"></a>串口设置</h3><p>串口的具体实现参考我之前的博客步骤：<a href="https://blog.ksfu.top/posts/b619/">STM32&amp;UART串口通信(使用CubeMX)</a> 。因为这次没有用到收的功能，所以只需要设置好发送功能即可。</p><p>本次使用USART1。其实 <strong>更推荐</strong> 使用USART2的，因为官方的板子上本身就有串口芯片，使用的USART2，这样用一根USB线连电脑上就可以同时供电，下载和查看串口数据了，不用自己再连一个USB转串口的模块了，还能腾出来两个引脚，这STM32G431KBT6的引脚是真的少。 <del>（还是官方板子好用，就是贵</del></p><hr><blockquote><p><del>）晚上要去重庆，剩下的具体流程就等下周回来再写了。</del></p><p><del>回来了，发现实习二面寄了，悲）</del></p></blockquote><hr><h3 id="驱动OLED屏幕"><a href="#驱动OLED屏幕" class="headerlink" title="驱动OLED屏幕"></a>驱动OLED屏幕</h3><p><strong>这一节可以略过。</strong></p><p>本次的驱动选自 <a href="http://www.lcdwiki.com/zh/Main_Page">LCD wiki</a> 。</p><p>因为 LCD wiki 的驱动为gb2312编码，为了以后写的舒服，我先转换为了utf-8，具体可以参考：</p><p><a href="https://blog.ksfu.top/posts/2d8a/">批量转换文件编码gb2312转utf-8</a> 。但是注意，代码里有中文的地方，比如 <code>test.c</code>，<code>oledfont.h</code>等文件需要保持原来的gb2312。<del>（看见编译时候的编码报错真是心累呐</del></p><p>LCD wiki 的驱动使用标准库编写，放入HAL库的项目中会狠狠报错，所以要进行修改）我自己修改了一下，以后写一下修改过程emmm（咕咕</p><h4 id="重新配置延时函数"><a href="#重新配置延时函数" class="headerlink" title="重新配置延时函数"></a>重新配置延时函数</h4><p>添加 <code>sys.h</code> ， <code>sys.c</code> ， <code>delay.h</code> ， <code>delay.c</code> ，注意修改里面包含的头文件为对应的 <code>#include &quot;stm32g4xx.h&quot;</code></p><p>之后在 <code>main.c</code> 里面进行初始化： <code>delay_init();</code>  初始化完成后以后的延时就用  <code>delay_ms()</code> 和 <code>delay_us()</code>  。</p><h4 id="添加软件IIC"><a href="#添加软件IIC" class="headerlink" title="添加软件IIC"></a>添加软件IIC</h4><p>添加 <code>iic.c</code> ， <code>iic.h</code> ，注意修改里面 <code>SCL</code> 与 <code>SDA</code> 的引脚。本次分别使用 <code>PA1</code> ， <code>PA0</code>  。</p><h4 id="添加OLED驱动"><a href="#添加OLED驱动" class="headerlink" title="添加OLED驱动"></a>添加OLED驱动</h4><p>添加 <code>bmp.h</code> ， <code>gui.h</code> ， <code>gui.c</code> ， <code>oled.c</code> ， <code>oled.h</code> ， <code>oledfont.h</code> ， <code>test.c</code> ， <code>test.h</code> 。</p><p>这次所用的汉字取模保存至  <code>oledfont.h</code> 内，注意为gb2312编码。</p><p>取模使用 <code>PCtoLCD2002</code> ，为逐行式，顺向。考虑到屏幕大小，取模的大小为16×16。添加在 <code>const typFNT_GB16 cfont16[]</code> 的后面。如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"康"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment">/*"康"*/</span><span class="token string">"师"</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0B</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment">/*"师"*/</span><span class="token string">"傅"</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token comment">/*"傅"*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>显示汉字使用 <code>GUI_ShowCHinese(uint8_t x,uint8_t y,uint8_t hsize,uint8_t *str,uint8_t mode)</code> ，使用实例如 <code>GUI_ShowCHinese(40,2,16,&quot;康师傅&quot;,1);</code></p><p>该函数说明：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/***************************************************************************** * @name       :void GUI_ShowCHinese(uint8_t x,uint8_t y,uint8_t hsize,uint8_t *str,uint8_t mode) * @date       :2018-08-27  * @function   :Display Chinese strings * @parameters :x:the bebinning x coordinate of the Chinese strings                y:the bebinning y coordinate of the Chinese stringssize:the size of Chinese stringsstr:the start address of the Chinese stringsmode:0-white background and black character     1-black background and white character * @retvalue   :None******************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>显示其他内容可以 结合<code>test.c</code>  中的实例与  <code>gui.c</code> 里的函数说明学习。</p><p>为了分开gb2312与utf-8，我将显示中文的地方全部写在了一个文件里，我在 <code>main.c</code> 用到的时候直接调用。</p><h3 id="驱动DHT11温湿度传感器（单总线协议的学习）"><a href="#驱动DHT11温湿度传感器（单总线协议的学习）" class="headerlink" title="驱动DHT11温湿度传感器（单总线协议的学习）"></a>驱动DHT11温湿度传感器（<strong>单总线协议的学习</strong>）</h3><p>）当时大二赶广和通项目的时候用的是 <code>DS18B20</code> 来着，是个单总线协议的温度传感器，网上找了段代码糊了一个，这次用 <code>DHT11</code> 学习学习单总线协议。</p><blockquote><p>DHT11 是一款湿温度一体化的数字传感器。该传感器包括一个电阻式测湿元件和一个 NTC<br>测温元件，并与一个高性能 8 位单片机相连接。通过单片机等微处理器简单的电路连接就能够<br>实时的采集本地湿度和温度。DHT11 与单片机之间能采用简单的单总线进行通信，仅仅需要一<br>个 I&#x2F;O 口。传感器内部湿度和温度数据 40Bit 的数据一次性传给单片机，数据采用校验和方式<br>进行校验，有效的保证数据传输的准确性。DHT11 功耗很低，5V 电源电压下，工作平均最大<br>电流 0.5mA。DHT11 的技术参数：工作电压范围：3.3V-5.5V；工作电流 ：平均 0.5mA；输出：单总线数字信号；测量范围：湿度 20<del>90％RH，温度 0</del>50℃；精度 ：湿度±5%，温度±2℃；分辨率 ：湿度 1%，温度 1℃；</p></blockquote><h4 id="DHT11-数据传输格式"><a href="#DHT11-数据传输格式" class="headerlink" title="DHT11 数据传输格式"></a>DHT11 数据传输格式</h4><p>DHT11 数字湿温度传感器采用单总线数据格式。即，单个数据引脚端口完成输入输出双向传输。其数据包由 40Bit 组成。数据分小数部分和整数部分，一次完整的数据传输为40bit，高位先出。</p><p>DHT11 的数据格式为：<strong>8bit 湿度整数数据</strong> + <strong>8bit 湿度小数数据</strong> + <strong>8bit 温度整数数据</strong> + <strong>8bit 温度小数数据</strong> + <strong>8bit 校验和</strong>。其中校验和数据为前四个字节相加。<br>传感器数据输出的是未编码的二进制数据。数据(湿度、温度、整数、小数)之间应该分开处理。例如，某次从 DHT11 读到的数据如下表所示：</p><table><thead><tr><th>byte4</th><th>byte3</th><th>byte2</th><th>byte1</th><th>byte0</th></tr></thead><tbody><tr><td>0010 1101</td><td>0000 0000</td><td>0001 1100</td><td>0000 0000</td><td>0100 1001</td></tr><tr><td>湿度 <strong>整数</strong> 部分</td><td>湿度 <strong>小数</strong> 部分</td><td>温度 <strong>整数</strong> 部分</td><td>温度 <strong>小数</strong> 部分</td><td>校验和</td></tr></tbody></table><p>由以上数据就可得到湿度和温度的值，计算方法：</p><blockquote><p>湿度&#x3D; byte4 . byte3&#x3D;45.0 (％RH)<br>温度&#x3D; byte2 . byte1&#x3D;28.0 ( ℃)<br>校验&#x3D; byte4+ byte3+ byte2+ byte1&#x3D;73(&#x3D;湿度+温度)(校验正确)</p></blockquote><p>DHT11 的数据格式是十分简单，DHT11 和 MCU 的一次通信最大为 3ms 左右，建议主机连续读取时间间隔不要小于 100ms。 下面，我们介绍一下 DHT11 的传输时序。</p><h4 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h4><p>本次使用数据传输脚：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 数据传输脚 PA12</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DHT11_DQ_OUT</span> <span class="token expression">GPIO_PIN_12</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>设置数据传输脚为输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DHT11_IO_OUT</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>GPIO_InitStruct<span class="token punctuation">.</span>Pin <span class="token operator">=</span> DHT11_DQ_OUT<span class="token punctuation">;</span>GPIO_InitStruct<span class="token punctuation">.</span>Mode <span class="token operator">=</span> GPIO_MODE_OUTPUT_PP<span class="token punctuation">;</span>GPIO_InitStruct<span class="token punctuation">.</span>Pull <span class="token operator">=</span> GPIO_NOPULL<span class="token punctuation">;</span>GPIO_InitStruct<span class="token punctuation">.</span>Speed <span class="token operator">=</span> GPIO_SPEED_FREQ_LOW<span class="token punctuation">;</span><span class="token function">HAL_GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>设置数据传输脚为输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DHT11_IO_IN</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>Pin <span class="token operator">=</span> DHT11_DQ_OUT<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>Mode <span class="token operator">=</span> GPIO_MODE_INPUT<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>Pull <span class="token operator">=</span> GPIO_PULLUP<span class="token punctuation">;</span>    <span class="token function">HAL_GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="DHT11-的数据发送流程"><a href="#DHT11-的数据发送流程" class="headerlink" title="DHT11 的数据发送流程"></a>DHT11 的数据发送流程</h4><p>DHT11 的数据发送流程如下图所示：</p><p><img src="https://yun.ksfu.top/blog/DHT11/DHT11-1.png" alt="DHT11 的数据发送流程"></p><h5 id="开始信号"><a href="#开始信号" class="headerlink" title="开始信号"></a>开始信号</h5><p>首先主机发送 <strong>开始信号</strong>，即：拉低数据线，保持 t1（至少 18ms）时间，然后 <strong>拉高数据线</strong>  t2（20~ 40us）时间，然后读取 DHT11 的响应。</p><p><img src="https://yun.ksfu.top/blog/DHT11/DHT11-2.png" alt="DHT11 开始信号"></p><p><strong>复位DHT11</strong> :</p><figure><div class="code-wrapper"><pre class="line-numbers language-C" data-language="C"><code class="language-C">void DHT11_Rst(void) &#123;                DHT11_IO_OUT(); &#x2F;&#x2F;SET OUTPUT    HAL_GPIO_WritePin(GPIOA, DHT11_DQ_OUT, GPIO_PIN_RESET);    delay_ms(20); &#x2F;&#x2F;拉低至少18ms    HAL_GPIO_WritePin(GPIOA, DHT11_DQ_OUT, GPIO_PIN_SET); delay_us(30); &#x2F;&#x2F;主机拉高20~40us&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="响应信号"><a href="#响应信号" class="headerlink" title="响应信号"></a>响应信号</h5><p>DHT11的 <strong>响应</strong> ：正常的话，DHT11 会 <strong>拉低</strong> 数据线，保持 t3（40~50us）时间，作为响应信号，然后 DHT11 <strong>拉高</strong> 数据线，保持 t4（40 ~50us）时间后，开始输出数据。</p><p><img src="https://yun.ksfu.top/blog/DHT11/DHT11-3.png" alt="DHT11 开始信号"></p><p><strong>检测DHT11的回应</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//返回1:未检测到DHT11的存在</span><span class="token comment">//返回0:存在</span><span class="token class-name">uint8_t</span> <span class="token function">DHT11_Check</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token class-name">uint8_t</span> retry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">DHT11_IO_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//SET INPUT</span>    <span class="token comment">//DHT11会拉低40~80us</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> DHT11_DQ_OUT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> retry<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>retry<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>retry<span class="token operator">>=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> retry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//DHT11拉低后会再次拉高40~80us</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> DHT11_DQ_OUT<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>retry<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>retry<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>retry<span class="token operator">>=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="DHT11-发送数据"><a href="#DHT11-发送数据" class="headerlink" title="DHT11 发送数据"></a>DHT11 发送数据</h5><p>总线为低电平，说明DHT11发送响应信号，DHT11发送响应信号后，再把总线拉高80us，准备发送数据。</p><p>每一bit数据都以50us低电平时隙 <strong>开始</strong> ，<strong>高电平的长短</strong> 定了数据位是0还是1。</p><p>如果读取响应信号为高电平，则DHT11没有响应，请检查线路是否连接正常。当最后一bit数据传送完毕后，DHT11拉低总线50us，随后总线由上拉电阻拉高进入空闲状态。</p><h5 id="DHT11-发送-0"><a href="#DHT11-发送-0" class="headerlink" title="DHT11 发送 0"></a>DHT11 发送 0</h5><p><strong>高电平是26-28us就表示0。</strong></p><p><img src="https://yun.ksfu.top/blog/DHT11/DHT11-4.png" alt="DHT11 发送0"></p><h5 id="DHT11-发送1"><a href="#DHT11-发送1" class="headerlink" title="DHT11 发送1"></a>DHT11 发送1</h5><p><strong>高电平是70us表示1。</strong></p><p><img src="https://yun.ksfu.top/blog/DHT11/DHT11-5.png" alt="DHT11 发送0"></p><h5 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h5><p>主机只要读取等待50us低电平过去，然后再判断高电平长短就能收集数据了。</p><p>从DHT11读取一个位：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//返回值：1/0</span><span class="token class-name">uint8_t</span> <span class="token function">DHT11_Read_Bit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token class-name">uint8_t</span> retry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> DHT11_DQ_OUT<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>retry<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//等待变为低电平</span><span class="token punctuation">&#123;</span>retry<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>retry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> DHT11_DQ_OUT<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>retry<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//等待变高电平</span><span class="token punctuation">&#123;</span>retry<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待40us</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> DHT11_DQ_OUT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>读取8次为一个字节：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//返回值：读到的数据</span><span class="token class-name">uint8_t</span> <span class="token function">DHT11_Read_Byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>dat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dat <span class="token operator">=</span> dat<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span> dat <span class="token operator">=</span> dat <span class="token operator">|</span> <span class="token function">DHT11_Read_Bit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>一共5个字节：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//temp:温度值(范围:0~50°)</span><span class="token comment">//humi:湿度值(范围:20%~90%)</span><span class="token comment">//返回值：0,正常;1,读取失败</span><span class="token keyword">void</span> <span class="token function">DHT11_Read_Data</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>temp<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>humi<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>         <span class="token class-name">uint8_t</span> i<span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">DHT11_Rst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DHT11_Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//读取40位数据</span><span class="token punctuation">&#123;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">DHT11_Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>humi<span class="token operator">=</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span>temp<span class="token operator">=</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>）不过为了显示的更精确可以小数位也传过去。</p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>到此，完成了串口通信，OLED屏幕驱动，温湿度数据的获取。之后在OLED屏幕上的显示布局可以自己设计~ </p>