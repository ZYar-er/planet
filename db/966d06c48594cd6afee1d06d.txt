<blockquote><h1 id="基于FPGA的ASK信号生成及测量分析技术"><a href="#基于FPGA的ASK信号生成及测量分析技术" class="headerlink" title="基于FPGA的ASK信号生成及测量分析技术"></a>基于FPGA的ASK信号生成及测量分析技术</</blockquote><h1 id="基于FPGA的ASK信号生成及测量分析技术"><a href="#基于FPGA的ASK信号生成及测量分析技术" class="headerlink" title="基于FPGA的ASK信号生成及测量分析技术"></a>基于FPGA的ASK信号生成及测量分析技术</h1><p>） 随机信号实验选到了这个，就当学 <code>Verilog</code> 了。</p><p>（以下内容围绕西电通院随机信号实验：《基于FPGA的ASK信号生成及测量分析技术》展开。</p><h2 id="模块框图"><a href="#模块框图" class="headerlink" title="模块框图"></a>模块框图</h2><p>2ASK调制电路组成框图</p><img src="https://yun.ksfu.top/blog/2ASK/%E8%AE%B0%E5%BD%95.png"  /><p>2ASK调制的FPGA程序框图</p><img src="https://yun.ksfu.top/blog/2ASK/%E6%A1%86%E5%9B%BE.png"  /><h2 id="模块分解"><a href="#模块分解" class="headerlink" title="模块分解"></a>模块分解</h2><p>梳理一下：</p><ol><li>分频模块</li><li>载波产生模块<ul><li>八进制计数器</li><li>ROM</li></ul></li><li>m序列产生模块</li><li>键控开关</li><li>DAC输出模块（给了）</li><li>拓展输出口（给了）</li></ol><p>所以需要编写5个模块。</p><h3 id="1-分频模块设计"><a href="#1-分频模块设计" class="headerlink" title="1. 分频模块设计"></a>1. 分频模块设计</h3><blockquote><p>2.1.1按原理2.1节设计分频器a（4分频、6分频、10分频等）将系统时钟sys_clk分频，作为载波产生模块的时钟，则载波频率为sys_clk&#x2F;(分频值a*一个载波周期的存储点数n)(Hz)。(sys_clk&#x3D;26MHz)</p><p>2.1.2按原理2.1节设计分频器b（分频值应设置为上步中a*n的整数倍）将系统时钟分频，作为m序列产生模块的时钟，则基带码元速率为sys_clk&#x2F;b(bit&#x2F;s)。</p></blockquote><p>可以知道要设计两个分频模块，其中主频为 <strong>26MHz</strong>。</p><p>分频模块端口示意图：</p><img src="https://yun.ksfu.top/blog/2ASK/%E5%88%86%E9%A2%91%E6%A8%A1%E5%9D%97.png" style="zoom: 50%;" /><blockquote><p>clk端为系统时钟信号输入，从out8、out16、out256可分别得到系统时钟的8分频、16分频和256分频信号。</p></blockquote><p>经历了一晚上的折磨，我终于悟出了：<strong>所谓X分频，就是把时钟原来每一下变一次,变成现在是每X下变一次。</strong> <del>（有时候很明显的事情就是转不过来弯</del></p><p>所以就可以顺着这个思路编写  <code>fenpin.v</code> ：</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> fenpin <span class="token punctuation">(</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    clk<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     out8<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     out16<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     out256<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 所谓X分频，就是原来时钟是每一下变一次</span><span class="token comment">// 现在是每X下变一次</span><span class="token comment">// lb(256) = 8</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter_256<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter_16<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter_8<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    counter_256 <span class="token operator">=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>    counter_16 <span class="token operator">=</span> <span class="token number">4'b0</span><span class="token punctuation">;</span>    counter_8 <span class="token operator">=</span> <span class="token number">3'b0</span><span class="token punctuation">;</span>    out8 <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    out16 <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    out256 <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">end</span>    <span class="token comment">// 折中计数到一半就行</span><span class="token comment">// 8分频</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>counter_8 <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        counter_8 <span class="token operator">&lt;=</span> counter_8 <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        out8 <span class="token operator">&lt;=</span> out8<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token keyword">begin</span>        counter_8 <span class="token operator">&lt;=</span> <span class="token number">3'b0</span><span class="token punctuation">;</span>        out8 <span class="token operator">&lt;=</span> <span class="token operator">~</span>out8<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">// 16分频</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>counter_16 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        counter_16 <span class="token operator">&lt;=</span> counter_16 <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        out16 <span class="token operator">&lt;=</span> out16<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token keyword">begin</span>        counter_16 <span class="token operator">&lt;=</span> <span class="token number">4'b0</span><span class="token punctuation">;</span>        out16 <span class="token operator">&lt;=</span> <span class="token operator">~</span>out16<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">// 256分频</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>counter_256 <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        counter_256 <span class="token operator">&lt;=</span> counter_256 <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        out256 <span class="token operator">&lt;=</span> out256<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token keyword">begin</span>        counter_256 <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>        out256 <span class="token operator">&lt;=</span> <span class="token operator">~</span>out256<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>testbench</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span>  <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span>  <span class="token function">tb_fenpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span>     clk<span class="token punctuation">;</span><span class="token keyword">wire</span>    out8<span class="token punctuation">;</span><span class="token keyword">wire</span>    out16<span class="token punctuation">;</span><span class="token keyword">wire</span>    out256<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk  <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>fenpin fenpin_inst<span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk <span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">.</span>out8 <span class="token punctuation">(</span>out8<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>out16 <span class="token punctuation">(</span>out16<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>out256 <span class="token punctuation">(</span>out256<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真波形：</p><img src="https://yun.ksfu.top/blog/2ASK/%E5%88%86%E9%A2%91%E4%BB%BF%E7%9C%9F.png"  /><h3 id="2-载波产生模块"><a href="#2-载波产生模块" class="headerlink" title="2. 载波产生模块"></a>2. 载波产生模块</h3><p>载波产生模块示意图：</p><img src="https://yun.ksfu.top/blog/2ASK/%E8%BD%BD%E6%B3%A2%E4%BA%A7%E7%94%9F%E6%A8%A1%E5%9D%97.png"  /><blockquote><p>载波产生模块示意图如上图所示，其中clock为载波采样时钟，q[2:0]为计数器输出，q[7:0]输出为载波信号。载波产生模块由一个计数器和一个ROM构成，其中ROM中存储着一个载波周期的样点值，则计数器的进制设置为一个载波周期包含的样点数。本实验中一个载波周期取八个样点，计数器设置为八进制计数器，ROM和计数器均可使用IP核实现。</p></blockquote><p>结合示意图可以知道，载波产生模块又分为两部分：<strong>八进制计数器</strong>和<strong>ROM</strong>。分开来写。</p><h4 id="1）-八进制计数器"><a href="#1）-八进制计数器" class="headerlink" title="1） 八进制计数器"></a>1） 八进制计数器</h4><p>q 的值每个时钟加1，从0加到7。</p><p><code>lpm_counter0.v</code> ：</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> lpm_counter0 <span class="token punctuation">(</span>    <span class="token keyword">input</span>   <span class="token keyword">wire</span>            clk<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token keyword">reg</span>     <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>   q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    q <span class="token operator">=</span> <span class="token number">3'b0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token number">3'b111</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        q <span class="token operator">&lt;=</span> <span class="token number">3'b0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token keyword">begin</span>        q <span class="token operator">&lt;=</span> q <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>testbench</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span> <span class="token function">tb_lpm_counter0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span>             clk<span class="token punctuation">;</span><span class="token keyword">wire</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>   q<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>lpm_counter0 lpm_counter0_inst<span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真波形</p><img src="https://yun.ksfu.top/blog/2ASK/%E8%AE%A1%E6%95%B0%E5%99%A8%E4%BB%BF%E7%9C%9F.png"  /><h4 id="2）ROM"><a href="#2）ROM" class="headerlink" title="2）ROM"></a>2）ROM</h4><p>使用 <strong>IP核</strong> ，照着野火的教程学了学。</p><blockquote><p><a href="https://www.bilibili.com/video/BV17z411i7er/?p=46">46-第二十六讲-ROM-IP核的调用（一）_哔哩哔哩_bilibili</a></p></blockquote><p>经过大概分析，可以知道本实验使用 <strong>单端口ROM</strong> ，数据为 <strong>8位宽</strong> ，地址为 <strong>3位宽</strong> ，至少包含 <strong>8个</strong> 数据（采样了8个点），使用单时钟。</p><p>输出添加一个寄存器会延后两个周期输出。（原来延后一个，经过寄存器再延后一个。）</p><p>写操作是时钟的上升沿，读也是时钟的上升沿。</p><h5 id="产生-mif-文件"><a href="#产生-mif-文件" class="headerlink" title="产生 mif 文件"></a>产生 mif 文件</h5><p><a href="https://blog.csdn.net/weixin_44939178/article/details/112314742">matlab生成.mif文件 产生正弦信号数据_橘子FPGA的博客-CSDN博客_matlab生成正弦信号</a></p><blockquote><p>本实验中一个载波周期取八个样点。</p></blockquote><p>本次使用 <code>python</code> 进行生成<del>（就8个点手写也行</del>。</p><p>根据 <code>.mif</code> 文件的格式一句一句打印出来。</p><p>一个普通余弦信号周期为 $2\pi$   ，取样8个点，就是 $cos(2{\pi}\times\frac{x}{8})$ ;</p><p>数据位宽为8位，所表示的数据在0~255之间，所以需要将 $cos(2{\pi}\times\frac{x-1}{8})$ 的幅值**-1~+1变化到0~255**。</p><p>具体做法是将 $cos(2{\pi}\times\frac{x}{8})\times128+128$ 。就是将原幅值变换至-128~+128，然后加上128，范围变为0~256。 </p><p><code>python</code> 代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mathpi <span class="token operator">=</span> math<span class="token punctuation">.</span>pifilename <span class="token operator">=</span> <span class="token string">"sin_8x8.mif"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"WIDTH=8;\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"DEEPTH=8;\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"ADDRESS_RADIX=UNS;\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"DATA_RADIX=UNS;\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"CONTENT BEGIN\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>pi<span class="token operator">*</span>i<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">128</span><span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">256</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> x<span class="token operator">-</span><span class="token number">1</span>        file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"END;\n"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>效果（如果发现quartus报错就生成一个标准的mif文件然后把下面的复制进去替换：</p><figure><div class="code-wrapper"><pre class="line-numbers language-mif" data-language="mif"><code class="language-mif">WIDTH&#x3D;8;DEEPTH&#x3D;8;ADDRESS_RADIX&#x3D;UNS;DATA_RADIX&#x3D;UNS;CONTENT BEGIN0:2551:2182:1283:374:05:376:1277:218END;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><img src="https://yun.ksfu.top/blog/2ASK/sin.png"  /><h5 id="生成IP核"><a href="#生成IP核" class="headerlink" title="生成IP核"></a>生成IP核</h5><p>注意深度选择的时候下拉没有8深度的选择，但是可以手动输入。</p><p><del>）不过我在其他文件调用ip核的时候一直仿真失败emm，所以ip核就直接用了，等我找到问题再看看。</del></p><h5 id="编写代码及仿真"><a href="#编写代码及仿真" class="headerlink" title="编写代码及仿真"></a>编写代码及仿真</h5><p>添加IP核，进行仿真。</p><p><code>testbench</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span> <span class="token function">tb_lpm_rom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span>             clk<span class="token punctuation">;</span><span class="token keyword">reg</span>     <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>   address2<span class="token punctuation">;</span><span class="token keyword">wire</span>     <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>   q<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>    address2 <span class="token operator">=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span><span class="token important">always</span> <span class="token number">#20</span> <span class="token keyword">begin</span><span class="token function">if</span><span class="token punctuation">(</span>address2 <span class="token operator">==</span> <span class="token number">3'b111</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>address2 <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">begin</span>address2 <span class="token operator">&lt;=</span> address2 <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">end</span>cos_8x8cos_8x8_inst <span class="token punctuation">(</span><span class="token punctuation">.</span>address <span class="token punctuation">(</span> address2 <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>clock <span class="token punctuation">(</span> clk <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>q <span class="token punctuation">(</span> q <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真波形</p><img src="https://yun.ksfu.top/blog/2ASK/cos%E4%BB%BF%E7%9C%9F.png"  /><h3 id="3-m序列产生模块"><a href="#3-m序列产生模块" class="headerlink" title="3.m序列产生模块"></a>3.m序列产生模块</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45015947/article/details/89891757">m序列产生原理及其性质_Angelo_pj的博客-CSDN博客_m序列</a></p><p><a href="https://zhuanlan.zhihu.com/p/377685193">【verilog杂谈（一）】 2-16位长度的m序列发生器 - 知乎 (zhihu.com)</a></p></blockquote><blockquote><p>要求：按原理2.3节设计m序列产生模块，要求产生不同长度的m序列。</p></blockquote><p>代码根据实验要求修改自参考链接，可以产生2~16位的m序列。</p><p><code>mxulie.v</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> mxulie#<span class="token punctuation">(</span>        <span class="token keyword">parameter</span>       len <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment">// parameter range from 2 to 16</span>    <span class="token punctuation">)</span>    <span class="token punctuation">(</span>        <span class="token keyword">input</span> <span class="token keyword">wire</span>      clk<span class="token punctuation">,</span>        <span class="token keyword">output</span> <span class="token keyword">wire</span>     m_sequence    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span><span class="token punctuation">[</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Q_r<span class="token punctuation">;</span>    <span class="token keyword">assign</span> m_sequence <span class="token operator">=</span> Q_r<span class="token punctuation">[</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        Q_r <span class="token operator">&lt;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        Q_r <span class="token operator">&lt;=</span> Q_r<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// shift reg</span>        <span class="token function">case</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>            <span class="token number">2</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">3</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">4</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">5</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">6</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">7</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">9</span> <span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">10</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">11</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">12</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">13</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">14</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">15</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">16</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">^</span>Q_r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>testbench</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">//~ `New testbench</span><span class="token constant">`timescale</span>  <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ns <span class="token keyword">module</span> tb_mxulie<span class="token punctuation">;</span>   <span class="token comment">// M_series Parameters</span><span class="token keyword">parameter</span> M_len <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// M_series Inputs</span><span class="token keyword">reg</span>   clk                                  <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment">// M_series Outputs</span><span class="token keyword">wire</span>  m_sequence                                    <span class="token punctuation">;</span><span class="token important">always</span> <span class="token number">#10</span> clk<span class="token operator">=~</span>clk<span class="token punctuation">;</span>mxulie #<span class="token punctuation">(</span>    <span class="token punctuation">.</span>len <span class="token punctuation">(</span> M_len <span class="token punctuation">)</span><span class="token punctuation">)</span>mxulie_inst <span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk            <span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>m_sequence     <span class="token punctuation">(</span>m_sequence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真波形</p><img src="https://yun.ksfu.top/blog/2ASK/m%E5%BA%8F%E5%88%97.png"  /><h3 id="4-键控开关"><a href="#4-键控开关" class="headerlink" title="4.键控开关"></a>4.键控开关</h3><img src="https://yun.ksfu.top/blog/2ASK/%E9%94%AE%E6%8E%A7%E5%BC%80%E5%85%B3.png" style="zoom:50%;" /><blockquote><p>键控开关示意图图上图所示，其中data[7:0]端输入载波信号，gate端输入基带码元，当gate信号为1时，载波信号通过，如果gate信号为0时，载波信号不能通过。模块的输出端q[7:0]输出2ASK已调信号。</p></blockquote><p><code>lpm_gate.v</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">lpm_gate</span><span class="token punctuation">(</span>    <span class="token keyword">input</span>   <span class="token keyword">wire</span>                gate<span class="token punctuation">,</span>                <span class="token keyword">input</span>   <span class="token keyword">wire</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>       data<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token keyword">reg</span>     <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>       q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    q <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>gate <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        q <span class="token operator">&lt;=</span> data<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token keyword">begin</span>        q <span class="token operator">&lt;=</span> <span class="token number">8'b01111111</span><span class="token punctuation">;</span> <span class="token comment">// +127将0变换过去</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="整合以及整体仿真"><a href="#整合以及整体仿真" class="headerlink" title="整合以及整体仿真"></a>整合以及整体仿真</h2><p>将以上各个模块添加进实验给定的模板，并生成原理图，然后连线。</p><p>要整体仿真，所以要先把原理图转换为 <code>Verilog</code>  （File -&gt; Create &#x2F; Update -&gt; Create HDL Design File from Current File…），之后从工程文件移除原理图，设置生成的 <code>verilog</code>  文件为顶层文件进行编译，然后仿真。</p><p>通过对比编译出来的 RTL 视图，符合给定框图。</p><img src="https://yun.ksfu.top/blog/2ASK/twoask.png"  /><p>整体仿真，只要注意 <code>clk</code> , <code>m_squence</code> , <code>two_ask[7...0]</code> 这几个信号就行。 <code>testbench</code> 如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span> tb_sim<span class="token punctuation">;</span><span class="token keyword">reg</span>             clk<span class="token punctuation">;</span><span class="token keyword">wire</span>            m_squence<span class="token punctuation">;</span><span class="token keyword">wire</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>   two_ask<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>twoask <span class="token function">twoask_inst</span><span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">m_squence</span><span class="token punctuation">(</span>m_squence<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">two_ask</span><span class="token punctuation">(</span>two_ask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真波形：</p><img src="https://yun.ksfu.top/blog/2ASK/%E6%95%B4%E4%BD%93%E4%BB%BF%E7%9C%9F.jpg"  /><h3 id="管脚分配"><a href="#管脚分配" class="headerlink" title="管脚分配"></a>管脚分配</h3><p>管脚分配啥的给的模板文件里已经分配好了，直接用就行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>毕竟是主要是记录 <code>verilog</code> 的一个学习过程，剩下的就不分析了，属于是实验报告里的活。这算是第一次用 <code>verilog</code> 干这种比较综合的活？接触到了一些新玩意，IP核，mif文件之类的。也锻炼了从s一样实验指导手册里提炼信息的能力？</p><p><del>（然后细节和要补充的等后面想起来再说</del> </p><p> <del>（我超突然想起来线下验收完忘了拍时域波形</del></p>