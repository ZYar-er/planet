<h1 id="Wireshark-抓包-HTTP-实验">Wireshark 抓包 HTTP 实验<a class="headerlink" href="#Wireshark-抓包-HTTP-实验" title="Permanent link">&para;</a></h1>
<!-- more -->

<p>大二下，计网作业。</p>
<h2 id="解密-HTTPS">解密 HTTPS<a class="headerlink" href="#解密-HTTPS" title="Permanent link">&para;</a></h2>
<p>现在网站基本都用 HTTPS，HTTPS 用了 TLS 做加密，需要解密后才能看到原始的 HTTP 报文。</p>
<p>Chrome 和 Firefox 浏览器提供了记录 TLS 密钥的功能。添加环境变量 <code>SSLKEYLOGFILE</code>，值为一个文件路径。彻底重启浏览器（任务管理器里检查），TLS 密钥相关的信息就会被保存到这个文件中。</p>
<p>在 Wireshark 中，点击编辑 &gt; 首选项，找到 Protocols &gt; TLS 中的 (Pre)-Master-Secret log filename 填入之前的文件路径就能解密 HTTPS 了。</p>
<h2 id="过滤">过滤<a class="headerlink" href="#过滤" title="Permanent link">&para;</a></h2>
<p>设置过滤表达式 <code>http || http2 || http3 || tcp</code>，然后去浏览器打开 https://www.baidu.com 过一会再关闭。</p>
<p>回到 Wireshark，找到协议为 TLSv1.2 的 <code>Client Hello (SNI=www.baidu.com)</code>，得知目标的 ip 地址为 110.242.68.3。</p>
<p>更新过滤表达式为 <code>(http || http2 || http3 || tcp) &amp;&amp; (ip.src == 110.242.68.3 || ip.dst == 110.242.68.3)</code>。</p>
<h2 id="数据包分析">数据包分析<a class="headerlink" href="#数据包分析" title="Permanent link">&para;</a></h2>
<h3 id="应用层">应用层<a class="headerlink" href="#应用层" title="Permanent link">&para;</a></h3>
<p><img alt="应用层" src="../../../obsidian-vault/attachments/wireshark-exp-http-data.png" /></p>
<p>应用层使用 HTTP。</p>
<ul>
<li>
<p>请求行，方法为 <code>GET</code>，URL 为 <code>/</code>，版本为 <code>HTTP/1.1</code></p>
<div class="highlight"><pre><span></span><code>GET / HTTP/1.1 
</code></pre></div>
</li>
<li>
<p>请求头</p>
<div class="highlight"><pre><span></span><code><span class="nt">Host</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">www.baidu.com</span><span class="w"> </span>
<span class="nt">Connection</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">keep-alive</span><span class="w"> </span>
<span class="nt">sec-ch-ua</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Microsoft</span><span class="nv"> </span><span class="s">Edge&quot;</span><span class="l l-Scalar l-Scalar-Plain">;v=&quot;125&quot;, &quot;Chromium&quot;;v=&quot;125&quot;, &quot;Not.A/Brand&quot;;v=&quot;24&quot;</span><span class="w"> </span>
<span class="nt">sec-ch-ua-mobile</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">?0</span><span class="w"> </span>
<span class="nt">sec-ch-ua-platform</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Windows&quot;</span><span class="w"> </span>
<span class="nt">Upgrade-Insecure-Requests</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">1</span><span class="w"> </span>
<span class="nt">User-Agent</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0</span><span class="w"> </span>
<span class="nt">Accept</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><span class="w"> </span>
<span class="nt">Sec-Fetch-Site</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">none</span><span class="w"> </span>
<span class="nt">Sec-Fetch-Mode</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">navigate</span><span class="w"> </span>
<span class="nt">Sec-Fetch-User</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">?1</span><span class="w"> </span>
<span class="nt">Sec-Fetch-Dest</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">document</span><span class="w"> </span>
<span class="nt">Accept-Encoding</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">gzip, deflate, br, zstd</span><span class="w"> </span>
<span class="nt">Accept-Language</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span>
<span class="nt">Cookie</span><span class="p">:</span><span class="w"> </span><span class="l l-Scalar l-Scalar-Plain">...</span>
</code></pre></div>
</li>
<li>
<p>空行</p>
</li>
<li>主体（这里没有）</li>
</ul>
<h3 id="传输层">传输层<a class="headerlink" href="#传输层" title="Permanent link">&para;</a></h3>
<p><img alt="传输层" src="../../../obsidian-vault/attachments/wireshark-exp-tcp-data.png" /></p>
<p>传输层使用 TCP。</p>
<ul>
<li>源始端口：<code>e9 88</code>（59784 端口）</li>
<li>目的端口：<code>01 bb</code>（443 端口）</li>
<li>序列号：<code>85 ad cd ce</code>（2242760142）</li>
<li>确认号：<code>df cc 85 0f</code>（3754722575）</li>
<li>偏移：<code>5</code>（头部长度为 5*4=20 字节）</li>
<li>保留：<code>0</code></li>
<li>标志：<code>18</code>（ACK 和 PSH）</li>
<li>窗口大小：<code>02 03</code>（515）</li>
<li>校验和：<code>01 6d</code></li>
<li>紧急指针：<code>00 00</code></li>
</ul>
<h3 id="网络层">网络层<a class="headerlink" href="#网络层" title="Permanent link">&para;</a></h3>
<p><img alt="网络层" src="../../../obsidian-vault/attachments/wireshark-exp-ip-data.png" /></p>
<p>网络层使用 IP。</p>
<ul>
<li>版本：<code>4</code>（表示 IPv4）</li>
<li>头长：<code>5</code>（头部长度为 5*4=20 字节）</li>
<li>服务类型：<code>00</code>（默认）</li>
<li>包裹总长：<code>0000</code>（IP 数据包总长 0 字节，可能是 TSO 的原因）</li>
<li>重组标识：<code>cacf</code>（51919，发送主机赋予的标识，以便接收方进行分片重组）</li>
<li>标志（3 位）段偏移量（13 位）：<code>4000</code>（标志：不分片，段偏移量：0）</li>
<li>生存时间：<code>80</code>（128，每经过一个路由器，该值就减一，到零丢弃）</li>
<li>协议代码：<code>06</code>（表示 TCP 协议）</li>
<li>头校验和：<code>0000</code>（没开启校验）</li>
<li>源始地址：<code>0ac643ab</code>（10.198.67.171）</li>
<li>目的地址：<code>6ef24403</code>（110.242.68.3）</li>
</ul>
<h3 id="数据链路层">数据链路层<a class="headerlink" href="#数据链路层" title="Permanent link">&para;</a></h3>
<p><img alt="数据链路层" src="../../../obsidian-vault/attachments/wireshark-exp-ethernet-data.png" /></p>
<p>数据链路层使用 Ethernet II。</p>
<ul>
<li>目的 MAC 地址：<code>b0 76 1b 21 30 ab</code>（b0:76:1b:21:30:ab）</li>
<li>源始 MAC 地址：<code>54 6c eb b3 0b 05</code>（54:6c:eb:b3:0b:05）</li>
<li>类型：<code>08 00</code>（表示 IPv4）</li>
</ul>
<h2 id="TCP-连接建立">TCP 连接建立<a class="headerlink" href="#TCP-连接建立" title="Permanent link">&para;</a></h2>
<p><img alt="TCP 连接建立" src="../../../obsidian-vault/attachments/wireshark-exp-tcp-conn.png" /></p>
<ol>
<li>客户端（10.198.67.171）向百度（110.242.68.3）发送第一个段，SYN 被置位，序列号为 2242758111（相对值 0）。</li>
<li>百度（110.242.68.3）向客户端（10.198.67.171）发送第二个段，SYN 和 ACK 被置位，序列号为 3754722416（相对值 0），确认号为 2242758112（相对值 1）。</li>
<li>客户端（10.198.67.171）向百度（110.242.68.3）发送第三个段，ACK 被置位，序列号为 2242758112（相对值 1），确认号为 3754722417（相对值 1）。</li>
</ol>
<p>经过三次握手，TCP 连接建立。</p>
<h2 id="TCP-连接终止">TCP 连接终止<a class="headerlink" href="#TCP-连接终止" title="Permanent link">&para;</a></h2>
<p><img alt="TCP 连接终止" src="../../../obsidian-vault/attachments/wireshark-exp-tcp-close.png" /></p>
<ol>
<li>客户端（10.198.67.171）向百度（110.242.68.3）发送第一个段，FIN 和 ACK 被置位，序列号为 2242765910（相对值 7799），确认号为 3754841098（相对值 118682）。</li>
<li>百度（110.242.68.3）向客户端（10.198.67.171）发送第二个段，ACK 被置位，序列号为 3754841098（相对值 118682），确认号为 2242765911（相对值 7800）。</li>
<li>百度（110.242.68.3）向客户端（10.198.67.171）发送剩余的数据，图中为 TLS 的关闭通知。</li>
<li>百度（110.242.68.3）向客户端（10.198.67.171）发送第三个段，FIN 和 ACK 被置位，序列号为 3754841129（相对值 118713），确认号为 2242765911（相对值 7800）。</li>
<li>客户端（10.198.67.171）向百度（110.242.68.3）发送第四个段，ACK 被置位，序列号为 2242765911（相对值 7800），确认号为 3754841130（相对值 118714）。</li>
</ol>
<p>经过四次握手，TCP 连接终止。</p><hr />