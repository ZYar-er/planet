<img src="http://legacy.superbart.top/picture/Random/adwaita-d.webp" alt="Featured image of post Vala 介绍" /><p><a class="link" href="https://vala.dev/"  target="_blank" rel="noopener"
    >Vala</a> 是由 <a class="link" href="https://www.gnome.org/"  target="_blank" rel="noopener"
    >GNOME 小矮人</a>开发的面向对象编程语言。编程语法接近 Java，围绕 <a class="link" href="https://gitlab.gnome.org/GNOME/glib/"  target="_blank" rel="noopener"
    >GLib</a> 库展开。编译方式是先翻译成 C 语言代码，然后编译。用途嘛&hellip;&hellip;我来讲个故事吧。</p>
<p>我半年前学了 Dart，Google 开发的语言，编程语法接近 Javascript。官网说它是“多用途语言”，然而我感觉多数人学了它，就是为了用 Flutter :-P</p>
<p>Vala 也是这样，名义上是一个“多用途语言”，但是我感觉多数人学了它，只是为了 GTK。我也是不知道为啥，非得用这个语言写我的<a class="link" href="https://github.com/BenderBlog/Practise-Programs/tree/main/MySQL/exp4"  target="_blank" rel="noopener"
    >数据库大作业</a>，花了两周时间边学边写，最后也不知道我学了个啥&hellip;&hellip;</p>
<p>不得不说，GLib 是一个很强大的库。本来说是给 GTK 服务的，后来独立出去了。它实现了单/双向链表，变长数组，树，Map 等数据结构。它还以 GObject 为中心，构建了一个相当完善的，庞大的，<del>让我这个菜鸡不知所以的</del>类系统。</p>
<p>接下来大致介绍顺序：</p>
<ol>
<li>
<p>基本输入输出（从键盘输入，从终端输出）</p>
</li>
<li>
<p>判断语句 if-else 和 switch</p>
</li>
<li>
<p>循环语句，包括计数和计事件循环</p>
</li>
<li>
<p>我一点都不懂的面向对象</p>
</li>
<li>
<p>GLib 库和 Gee 库</p>
</li>
<li>
<p>SQLite 3 库</p>
</li>
</ol>
<h2 id="推荐链接">推荐链接</h2>
<p>先给大家推荐一些前人的经验教训：</p>
<ul>
<li>
<p><a class="link" href="https://wszqkzqk.github.io/2022/10/17/%E6%8E%A2%E7%B4%A2Vala%E8%AF%AD%E8%A8%80/"  target="_blank" rel="noopener"
    >探索Vala语言 - 星外之神的博客 | wszqkzqk Blog</a></p>
</li>
<li>
<p><a class="link" href="https://valadoc.org/index.htm"  target="_blank" rel="noopener"
    >Valadoc.org (Vala 库文档网站)</a></p>
</li>
<li>
<p><a class="link" href="https://wiki.gnome.org/Projects/Vala/Documentation"  target="_blank" rel="noopener"
    >Projects/Vala/Documentation - GNOME Wiki! (官方文档)</a></p>
</li>
</ul>
<h2 id="基本输入输出">基本输入输出</h2>
<p>官方演示：<a class="link" href="https://wiki.gnome.org/Projects/Vala/BasicSample"  target="_blank" rel="noopener"
    >Projects/Vala/BasicSample - GNOME Wiki!</a></p>
<p>输出一句话，都是那德行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// GLib 的 print 函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Clapton is GOD!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 使用到了 stdin / stdout / stderr 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s is GOD!&#34;</span><span class="p">,</span><span class="s">&#34;Clapton&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>输入一个数字：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 双精度浮点数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">double</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 类似 C 语言的 scanf，注意 out
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// 不是取地址符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">stdin</span><span class="p">.</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%lf&#34;</span><span class="p">,</span><span class="k">out</span><span class="w"> </span><span class="n">a</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 类似 C 语言的 printf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.3f&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdin</span><span class="p">.</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="k">out</span><span class="w"> </span><span class="n">b</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="n">b</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>输入字符串：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;Welcome, what&#39;s your name?&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">string</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read_line</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;OK, %s, main course is prepared for you.&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="判断语句">判断语句</h2>
<p>if-else 判断：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter a year: &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">year</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdin</span><span class="p">.</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="k">out</span><span class="w"> </span><span class="n">year</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">year</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">year</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">400</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Maybe Olympics if no war.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;No Olympics.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>swtich 判断：</p>
<p>省略，很少用到。</p>
<h2 id="循环语句">循环语句</h2>
<p>计次数循环 for</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="c1">// 金字塔输出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stdin</span><span class="p">.</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="k">out</span><span class="w"> </span><span class="n">a</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">2</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">print</span><span class="p">(</span><span class="s">&#34; &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>计事件循环 while</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="c1">// Vala 引用库的方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">using</span><span class="w"> </span><span class="nn">Random</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 这里我用了随机数类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">toGuess</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Random</span><span class="p">.</span><span class="n">int_range</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">50</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="nb">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter a number: &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stdin</span><span class="p">.</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="n">a</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">toGuess</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">toGuess</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Think larger.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Think smaller.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Match</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="面向对象特性">面向对象特性</h2>
<p>先说一句，我面向对象课学的一塌糊涂，如果想了解更多，请看官方介绍：<a class="link" href="https://wiki.gnome.org/Projects/Vala/Tutorial#Object_Oriented_Programming"  target="_blank" rel="noopener"
    >Project/Vala/Tutorial#OOP</a></p>
<p>注意，Vala 基于 GLib，GLib 包含 GObject，GObject 仅支持单向继承。所以，跟 Java 一样，Vala 是单继承+接口。</p>
<p>从大家喜闻乐见的开始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kd">class</span><span class="w"> </span><span class="nc">Animal</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 类里面的变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// 和 Java 一样，有 private protected public
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="kt">string</span><span class="w"> </span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Animal</span><span class="w"> </span><span class="p">(</span><span class="kt">string</span><span class="w"> </span><span class="n">_name</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 析构函数，一般不用写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// ~Animal();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Punish you in the name of the moon, &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span><span class="w"> </span><span class="nc">Cat</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">Animal</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">cute</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Cat</span><span class="w"> </span><span class="p">(</span><span class="kt">string</span><span class="w"> </span><span class="n">_name</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">cute</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// base() 调取父类构造函数，必须写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">base</span><span class="p">(</span><span class="n">_name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">this</span><span class="p">.</span><span class="n">cute</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cute</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 重写方法需要加 &#34;new&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">base</span><span class="p">.</span><span class="n">action</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="n">cute</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="s">&#34;meow~&#34;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&#34;graw~&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Cat</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Cat</span><span class="p">(</span><span class="s">&#34;A&#34;</span><span class="p">,</span><span class="nb">true</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">action</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>这个是我从网上抄的一段代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="c1">// 接口，也就是不能被实例化的虚类。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">interface</span><span class="w"> </span><span class="nc">Printable</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// abstract 要由继承的类实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">abstract</span><span class="w"> </span><span class="kt">string</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// virtual 有默认的实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">virtual</span><span class="w"> </span><span class="kt">string</span><span class="w"> </span><span class="n">pretty_print</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;Please &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span><span class="w"> </span><span class="nc">NormalPrint</span><span class="o">:</span><span class="w"> </span><span class="n">Object</span><span class="p">,</span><span class="w"> </span><span class="n">Printable</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 实现上面的 abstract
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">string</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;don&#39;t forget about me</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span><span class="w"> </span><span class="nc">OverridePrint</span><span class="o">:</span><span class="w"> </span><span class="n">Object</span><span class="p">,</span><span class="w"> </span><span class="n">Printable</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">string</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;Mind the gap</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 重载函数，覆盖 virtual 的默认实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">override</span><span class="w"> </span><span class="kt">string</span><span class="w"> </span><span class="n">pretty_print</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;Override</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">var</span><span class="w"> </span><span class="n">normal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">NormalPrint</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">var</span><span class="w"> </span><span class="n">overridden</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">OverridePrint</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">print</span><span class="w"> </span><span class="p">(</span><span class="n">normal</span><span class="p">.</span><span class="n">pretty_print</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">print</span><span class="w"> </span><span class="p">(</span><span class="n">overridden</span><span class="p">.</span><span class="n">pretty_print</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="gee">Gee</h2>
<p><a class="link" href="https://wiki.gnome.org/Projects/Libgee"  target="_blank" rel="noopener"
    >Gee</a> 相当于 C++ 里面的 STL 。我对这个了解不多，先把官方的示例贴上来：<a class="link" href="https://wiki.gnome.org/Projects/Vala/GeeSamples"  target="_blank" rel="noopener"
    >Projects/Vala/GeeSamples - GNOME Wiki!</a></p>
<p>实际上 GLib 已经实现了很多的数据结构，但我个人建议 Gee，功能比 Glib 本身有的更丰富，但是编程的时候需要添加 Gee 库。 </p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kn">using</span><span class="w"> </span><span class="nn">Gee</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Glib 中，我有用过:</p>
<ul>
<li>
<p>Array&lt;类型&gt;：变长数组</p>
</li>
<li>
<p>List&lt;类型&gt;：双向列表</p>
</li>
</ul>
<p>Gee中，我有用过：</p>
<ul>
<li>
<p>Set&lt;类型&gt;：无重复集合</p>
</li>
<li>
<p>HashMap&lt;类型1,类型2&gt;：哈希字典</p>
</li>
</ul>
<p>具体用法请参阅相关文档和示例，链接给完了，我溜了~</p>
<h2 id="迭代匿名函数">迭代，匿名函数</h2>
<p>首先是匿名函数，很简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="p">(</span><span class="err">函数形参</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span><span class="err">函数体语句</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="err">函数形参</span><span class="p">)</span><span class="o">=&gt;</span><span class="err">一条语句</span><span class="w">
</span></span></span></code></pre></div><p>一般用于函数作形参的时候，临时写一个简单的。比如下面那个情况。</p>
<p>还有迭代，有些预先定义好的数据结构都支持迭代，使用的时候使用 <code>foreach</code> 方法就好。比如说：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="w"> </span><span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="w"> </span><span class="p">(</span><span class="mi">5</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// foreach 方法需要一个函数，这里面的就是匿名函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="k">foreach</span><span class="p">((</span><span class="n">i</span><span class="p">)</span><span class="o">=&gt;</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">to_string</span><span class="w"> </span><span class="p">()));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="异常处理和空值">异常处理和空值</h2>
<p>先写出一个错误空间，说明这是啥大类的错误，里面可以细分。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">errordomain</span><span class="w"> </span><span class="nc">DatabaseError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">COULDNT_OPEN</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">EXECUTION_FAILED</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">PREPARATION_FAILED</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">BIND_FAILED</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">INVALID_GAME</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">NOT_FOUND</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>写函数/方法的时候，可以加入 <code>throws</code> 关键字，注明会抛出啥错误。里面需要抛出错误的时候，使用 <code>throw</code> 语句抛出。下面是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="c1">// 说明这个函数会抛出 DatabaseError 错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">open</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">DatabaseError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sql_return</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">open_v2</span><span class="w"> </span><span class="p">(</span><span class="n">NAME_OF_DB</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="n">m_db</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sql_return</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">OK</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// 这句话，先新建一个错误类，里面写的是具体内容，然后抛出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">DatabaseError</span><span class="p">.</span><span class="n">COULDNT_OPEN</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;Cannot create database: %d, %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sql_return</span><span class="p">,</span><span class="w"> </span><span class="n">m_db</span><span class="p">.</span><span class="n">errmsg</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>要捕捉抛出的错误，请使用 try-catch-finally 语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">createDatabase</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">open</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">exec</span><span class="w"> </span><span class="p">(</span><span class="n">CREATE_FLIGHT_TABLE_QUERY</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">exec</span><span class="w"> </span><span class="p">(</span><span class="n">CREATE_HOTEL_TABLE_QUERY</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">exec</span><span class="w"> </span><span class="p">(</span><span class="n">CREATE_BUS_TABLE_QUERY</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">exec</span><span class="w"> </span><span class="p">(</span><span class="n">CREATE_CUSTOMER_TABLE_QUERY</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">exec</span><span class="w"> </span><span class="p">(</span><span class="n">CREATE_RESERVATION_TABLE_QUERY</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 错误被捕捉到了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">DatabaseError</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stderr</span><span class="p">.</span><span class="n">printf</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 可以加写一个 finally，finally 总会被运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Vala 的变量可以设为空值，方法是加一个问号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 这句话会报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 这句话不会报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>我个人认为，如果你不能确保方法确实能返回一个元素，可以使用这个。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kt">int</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// 我没在摸鱼
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">CatchFishBeFoundError</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>当然，可以不用这么麻烦，这只是一个例子。</p>
<h2 id="sqlite-3-库">SQLite 3 库</h2>
<p><a class="link" href="https://www.sqlite.org/index.html"  target="_blank" rel="noopener"
    >SQLite</a> 是一个库，实现了很完备的关系数据库。它将数据库存在一个文件里，使用的时候，调用 SQLite 库相应的函数，来对这个文件数据库进行基本操作。</p>
<p>这东西是一个 C 语言库。但 Vala 可以使用 C 库，它使用 vapi 文件来对应 C 的头文件。(实际上 Vala 也可以写 C 语言库，毕竟这玩意最后还是会变成 C 语言来编译。)</p>
<p>所以说，Vala 的 SQLite 库用起来应该和 C 语言的差不多。不过请注意，Vala 是面向对象的，而 SQLite 的库在引用到 Vala 的时候，做了面向对象的处理。</p>
<p>使用前，引用这个库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kn">using</span><span class="w"> </span><span class="nn">Sqlite</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="数据库类">数据库类</h3>
<p>如此定义一个数据库对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="n">Sqlite</span><span class="p">.</span><span class="n">Database</span><span class="w"> </span><span class="n">m_db</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>打开数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="n">Sqlite</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">open_v2</span><span class="w"> </span><span class="p">(</span><span class="kt">string</span><span class="w"> </span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Database</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>执行语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="n">m_db</span><span class="p">.</span><span class="n">exec</span><span class="w"> </span><span class="p">(</span><span class="kt">string</span><span class="w"> </span><span class="n">sql_exec</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="数据库声明类">数据库声明类</h3>
<p>定义方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="n">Sqlite</span><span class="p">.</span><span class="n">Statement</span><span class="w"> </span><span class="n">add_flight</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>准备声明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Statement</span><span class="w"> </span><span class="n">prepare</span><span class="w"> </span><span class="p">(</span><span class="kt">string</span><span class="w"> </span><span class="n">sql</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">DatabaseError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Statement</span><span class="w"> </span><span class="n">statement</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 加不加 v2 都行，需要 sql 语句字符串，字符串长度，输出到一个 statement 类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sql_result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">m_db</span><span class="p">.</span><span class="n">prepare_v2</span><span class="w"> </span><span class="p">(</span><span class="n">sql</span><span class="p">,</span><span class="w"> </span><span class="n">sql</span><span class="p">.</span><span class="n">length</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="n">statement</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sql_result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">OK</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">DatabaseError</span><span class="p">.</span><span class="n">PREPARATION_FAILED</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;Cannot prepare satement for %s: %d, %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sql</span><span class="p">,</span><span class="w"> </span><span class="n">sql_result</span><span class="p">,</span><span class="w"> </span><span class="n">m_db</span><span class="p">.</span><span class="n">errmsg</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">statement</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>绑定声明：</p>
<p>绑定依然有一系列的函数，此处只看绑定字符串</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">bind_text</span><span class="w"> </span><span class="p">(</span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Statement</span><span class="w"> </span><span class="n">statement</span><span class="p">,</span><span class="w"> </span><span class="kt">string</span><span class="w"> </span><span class="n">stmt</span><span class="p">,</span><span class="w"> </span><span class="kt">string</span><span class="w"> </span><span class="n">text</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">DatabaseError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 这是寻找 statement 中 stmt 的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">statement</span><span class="p">.</span><span class="n">bind_parameter_index</span><span class="w"> </span><span class="p">(</span><span class="n">stmt</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">DatabaseError</span><span class="p">.</span><span class="n">BIND_FAILED</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;Could not bind %s: %s not found in the statement %s.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="n">stmt</span><span class="p">,</span><span class="w"> </span><span class="n">statement</span><span class="p">.</span><span class="n">sql</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 绑定，index 是索引，text 是要绑定的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sql_result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">statement</span><span class="p">.</span><span class="n">bind_text</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sql_result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">OK</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">statement</span><span class="p">.</span><span class="n">reset</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">DatabaseError</span><span class="p">.</span><span class="n">BIND_FAILED</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;Could not bind %s: %d, %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="n">sql_result</span><span class="p">,</span><span class="w"> </span><span class="n">m_db</span><span class="p">.</span><span class="n">errmsg</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>执行声明并清除绑定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">step</span><span class="w"> </span><span class="p">(</span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Statement</span><span class="w"> </span><span class="n">statement</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">DatabaseError</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 执行声明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sql_return</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">statement</span><span class="p">.</span><span class="n">step</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 清除绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">statement</span><span class="p">.</span><span class="n">reset</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sql_return</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">DONE</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">DatabaseError</span><span class="p">.</span><span class="n">EXECUTION_FAILED</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;Execute failed: %d, %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sql_return</span><span class="p">,</span><span class="w"> </span><span class="n">m_db</span><span class="p">.</span><span class="n">errmsg</span><span class="w"> </span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>循环取出返回值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vala" data-lang="vala"><span class="line"><span class="cl"><span class="c1">// 摘抄自我的大作业代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">avaliable</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">var</span><span class="w"> </span><span class="n">Graph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// 创建一个声明，这个是一个查询语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">Statement</span><span class="w"> </span><span class="n">get_flight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="n">prepare</span><span class="w"> </span><span class="p">(</span><span class="s">&#34;SELECT FromCity,ArivCity FROM FLIGHT;&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// 我前面说过返回值的事情，Sqlite.ROW
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">get_flight</span><span class="p">.</span><span class="n">step</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">Sqlite</span><span class="p">.</span><span class="n">ROW</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">string</span><span class="w"> </span><span class="n">from</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_flight</span><span class="p">.</span><span class="n">column_text</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">string</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_flight</span><span class="p">.</span><span class="n">column_text</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">Graph</span><span class="p">.</span><span class="n">has_key</span><span class="w"> </span><span class="p">(</span><span class="n">from</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">Graph</span><span class="p">[</span><span class="n">from</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Graph</span><span class="p">[</span><span class="n">from</span><span class="p">].</span><span class="n">add</span><span class="w"> </span><span class="p">(</span><span class="n">to</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">Graph</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">DatabaseError</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stdout</span><span class="p">.</span><span class="n">printf</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="如何速通一个编程语言">如何速通一个编程语言</h2>
<p>我当时是这么学的 C 语言：</p>
<ol>
<li>
<p>基本输入输出</p>
</li>
<li>
<p>判断语句</p>
</li>
<li>
<p>循环语句</p>
</li>
<li>
<p>函数</p>
</li>
<li>
<p>数组</p>
</li>
<li>
<p>结构体</p>
</li>
<li>
<p>指针</p>
</li>
</ol>
<p>前三条是说明这个语言大致的语法如何，因为编程思维的逻辑无非就那些：从哪里开始，需要那些材料，需要经过那些步骤，那些步骤得不断进行，这个步骤执行的条件是什么，这个步骤的结束条件是什么，最后的成果是如何的？逻辑搞明白了，接下来就是靠语言实现了。</p>
<p>接下来第四条，我认为是说明这个语言的性质。C 语言是面向过程的语言，所以主要是函数。而要是面向对象的话，教完函数之后，就是教你如何写一个类，如何搞继承之类的了。</p>
<p>剩下那三个，说明这个语言的数据结构。数据结构，有链表，栈，队列，字符串，树，图之类，还有集合，键值对字典这些常用的。这些东西给你了实现的工具，不过大多数语言已经实现了，比如 Java 。</p>
<p>最后，速通了语言，不代表所有。你得找到相对应的库。要是库很缺乏，或者根本没学的话，很有可能你啥都干不了。我暑假两天速通了 Javascript，然后我由于没学任何 Javascript 的库，比如 vue / react 啥的，我都不知道要用这个来干嘛:-P</p>
<p>最后，如有不完备或错误之处，敬请谅解。我还是水平不够啊:-(</p><hr />