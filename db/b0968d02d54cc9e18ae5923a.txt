计算机基础发展史第一代：电子管；机器语言。第二代：晶体管；监控语言、高级语言。第三代：中小规模集成电路、磁芯存储器；高级语言、分时操作系统。第四代：大规模与超大规模集成电路、半导体存储器、微处理...<hr />
<h2 id="toc_233">计算机基础</h2><h3 id="toc_234">发展史</h3><ul><li><strong>第一代：</strong>电子管；机器语言。</li><li><strong>第二代：</strong>晶体管；监控语言、高级语言。</li><li><strong>第三代：</strong>中小规模集成电路、磁芯存储器；高级语言、分时操作系统。</li><li><strong>第四代：</strong>大规模与超大规模集成电路、半导体存储器、微处理器；DOS / Windows，Unix / Linux，Mac OS。</li><li><strong>第五代：</strong>巨大规模集成电路，超大规模、超高速集成电路，多处理器、多核处理器；软件与算法。</li></ul><h3 id="toc_235">基本组成</h3><ul><li>硬件系统</li><li>软件系统</li><li>指令体系结构（ISA）</li></ul><h3 id="toc_236">分类</h3><blockquote><p>Flynn 分类法。</p></blockquote><ul><li>SISD（单指令流单数据流）</li><li>SIMD</li><li>MISD</li><li>MIMD（多指令流多数据流）</li></ul><h2 id="toc_237">加速比</h2><h3 id="toc_238">阿姆达尔定律</h3><p>改进后系统执行时间：$T_n=T_0(1-f_e+\frac{f_e}{r_e})$</p><p>加速比：$S_p=\frac{1}{1-f_e+\frac{f_e}{r_e}}$</p><p>​    多个部件的加速比：$S_p=\frac{1}{1-\sum f_e+\sum \frac{f_e}{r_e}}$</p><table><thead><tr><th align="center">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">$T_0$</td><td align="left">改进前系统执行时间</td></tr><tr><td align="center">$f_e$</td><td align="left">可改进比例（可改进部分在原执行时间中所占的比例）</td></tr><tr><td align="center">$r_e$</td><td align="left">部件加速比（某部件改进后性能提高的比例）</td></tr></tbody></table><h3 id="toc_239">例题</h3><blockquote><p>若计算机系统有 3 个部件 a、b、c 是可改进的，它们的部件加速比分别为 30、30、20，部件 a 和 b 在总执行时间中所占的比例分别是 30％、30％。 若要使整个系统的加速比达到 10，则部件 c 在总执行时间中所占的比例应为 ？%</p></blockquote><p>$S_p=10$</p><p>$\sum f_e=0.3+0.3+x=0.6+x$</p><p>$\sum \frac{f_e}{r_e}=\frac{0.3}{30}+\frac{0.3}{30}+\frac{x}{20}=0.02+\frac{x}{20}$</p><p>带入公式得：$10=\frac{1}{1-(0.6+x)+(0.02+\frac{x}{20})}$</p><p>解得：$x=\frac{95}{32} \approx 0.3368$</p><h2 id="toc_240">进制转换</h2><blockquote><p><strong>例：</strong>97.625 转换为二进制和十六进制。</p></blockquote><p><figure><img class="" alt="二进制" data-src="https://upload.hawa130.com/2022/04/3917163254.jpeg#vwid=600&vhei=375" src="https://upload.hawa130.com/2022/04/3917163254.jpeg#vwid=600&vhei=375"><figcaption>二进制</figcaption></figure></p><p>转换结果：<code>1100001.101</code></p><p><figure><img class="" alt="十六进制" data-src="https://upload.hawa130.com/2022/04/1071339794.jpeg#vwid=258&vhei=100" src="https://upload.hawa130.com/2022/04/1071339794.jpeg#vwid=258&vhei=100"><figcaption>十六进制</figcaption></figure></p><p>转换结果：<code>61.A</code></p><h2 id="toc_241">定点数</h2><blockquote><p>下述的 $n$ 均表示编码的位数（含符号位）。</p></blockquote><h3 id="toc_242">原码</h3><ul><li><strong>符号位：</strong>0 为正，1 为负。</li><li><strong>数值位：</strong>$|X|$</li><li><p><strong>可表示范围</strong></p><ul><li><strong>纯整数：</strong>$-(2^{n-1}-1)\sim +(2^{n-1}-1)$</li><li><strong>纯小数：</strong>$-(1-2^{-(n-1)})\sim +(1-2^{-(n-1)})$</li></ul></li></ul><h3 id="toc_243">补码</h3><ul><li><strong>符号位：</strong>0 为正，1 为负。</li><li><p><strong>数值位</strong></p><ul><li>$X\ge 0$：$X$</li><li>$X\lt 0$：$2^n+X$</li></ul></li><li><p><strong>可表示范围</strong></p><ul><li><strong>纯整数：</strong>$-2^{n-1}\sim +(2^{n-1}-1)$</li><li><strong>纯小数：</strong>$-1\sim +(1-2^{-(n-1)})$</li></ul></li><li><strong>负数补码求法：</strong>先将 $|X|$ 用原码表示。从右往左找到第一个 1，将这一位左边的位全部取反，这一位及其右边的位保持不变。</li><li><strong>补码减法：</strong>$\begin{align} [X-Y]_\text{补}&amp;=[X]_\text{补}+[-Y]_\text{补} \\ &amp;=[X]_\text{补}+[[Y]_\text{补}]_\text{求补} \end{align}$</li></ul><h3 id="toc_244">反码</h3><ul><li><strong>符号位：</strong>0 为正，1 为负。</li><li><p><strong>数值位</strong></p><ul><li>$X\ge 0$：$X$</li><li>$X\lt 0$：$|X|$ 按位取反</li></ul></li><li><strong>可表示范围：</strong>与原码相同。</li><li><strong>负数补码与反码的关系：</strong>$[X]_\text{补}=[X]_\text{反}$的最低位加 1。</li></ul><h3 id="toc_245">移码</h3><ul><li><strong>符号位：</strong>1 为正，0 为负。</li><li><strong>数值：</strong>$[X]_\text{移}=2^{n-1}+X$</li><li><strong>与补码的关系：</strong>补码的<strong>符号位取反</strong>就是移码。</li><li><strong>可表示范围：</strong>与补码相同。</li></ul><h3 id="toc_246">编码与真值的关系</h3><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/3318202124.jpeg#vwid=1598&vhei=500" src="https://upload.hawa130.com/2022/04/3318202124.jpeg#vwid=1598&vhei=500"></figure></p><p>由此可见，移码可以直接比较大小。</p><h2 id="toc_247">浮点数</h2><blockquote><p>二进制的科学计数法。</p></blockquote><h3 id="toc_248">规格化浮点数</h3><h5 id="toc_249">尾数 $M$ 形式</h5><ul><li>$M\ge 0$：$[M]_\text{补}=0.1\times\times\cdots\times$</li><li>$M\lt 0$：$[M]_\text{补}=1.0\times\times\cdots\times$</li></ul><h5 id="toc_250">规格化</h5><ul><li><strong>左归：</strong>每算数左移 1 位，阶码减 1。</li><li><strong>右规：</strong>每算数右移 1 位，阶码加 1。</li></ul><h3 id="toc_251">IEEE 754 标准</h3><p><strong>IEEE 754 规格化尾数：1.f</strong>，即 $1.\times\times\cdots\times$（包含符号位）</p><p>$\text{尾数}\times 2^\text{阶数}$</p><p><figure><img class="" alt="IEEE 754 单精度浮点数" data-src="https://upload.hawa130.com/2022/04/456034720.jpeg#vwid=684&vhei=200" src="https://upload.hawa130.com/2022/04/456034720.jpeg#vwid=684&vhei=200"><figcaption>IEEE 754 单精度浮点数</figcaption></figure></p><p>阶码应为阶数的补码符号位取反<strong>再减去 1</strong>（比标准移码少 1）。</p><p><strong>图片勘误：f 为原码。</strong></p><h2 id="toc_252">BCD 码</h2><p>把十进制数拆成一位位数字来表示，每位使用四位二进制数来表示。</p><p>以常用的 8421 码为例，如 49，可拆成 4 和 9，即 <code>0100</code> 和 <code>1001</code>，故 49 的 8421 BCD 码为 <code>01001001</code>。</p><p>BCD 码也可以参与运算。</p><h2 id="toc_253">检错与纠错码</h2><h3 id="toc_254">海明码距</h3><ul><li><strong>定义：</strong>将两个码字按位异或后 1 的个数。</li><li><strong>检错 $r$ 位：</strong>$d_\text{min}$ 至少为 $r+1$。</li><li><strong>纠错 $r$ 位：</strong>$d_\text{min}$ 至少为 $2r+1$。</li></ul><h5 id="toc_255">确保具有一位纠错能力</h5><p>$2^k\ge n+k+1$，其中：$n$ 为数据长度，$k$ 为校验位位数。</p><h3 id="toc_256">奇偶校验</h3><ul><li><strong>奇校验：</strong>数据中 1 的个数为<strong>奇数</strong>时，校验位为 0。</li><li><strong>偶校验：</strong>数据中 1 的个数为<strong>偶数</strong>时，校验位为 0。</li></ul><h3 id="toc_257">海明校验码</h3><h4 id="toc_258">编码</h4><blockquote><p><strong>例：</strong>编码 <code>10101110</code>。</p></blockquote><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/1884301977.jpeg#vwid=598&vhei=500" src="https://upload.hawa130.com/2022/04/1884301977.jpeg#vwid=598&vhei=500"></figure></p><h4 id="toc_259">校验与纠错</h4><blockquote><p><strong>例：</strong>给定如下码字：<code>010111010110</code>，判断出错位置，以及纠错后的原始数据。</p></blockquote><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/2416132771.jpeg#vwid=620&vhei=267" src="https://upload.hawa130.com/2022/04/2416132771.jpeg#vwid=620&vhei=267"></figure></p><p>若无出错，则校验码均通过，此时 $H_0H_1H_2H_3=0$。</p><p>如果只有校验位出错，则只有一个校验码不通过，此时原数据无需修正。</p><h3 id="toc_260">循环冗余校验码（CRC）</h3><h4 id="toc_261">编码</h4><blockquote><p>信息：<code>1010110</code></p><p>生成多项式：$G(x)=x^3+x+1$</p></blockquote><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/353297873.jpeg#vwid=568&vhei=400" src="https://upload.hawa130.com/2022/04/353297873.jpeg#vwid=568&vhei=400"></figure></p><h4 id="toc_262">校验与纠错</h4><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/3309748346.jpeg#vwid=526&vhei=400" src="https://upload.hawa130.com/2022/04/3309748346.jpeg#vwid=526&vhei=400"></figure></p><p>若有出错，根据余数值查询出错定位表即可得到出错的位。</p><h2 id="toc_263">定点数的运算</h2><h3 id="toc_264">加减运算</h3><blockquote><p>补码运算。</p></blockquote><h4 id="toc_265">溢出及其判断</h4><p>由于补码表示范围有限，如果计算结果不在范围内，则发生了<strong>溢出</strong>。</p><h5 id="toc_266">双符号位（变形码）判决</h5><p>00 表示正，11 表示负。如果运算结果中，两个符号位不一致，则说明发生了溢出。</p><h3 id="toc_267">乘法运算</h3><blockquote><p>Booth 法。</p></blockquote><p>$$X\times Y$$</p><table><thead><tr><th align="center">$Y_0$</th><th align="center">$Y_{-1}$</th><th>操作</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td>+0，右移一位</td></tr><tr><td align="center">1</td><td align="center">1</td><td>+0，右移一位</td></tr><tr><td align="center">0</td><td align="center">1</td><td>$+[X]_\text{补}$，右移一位</td></tr><tr><td align="center">1</td><td align="center">0</td><td>$+[-X]_\text{补}$，右移一位</td></tr></tbody></table><blockquote><p><strong>例：</strong>$X=-0.1101$，$Y=+0.0110$，求乘积。</p></blockquote><p>$[X]_\text{补}=11.0011$，$[-X]_\text{补}=00.1101$（双符号补码）；$[Y]_\text{补}=0.0110$（单符号补码）。</p><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/3672433379.jpg#vwid=593&vhei=673" src="https://upload.hawa130.com/2022/04/3672433379.jpg#vwid=593&vhei=673"></figure></p><p>得 $[X\cdot Y]_\text{补}=1.10110010$。</p><h3 id="toc_268">除法运算</h3><blockquote><p>原码加减交替法。</p></blockquote><p>$$|X|\div|Y|$$</p><ul><li>余数 $R\ge 0$，商为 1，余数左移，减 $|Y|$（加 $[-|Y|]_\text{补}$）。</li><li>余数 $R&lt;0$，商为 0，余数右移，加 $|Y|$。</li></ul><p>表格数值位扩展到 $|Y|$ 数值位的 2 倍。</p><blockquote><p><strong>例：</strong>$X=+0.1001110001$，$Y=-0.10101$。求 $X\div Y$。</p></blockquote><p>$|X|=0.1001110001$，$|Y|=0.10101$，$[-|Y|]_\text{补}=1.01011$。</p><p><figure><img class="" alt="" data-src="https://upload.hawa130.com/2022/04/3151439783.jpg#vwid=556&vhei=820" src="https://upload.hawa130.com/2022/04/3151439783.jpg#vwid=556&vhei=820"></figure></p><p>得 $[X\div Y]_\text{原}=1.11101$，$\text{余数}=0.10000\times 2^{-5}$。</p><h4 id="toc_269">需要恢复余数的情况</h4><p>R 符号为负（<code>11</code>），则余数需要加 $|Y|$，该操作称为<strong>恢复余数</strong>。</p><blockquote><p><strong>例：</strong>$X=-0.1010100000$，$Y=+0.11011$，求 $X\div Y$。</p></blockquote><p>过程如下（已省略加减交替过程）。</p><p><figure><img class="" alt="恢复余数的情况" data-src="https://upload.hawa130.com/2022/04/1413533926.jpeg#vwid=611&vhei=356" src="https://upload.hawa130.com/2022/04/1413533926.jpeg#vwid=611&vhei=356"><figcaption>恢复余数的情况</figcaption></figure></p><p>得 $\text{余数}=1.11000\times 2^{-5}$（符号位与被除数一致）。</p><h2 id="toc_270">浮点数的运算</h2><h3 id="toc_271">加减运算</h3><ol><li>对阶：尾数右移阶码加。</li><li>尾数求和/差。</li><li>运算结果规格化、舍入。</li></ol><blockquote><p><strong>例：</strong>$X=\frac{11}{16}\times 2^{-4}$，$Y=\frac{35}{64}\times 2^{-3}$，计算 $X\pm Y$。</p></blockquote><p>$X=0.101100\times 2^{-4}$，$Y=0.100011\times 2^{-3}$</p><p>$[X]_\text{浮}=01100;0.101100$，$[Y]_\text{浮}=01101;0.100011$</p><p><strong>对阶：</strong>$[X]'_\text{浮}=01101;0.010110$，$[Y]_\text{浮}=01101;0.100011$</p><p><strong>尾数求和/差</strong></p><ul><li>求和<br>  $\begin{array}{ccc} &amp;00.010110 \\ +&amp;00.100011 \\ \hline &amp;00.111001 \end{array}$</li><li>求差<br>  $\begin{array}{ccc} &amp;00.010110 \\ -&amp;11.011101 \\ \hline &amp;11.110011 \end{array}$</li></ul><p><strong>规格化：</strong></p><ul><li>$0.111001$ 已经是规格化尾数。$[X+Y]_\text{浮}=01101;0.111001$。</li><li>$1.110011$ 需要左归，左移 2 位，阶码减 2。$[X-Y]_\text{浮}=01011;1.001100$。</li></ul><p>无需进行舍入处理。</p><h3 id="toc_272">乘除运算</h3><ol><li>阶码加/减。</li><li>尾数乘/除。</li><li>运算结果规格化、舍入。</li></ol>
