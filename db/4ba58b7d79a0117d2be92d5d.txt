<blockquote><blockquote>
<p>既然web组的人多。。那先写web？</p>
</blockquote>
<h2 id="WEB">WEB</h2>
<h4 id="Where-is-the-Flag">Where is the Flag?</h4>
<p>看源代码，flag在注</blockquote><blockquote><p>既然web组的人多。。那先写web？</p></blockquote><h2 id="WEB">WEB</h2><h4 id="Where-is-the-Flag">Where is the Flag?</h4><p>看源代码，flag在注释里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>远在天边，近在眼前<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--moectf&#123;f12_is_th3_bAsic_way_t0_get_F1ag&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="GET-POST">GET/POST</h4><p>用请求工具进行get/post请求，带个flag参数</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/moectf/get/index.php?flag=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>120.77.152.169:8088</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>moectf{GEt_13_the_ba5ic_method}<br>moectf{Post_1s_the_sEcond_Method}</p><h4 id="PHP是世界上坠吼的语言">PHP是世界上坠吼的语言</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$md5a</span> = md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$md5s</span> = md5(<span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$s</span> != <span class="variable">$a</span> &amp;&amp; <span class="variable">$md5a</span> == <span class="variable">$md5s</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php弱类型比较，常用md5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5(‘<span class="number">240610708</span>’) == md5(‘QNKCDZO’)</span><br><span class="line">md5(‘aabg7XSs’) == md5(‘aabC9RqS’)</span><br></pre></td></tr></table></figure><p>等等</p><p>php类型比较说明文档<br>PHP文件包含</p><p>?file=file.php</p><p>要读源码，加参数</p><p><code>php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>得到<br>PD9waHAKLy9tb2VjdGZ7TElGXzFTX3YzcnlfRWFTeX0K</p><p>base64解码后得到flag(好叭这个flag.php是猜的)<br>Parse_URL</p><p>……这是原题。<br>最好的语言里的parse_url()函数有个feature，当它接收到一个无法parse的url参数时会返回FALSE</p><blockquote><p>On seriously malformed URLs, parse_url() may return FALSE.</p></blockquote><p>php parse_url函数文档</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$url</span> = urldecode(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="variable">$url</span> = parse_url(<span class="variable">$url</span>, PHP_URL_QUERY);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/\w+/i&quot;</span>, <span class="variable">$url</span>))<span class="comment">#匹配[A-Z][a-z][0-9]和下划线</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>false当然不是character啦啦啦啦<br>所以把url里头的斜杠多写几个就可以啦<br>然后再配上一个小小的参数就爆flag了</p><p><code>?_=0</code></p><p>flag是啥？不重要了</p><h4 id="PHP弱类型的复仇">PHP弱类型的复仇</h4><p>先干啥好呢？F12啊</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pattern</span>=<span class="string">&#x27;/^(?=[1-9])(?=.[A-Z]).&#123;10,12&#125;$/&#x27;</span>;</span><br><span class="line"><span class="comment">#匹配以一个数字开头，紧跟一个大写字母的长度为10-12的串</span></span><br><span class="line"><span class="variable">$gugugu</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;gugugu&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$gugugu</span>)===<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则看懂了嘛&quot;</span>;<span class="comment">#看懂啦</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$secret</span>=<span class="string">&quot;******&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$gugugu</span>==<span class="variable">$secret</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;tqdl，给师傅递flag&lt;br&gt;&quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。<br>这道题。。。。ORZ dalao。。。关键在于“以一个数字开头，紧跟一个大写字母的长度为10-12的串”如何表示一个数字，构造一个弱类型比较。<br>0x?小写。pass<br>然后我就智障了<br>1*100000000的计算结果?<br>哦</p><p><code>?gugugu=6E00000000</code></p><h4 id="不会的题">不会的题</h4><p>不会的题写什么wp</p><h4 id="白名单过滤xss">白名单过滤xss</h4><p>哦</p><blockquote><p>runtime error? reverse engineering?</p></blockquote><h2 id="RE">RE</h2><p>入场前请检查您是否带着您的毛(i)巾(da)</p><h4 id="re1">re1</h4><p>拖到ida里</p><p>找不到flag？View-&gt;Open Subviews-&gt;Strings</p><h4 id="re2">re2</h4><p>拖到ida里</p><p>Strings里找不到flag？实现一下F5出来的逻辑，反过来写一遍(实现一下反函数)</p><p><code>moectf&#123;Qidao_by_fa1con&#125;</code></p><h4 id="py逆向">py逆向</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wibiti/uncompyle2.git</span><br><span class="line"><span class="built_in">cd</span> uncompyle2</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">uncompyle py.pyc</span><br></pre></td></tr></table></figure><p>然后同re2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string orig=<span class="string">&quot;bX;oY4Tpe4D8Q2;VRW:&#123;U2;IQIP8fR?@&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;orig.<span class="built_in">size</span>();i++)</span><br><span class="line">        orig[i]-=i%<span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;orig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>base64一下<br><code>moectf&#123;pyC_RE_1S_E@sy&#125;</code></p><h4 id="玩过2048么？">玩过2048么？</h4><p>那当然是玩过啦</p><p>但是玩不到4096怎么办啊…<br>那当然是修改器啦</p><p>用八门神器(误)IDA找到4096(1000h)改成16(10h)</p><h2 id="CRYPTO">CRYPTO</h2><h4 id="Open-the-door-of-Crypto">Open the door of Crypto</h4><p>熟练使用openssl<br>熟练使用factordb<br>熟练使用notepad</p><h4 id="ECB-Attack">ECB_Attack</h4><ul><li>AES背景知识</li></ul><p>AES是一种”对称加密”方式，与以RSA为代表的”非对称加密”相对，用同一个密钥进行加密和解密。AES分多种加密模式，其中ECB模式是最简单最易实现的一种。带来便利性的同时，ECB也有一些小缺陷，在某些时候，如果使用不当，AES-ECB有可能带来巨大的灾难。</p><ul><li>ECB加密过程</li></ul><p>进行ECB加密时，首先要将字符串分割成相等的几部分(称为block)。为方便表示，此处以3个字符为一个block进行演示，不展示密钥对明文加密的过程。</p><p>做出以下假设：</p><table><thead><tr><th>明文</th><th>密文</th></tr></thead><tbody><tr><td>aaa</td><td>ciph1</td></tr><tr><td>aab</td><td>ciph2</td></tr><tr><td>aba</td><td>ciph3</td></tr><tr><td>bba</td><td>ciph4</td></tr></tbody></table><p>这时当我们对字串</p><p><code>aaaaaa</code></p><p>进行加密时，便可以得到密文</p><p><code>ciph1ciph1</code></p><p>ECB的缺陷何在?</p><blockquote><p>ECB的每个block前后文不相关，即每个block单独加密，不与其他block相呼应</p></blockquote><p>实行一次攻击的条件：</p><ul><li>攻击方能够控制字串一定部分的长度</li><li>攻击方了解需要获取的信息目标之前的一段信息</li><li>攻击方已知字串以某一未知密钥加密后的密文</li><li>攻击方能够多次数获取某一字符串以相同密钥加密后的密文</li></ul><p>假设我们能控制从某一字符串开始处的内容长度，并且了解到字符串的结构为</p><p><code>[controllable]aaa[target],block=3</code></p><p>当我们控制<code>[controllable]</code>部分为<code>bb</code>时，字符串为</p><p><code>bbaaa[target]</code></p><p>切分block后为</p><p><code>bba aa[target_0] [target_1-end]</code></p><p>现在我们已知整个字符串的密文为</p><p><code>ciph4ciph2ciph5</code></p><p>则通过尝试对第二个block进行填充并加密可以试出target_0的值为b<br>现缩短[controllable]部分长度，更改为&quot;b&quot;,则字串变为</p><p><code>baaa[target]</code></p><p><code>baa a[target_0][target_1] [target_2-end]</code></p><p>此时已知第二个block的内容为”ab[target_1]”，再次尝试可以获得target第二位的值<br>现更改[controllable]部分为”bbbb”,字串切分后为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bbb baa a[target_0][target_1] [target_2-end]</span><br></pre></td></tr></table></figure><p>其效果与<code>[controllable]=&quot;b&quot;</code>相当,但给我们留下了更多的缩短余地。</p><ul><li>回到原题</li></ul><p>通过多次尝试，不难发现字符串每16个字符划分一个block，作者又给了我们源代码以供参考，连接到服务器后发送来的消息中包含了flag。我们需要控制name长度来”缩”出来flag</p><p><code>hello, [name], your mission's flag is: [flag]</code></p><p>于是我们可以写个python来跑，然而我太弱了不会python，CinCPP将就着看吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib &quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> ECB_Atack &#123;</span><br><span class="line">SOCKET server;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(string &amp;i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span> buffer);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">recv</span>(server, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;read error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">i = buffer;</span><br><span class="line"><span class="keyword">if</span> (i.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(string m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m[m.<span class="built_in">size</span>() - <span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span>)m += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;[message send]&quot;</span> &lt;&lt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(server, m.<span class="built_in">c_str</span>(), m.<span class="built_in">size</span>(), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;put error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">150</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">expect_reply</span><span class="params">(string message)</span> </span>&#123;</span><br><span class="line"><span class="built_in">put</span>(message);</span><br><span class="line"><span class="built_in">read</span>(message);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> visible_char[] = </span><br><span class="line"><span class="string">&quot; 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;\\\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&quot;</span>;</span><br><span class="line"></span><br><span class="line">string banner_encrypted;</span><br><span class="line">string flag_uncovered;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ECB_Atack_main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSAData wd;</span><br><span class="line">(<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wd));</span><br><span class="line"></span><br><span class="line">string message;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//30=14+16</span></span><br><span class="line">ECB_Atack::server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">SOCKADDR_IN addrServ;</span><br><span class="line">addrServ.sin_family = AF_INET;</span><br><span class="line">addrServ.sin_port = <span class="built_in">htons</span>(<span class="number">9997</span>);</span><br><span class="line">addrServ.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;123.56.218.81&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> ret = <span class="built_in">connect</span>(ECB_Atack::server, (SOCKADDR*)&amp;addrServ, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket connect failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="built_in">closesocket</span>(ECB_Atack::server);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)name += <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">ECB_Atack::<span class="built_in">put</span>(name);</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">string encrypted_banner = message.<span class="built_in">substr</span>(<span class="number">0</span>, message.<span class="built_in">find</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"></span><br><span class="line">string constructed_banner = <span class="string">&quot;hello, &quot;</span> + name + <span class="string">&quot;, your mission&#x27;s flag is: &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> known_bits = constructed_banner.<span class="built_in">size</span>() % <span class="number">16</span>;<span class="comment">//block size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//check valid;</span></span><br><span class="line">ECB_Atack::<span class="built_in">put</span>(constructed_banner.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">message = message.<span class="built_in">substr</span>(<span class="number">0</span>, message.<span class="built_in">find</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (encrypted_banner.<span class="built_in">find</span>(message) == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">assert</span>(<span class="string">&quot;what the...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jump to last block</span></span><br><span class="line">string last_block = </span><br><span class="line">constructed_banner.<span class="built_in">substr</span>(<span class="number">16</span> * <span class="built_in"><span class="keyword">int</span></span>(constructed_banner.<span class="built_in">size</span>() / <span class="number">16</span>));</span><br><span class="line">string payload = last_block + ECB_Atack::flag_uncovered;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">96</span>; i++) &#123;</span><br><span class="line">ECB_Atack::<span class="built_in">put</span>(payload + ECB_Atack::visible_char[i]);</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">message = message.<span class="built_in">substr</span>(<span class="number">0</span>, message.<span class="built_in">find</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (encrypted_banner.<span class="built_in">find</span>(message)!=<span class="number">-1</span>) &#123;</span><br><span class="line">ECB_Atack::flag_uncovered += ECB_Atack::visible_char[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(ECB_Atack::server);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ECB_Atack::flag_uncovered;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MISC">MISC</h2><h4 id="BASE64">BASE64</h4><p>如题目要求，将文本进行base64解码即可得到flag</p><blockquote><p>题外话：熟悉base64,32,16编码的过程对RE帮助极大</p></blockquote><h4 id="凯撒密码">凯撒密码</h4><blockquote><p>密码学(?)的鼻祖(?)凯撒将凯撒密码用于战争中的密令传递，开辟了(???)新的战争空间(胡诌)</p></blockquote><p>将每一位拉丁字母按a-z的顺序向后推即可<br>遇到题目中没有给出密钥的情况。。。可以把26种可能全打出来找合理的</p><p>####栅栏密码</p><p>错位重组<br>遇到栅栏密码加密过的字符串s时可以优先尝试密钥divisor(|s|),其中divisor(x)表示的因数</p><h4 id="zip伪加密">zip伪加密</h4><p>先修复加密位，将单数改成双数(00)<br>修复了加密位的我一脸懵逼，直到我向shell里输入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk zip</span><br></pre></td></tr></table></figure><p>欸。。。怎么没有zip头。。。<br>修复zip头，拿flag</p><h4 id="backdoor">backdoor</h4><p>流量分析<br>看到50 4B的那一刻就跳起来了</p><h4 id="弄脏的二维码">弄脏的二维码</h4><p>修复定位符，剩下的交给QR code的容错</p><h4 id="蒙娜丽圆的微笑">蒙娜丽圆的微笑</h4><p>emmmmm<br>小圆圆！小圆圆！<br>拿ps或者其他什么逐帧浏览</p><h4 id="miku’s-secret">miku’s secret</h4><p>收集隐写工具大比拼<br>这个工具<br>lsb隐写，密钥在二维码里</p><h2 id="PPC">PPC</h2><p>emmmmm 这PPC跟我想象的不太一样啊</p><h4 id="BAT">BAT</h4><p>无脑编程题，没本事拿bat解。</p><h4 id="Cirno">Cirno</h4><p>本来特别兴奋，多年闲置着的计算表达式的值的函数终于派上用场了，结果人家py自带计算表达式的值。<br>不管不管嘤嘤嘤我就拿 C in CPP</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib &quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">stack&lt;<span class="keyword">char</span>&gt;operators;</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; operands;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> operation = operators.<span class="built_in">top</span>();</span><br><span class="line">operators.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> a = operands.<span class="built_in">top</span>(); operands.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> b = operands.<span class="built_in">top</span>(); operands.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (operation) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">operands.<span class="built_in">push</span>(a + b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">operands.<span class="built_in">push</span>(b - a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">operands.<span class="built_in">push</span>(a*b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (b%a)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不能整除的话与咸鱼何异</span></span><br><span class="line">operands.<span class="built_in">push</span>(b / a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(string expr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!operators.<span class="built_in">empty</span>())operators.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span> (!operands.<span class="built_in">empty</span>())operands.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expr.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">&#x27; &#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">&#x27;+&#x27;</span> || expr[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">((temp = operators.<span class="built_in">top</span>()) == <span class="string">&#x27;+&#x27;</span> || temp == <span class="string">&#x27;-&#x27;</span> || temp == <span class="string">&#x27;*&#x27;</span> || temp == <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">process</span>() == <span class="literal">false</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">operators.<span class="built_in">push</span>(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (expr[i] == <span class="string">&#x27;*&#x27;</span> || expr[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">((temp = operators.<span class="built_in">top</span>()) == <span class="string">&#x27;*&#x27;</span> || (temp = operators.<span class="built_in">top</span>()) == <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">process</span>() == <span class="literal">false</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">operators.<span class="built_in">push</span>(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;expr.<span class="built_in">length</span>() &amp;&amp; expr[i] &gt;= <span class="string">&#x27;0&#x27;</span>&amp;&amp;expr[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">num *= <span class="number">10</span>;</span><br><span class="line">num += expr[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">operands.<span class="built_in">push</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (operands.<span class="built_in">size</span>() &gt; <span class="number">1</span>)<span class="keyword">if</span> (<span class="built_in">process</span>() == <span class="literal">false</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> operands.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_symbol</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET server;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(string &amp;i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span> buffer);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">recv</span>(server, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;read error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">i = buffer;</span><br><span class="line"><span class="keyword">if</span> (i.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(string &amp;m)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sent:&quot;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(server, m.<span class="built_in">c_str</span>(), m.<span class="built_in">size</span>(), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;put error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSAData wd;</span><br><span class="line"><span class="comment">/*assert*/</span>(<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wd));</span><br><span class="line">server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">SOCKADDR_IN addrServ;</span><br><span class="line">addrServ.sin_family = AF_INET;</span><br><span class="line">addrServ.sin_port = <span class="built_in">htons</span>(<span class="number">9998</span>);</span><br><span class="line">addrServ.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;123.56.218.81&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> ret = <span class="built_in">connect</span>(server, (SOCKADDR*)&amp;addrServ, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR));<span class="comment">//开始连接</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket connect failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string in;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">read</span>(in)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in.<span class="built_in">find</span>(<span class="string">&quot;moectf&quot;</span>)!=<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;flag found:&quot;</span> &lt;&lt; in &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; in;</span><br><span class="line"><span class="keyword">int</span> fl = in.<span class="built_in">size</span>(); <span class="keyword">while</span> (in[fl] != <span class="string">&#x27;:&#x27;</span>)fl--;</span><br><span class="line">in = in.<span class="built_in">substr</span>(fl, in.<span class="built_in">size</span>() - fl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(in.<span class="built_in">c_str</span>(), <span class="string">&quot;:%d, %d, %d, %d&quot;</span>, &amp;arr[<span class="number">0</span>], &amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">2</span>], &amp;arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">prev_permutation</span>(arr, arr + <span class="number">4</span>));</span><br><span class="line"><span class="built_in">next_permutation</span>(arr, arr + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">next_permutation</span>(arr, arr + <span class="number">4</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">string exp = <span class="built_in">to_string</span>(arr[<span class="number">0</span>]) + <span class="built_in">to_symbol</span>(i) +</span><br><span class="line"><span class="built_in">to_string</span>(arr[<span class="number">1</span>]) + <span class="built_in">to_symbol</span>(j) +</span><br><span class="line"><span class="built_in">to_string</span>(arr[<span class="number">2</span>]) + <span class="built_in">to_symbol</span>(k) +</span><br><span class="line"><span class="built_in">to_string</span>(arr[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; exp;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cal</span>(exp) == <span class="number">9</span>) &#123;</span><br><span class="line"><span class="built_in">put</span>(exp);</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"5955d155fe2ea768241e","clientSecret":"f96bbda9ff434950217f24f7f9369f8b8de3b025","repo":"frankli0324.github.io","owner":"frankli0324","admin":["frankli0324"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>