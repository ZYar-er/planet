计组前半部分可看计组期中复习笔记。存储系统常用半导体存储器RAMSRAM （速度最快）DRAM → SDRAM → DDR SDRAM（DDR2、DDR3、DDR4、DDR5）ROM（虽然叫 R...<hr />
<p>计组前半部分可看<a href="https://hawa130.com/archives/796/">计组期中复习笔记</a>。</p><h2 id="toc_12">存储系统</h2><h3 id="toc_13">常用半导体存储器</h3><ul><li><p>RAM</p><ul><li>SRAM （速度最快）</li><li>DRAM → SDRAM → DDR SDRAM（DDR2、DDR3、DDR4、DDR5）</li></ul></li><li><p>ROM（虽然叫 Read-Only Memory，但是有的可以写）</p><ul><li>EPROM</li><li>E²PROM → Flash（NOR、NAND）</li></ul></li></ul><h3 id="toc_14">相联存储器</h3><p>其中任一存储项内容作为地址来存取的存储器。</p><p>用途：快速查找、地址变换</p><p>如：Cache 的地址映射表，页表中的快表（TB）、变换旁路缓冲器（TLB）</p><h3 id="toc_15">主存储器</h3><h4 id="toc_16">存储芯片的连接方式 ⭐️</h4><ul><li><p><strong>字扩展</strong>（字数的扩展，即地址的扩展）</p><ul><li>扩展的芯片不能同时选中</li></ul></li><li><p><strong>位扩展</strong>（位数的扩展）</p><ul><li>扩展的芯片可以同时选中</li></ul></li><li><strong>位数和字数同时扩展</strong></li></ul><h4 id="toc_17">用存储器芯片构成主存模块</h4><ul><li>SRAM（主存与 CPU 速度协调）</li><li>EPROM</li><li>E²PROM</li><li>SDRAM — 内存条</li></ul><h4 id="toc_18">多体交叉存储器</h4><ol><li>多体并行访问</li><li>多体交叉访问（和流水线类似）</li></ol><h3 id="toc_19">高速缓冲存储器</h3><h4 id="toc_20">主存与 Cache 的地址映射 ⭐️</h4><p>以块为单位。</p><ol><li><p><strong>全相联</strong>：主存的任意一块可以映像到 Cache 的任意一块。</p><ul><li>Cache 地址：| Cache 块号 | 块内地址 |</li><li>主存地址：| 主存块号 Tag | 块内地址 |</li><li>变换：Cache 块号 $\xrightarrow{目录表}$ 主存块号</li></ul></li><li><p><strong>直接映射</strong>：主存的每一块只能映像到 Cache 的一个特定块。</p><ul><li>Cache 地址：| 块号 | 块内地址 |</li><li>主存地址：| 区号 Tag | 区内块号 Index | 块内地址 |</li><li>无需变换：&lt;u&gt;所访问的主存区号&lt;/u&gt;与&lt;u&gt;目录表中记录的主存区号&lt;/u&gt;相比较</li></ul></li><li><p><strong>组相联</strong>：组间直接映射，组内全相联。</p><ul><li>Cache 组数 = 区内块数</li><li>Cache 地址：| 组号 | 组内块号 | 块内地址 |</li><li><p>主存地址（两种划分方法，看题目要求选择，一般用第二种）</p><ul><li><del>| 区号 | 区内组号 | 组内块号 | 块内地址 |</del></li><li>| 区号 Tag | 区内块号 Index | 块内地址 |</li><li>相联存储器容量 = 8 × (Tag 位数 + <strong>1 位有效位</strong>)</li></ul></li></ul></li></ol><h4 id="toc_21">替换算法</h4><p>直接映射无需替换算法（因为一次就替换全部）</p><ul><li><strong>随机替换算法</strong>（RAND）</li><li><strong>先进先出替换算法</strong>（FIFO）</li><li>最不经常使用（最少使用）替换算法（LFU）：计数器位数多，实现困难</li><li><strong>近期最少使用（最久未用）替换算法</strong>（LRU）</li><li>最佳替换算法（OPT）</li></ul><h4 id="toc_22">更新策略</h4><ul><li>写回法</li><li>写直达法（全写法）</li></ul><h4 id="toc_23">Cache 性能测量</h4><ul><li><p><strong>命中率</strong> $h=\frac{N_C}{N}\times 100\%$</p><ul><li>$N$：CPU 访问主存次数</li><li>$N_C$：CPU 访问命中 Cache 的次数</li><li>缺失率 $m=1-h$</li></ul></li><li><p><strong>平均访问时间</strong> $T_A=T_C+(1-h)\times T_M$</p><ul><li>$T_C$：Cache 访问时间</li><li>$T_B$：数据块装入 Cache 的时间</li><li>$T_M$：主存访问时间，等于 $T_B+T_C$，而由于 $T_M\gg T_c$，$T_B\approx T_M$。</li><li>推导：$\begin{align}T_A&amp;=h\times T_C+(1-h)\times T_M \\ &amp;=T_C+(1-h)\times T_B \\ &amp;=T_C+(1-h)\times T_M\end{align}$</li></ul></li><li><p><strong>加速比</strong> $S_P=\frac{T_M}{T_A}=\frac{T_M}{T_C+(1-h)\times T_M}=\frac{1}{1-h+\frac{1}{r}}$</p><ul><li>$r=\frac{T_M}{T_C}$</li><li>可见随着命中率 $h$ 的增大，加速比 $S$ 提高。</li></ul></li><li><p><strong>成本</strong> $C=(C_1\times S_1+C_2\times S_2)/(S_1+S_2)$</p><ul><li>$C_i$：价格，1 为主存，2 为 Cache</li><li>$S_i$：容量，1 为主存，2 为 Cache</li><li>$S_1\gg S_2$</li></ul></li></ul><h4 id="toc_24">Cache 性能提升</h4><ol><li>多级 Cache 结构</li><li><p>降低 Cache 的缺失率</p><ol><li><p>缺失类型</p><ul><li>强制缺失：第一次访问</li><li>容量缺失：容量有限，不包含所需的所有主存块（增大 Cache 容量可减少）</li><li>冲突缺失：主要发生在直接映射</li></ul></li><li>合理设计 Cache 块尺寸</li><li>合理增加 Cache 容量</li><li>合理设置相联度</li><li>硬件预取（可解决强制缺失）</li><li>编译优化</li></ol></li><li>减少 Cache 开销</li></ol><h3 id="toc_25">虚拟存储器</h3><blockquote><p>其实和 Cache 那块内容很相似。</p></blockquote><ul><li>地址映射：全相连</li><li>地址变换：MMU</li><li><p>页式虚拟存储器 ⭐️</p><ul><li><p>多级页表</p><ul><li>虚地址：| 虚页号 (V 位) | 页面偏移 (P 位) |</li><li>$\left(\frac{2^P}{m}\right)^i=2^V$</li><li><p>页表级数 $i=\left\lceil\frac{V}{P-\log_2m}\right\rceil $</p><ul><li>$P$：页面偏移的位数</li><li>$V$：虚页号的位数</li><li>$m$：页表项编址单元位数</li></ul></li></ul></li><li><p>快慢表</p><ul><li>快表：CPU 内部的 TLB</li><li>慢表：主存中的页表</li></ul></li><li>实存空间、虚存空间、页面大小（决定页面偏移位数）</li></ul></li></ul><h3 id="toc_26">外部存储器（辅助存储器）</h3><h4 id="toc_27">磁表面存储原理及记录方式</h4><p>$$\text{编码效率}η=\frac{\text{位密度}}{\text{最大磁化翻转次数}}$$</p><p><figure><img class="" alt="磁记录方式及性能评价" data-src="https://upload.hawa130.com/2022/06/image-20220623204209986.png#vwid=1426&vhei=748" src="https://upload.hawa130.com/2022/06/image-20220623204209986.png#vwid=1426&vhei=748"><figcaption>磁记录方式及性能评价</figcaption></figure></p><h4 id="toc_28">磁盘存储器</h4><ul><li><p>磁盘结构</p><ul><li>磁道（记录面的同心圆）</li><li>扇区（磁道的段）</li><li>柱面（相同序号的磁道构成的圆柱面）</li></ul></li><li>数据应尽可能放在同一柱面或者相邻柱面，缩短寻道时间</li><li><p><strong>技术指标</strong> ⭐️</p><ul><li>道密度：道 / mm</li><li>位密度：bit / mm（最靠近中心的磁道）</li><li><strong>非格式化容量</strong> = 位密度 × 内圈磁道周长 × 每个记录面磁道数 × 记录面数</li><li><strong>格式化容量</strong> = 每个扇区的字节数 × 每道道扇区数 × 每个记录面磁道数 × 记录面数</li><li><p>平均访问时间 = 平均寻道时间 + 平均等待时间 + 数据传输时间</p><ul><li>平均等待时间：磁盘旋转一周所用时间的一半</li></ul></li><li>转速：RPM（转 / 分钟）</li><li>数据传输速率 = 每个扇区的字节数 × 每道扇区数 × 磁盘转速</li></ul></li><li>与计算机主机的连接</li></ul><h4 id="toc_29">磁盘阵列 RAID</h4><p>由独立的磁盘组成的具有冗余特性的阵列。</p><h2 id="toc_30">指令系统</h2><h3 id="toc_31">存储模式</h3><ul><li><p><strong>数据存储顺序</strong></p><ul><li><strong>大端存储</strong>：最低有效字节存储在<strong>最高</strong>地址位置</li><li><strong>小端存储</strong>：最低有效字节存储在<strong>最低</strong>地址位置</li></ul></li><li><p><strong>边界对齐</strong></p><ul><li>16 位字长的数据：起始地址为 2 的整数倍。</li><li>32 位字长的数据：起始地址为 4 的整数倍。</li><li>64 位字长的数据：起始地址为 8 的整数倍。</li></ul></li><li><p><strong>堆栈</strong></p><ul><li>PUSH 操作：$\text{(SP)}-i\to\text{SP},\text{(R1)}\to\text{M}_\text{SP}$</li><li>POP 操作：$\text{M}_\text{SP}\to\text{(R1)},\text{(SP)}+i\to\text{SP}$</li></ul></li><li><p>冯诺伊曼结构和哈佛结构</p><ul><li>前者数据和指令存一起，后者数据指令分开存</li></ul></li></ul><h3 id="toc_32">指令类型</h3><ul><li>数据传送类（MOV）</li><li><p>运算类</p><ul><li>算术运算类</li><li>逻辑运算类</li></ul></li><li><p>输入/输出类</p><ul><li>统一编址的情况</li><li>独立编址的情况</li></ul></li><li><p>程序控制类</p><ul><li>转移指令</li><li>循环控制指令</li><li>过程调用和返回指令</li><li>程序自中断指令</li></ul></li><li>系统控制类（通常是特权指令，虚存管理、任务切换、改变处理器工作模式）</li></ul><h3 id="toc_33">指令设计</h3><h4 id="toc_34">指令格式</h4><p>二地址指令：| 操作码 | 地址码 1 | 地址码 2 |</p><p>还有一地址指令、零地址指令……</p><ul><li>定长操作码</li><li>变长操作码（扩展操作码）</li></ul><h3 id="toc_35">操作码设计</h3><ul><li><p><strong>定长操作码</strong></p><ul><li>$N$ 条指令，所有指令均用 $n$ 位编码：$N\le 2^n$。</li></ul></li><li><p><strong>变长操作码</strong> ⭐️</p><ul><li><strong>原则</strong>：短码不能是长码的前缀</li><li><strong>扩展操作码设计</strong></li><li><strong>平均码长</strong>：$\sum_{i=1}^n p_i\times l_i$</li><li><p>设计</p><ul><li>霍夫曼编码</li><li>特定规则</li><li>地址码数量</li></ul></li></ul></li></ul><h3 id="toc_36">寻址方式</h3><ol><li><strong>隐含寻址</strong>：操作数的位置默认，无需给出。</li><li><strong>立即寻址</strong>：操作数在指令中。</li><li><strong>寄存器寻址</strong>：操作数在指令指定的寄存器中。</li><li><strong>直接寻址</strong>：操作数在主存中，主存地址在指令中。</li><li><strong>寄存器间接寻址</strong>：操作数在主存中，主存地址在指令指定的寄存器中。</li><li><strong>相对寻址</strong>：跳转目标地址 $\text{EA}＝\text{(PC)}+\text{A}$</li><li><strong>基址寻址</strong>：操作数在主存中，$\text{EA}＝\text{(基址寄存器)}+\text{A}$</li></ol><h3 id="toc_37">指令系统结构的发展</h3><h4 id="toc_38">复杂指令集计算机 CISC</h4><ul><li>用一条指令代替一串指令</li><li>增加新的指令</li><li>增强指令功能</li><li>设置功能复杂的指令</li><li>增加寻址方式增加数据表示方式</li></ul><h4 id="toc_39">精简指令集计算机 RISC</h4><ul><li><p>指令系统简单</p><ul><li>指令条数少、格式少、长度固定、功能简单</li><li>寻址方式少</li><li>采用硬布线控制逻辑（不用或少用微程序控制）</li></ul></li><li><p>Load/Store结构</p><ul><li>只有LOAD和STORE指令可以访问存储器</li><li>寄存器多</li><li>寄存器窗口技术</li></ul></li><li><p>十分重视提高流水线的执行效率</p><ul><li>大部分指令可以单周期执行完成</li><li>延迟转移技术</li><li>指令流调整技术</li></ul></li><li>十分强调优化编译技术的作用</li></ul><h2 id="toc_40">中央处理器（CPU）</h2><h3 id="toc_41">CPU 的内部结构</h3><p><figure><img class="" alt="单总线数据通路CPU内部结构图" data-src="https://upload.hawa130.com/2022/06/image-20220623204103147.png#vwid=1406&vhei=1002" src="https://upload.hawa130.com/2022/06/image-20220623204103147.png#vwid=1406&vhei=1002"><figcaption>单总线数据通路CPU内部结构图</figcaption></figure></p><h3 id="toc_42">微操作与微命令</h3><p><strong>微操作</strong>：CPU 的原子操作，以含有一个寄存器的传递操作为标志。如：$\text{AR}\gets\text{PC}$</p><p><strong>微命令</strong>：控制微操作完成的控制信号，由控制器产生。如：$\text{PC}_\text{out},\text{AR}_\text{in}$</p><h4 id="toc_43">微操作流程</h4><ol><li><p>时序信号产生</p><ul><li>指令周期：完成一条指令</li><li>CPU 周期：完成一个子周期</li><li>节拍周期：完成一个微操作</li></ul></li><li><p>取址周期</p><ul><li><p>一个简单的取址周期可由 3 个步骤、4 个微操作组成</p><ul><li>T1: $\text{AR}\gets\text{PC}$</li><li>T2: $\text{DR}\gets\text{Memory[AR]}$</li><li>T3: $\text{PC}\gets\text{PC}+\text{I},\text{IR}\gets\text{DR}$（$\text{I}$ 为指令长度 byte）</li></ul></li></ul></li></ol><h3 id="toc_44">微程序控制器设计</h3><h4 id="toc_45">微指令</h4><p><strong>微指令</strong>：一个节拍内出现的一组微操作进行描述的语句。</p><p><strong>微程序 / 固件</strong>：一个微指令序列。</p><h4 id="toc_46">微指令设计</h4><ul><li><p>微指令地址的生成</p><ul><li>两地址方式（断定方式）</li><li>单地址方式（计数方式，增量方式）</li><li>可变格式</li></ul></li><li><p>编码</p><ul><li>水平型：多个微操作同时发生</li><li>垂直型：类似于机器指令</li></ul></li><li><strong>相容性</strong>：可在同一时间有效的控制信号。</li><li><strong>互斥性</strong>：不能在同一时间有效的控制信号。</li></ul><h4 id="toc_47">微程序设计 ⭐️</h4><p>看例题。</p><h3 id="toc_48">CPU 性能测量与提高</h3><h4 id="toc_49">CPU 性能测量 ⭐️</h4><ul><li><p><strong>CPU 时间</strong> $T_\text{CPU}=N\times T_\text{CLK}=\frac{N}{f_\text{CLK}}$</p><ul><li>$N$：CPU 时钟周期数</li><li>$T_\text{CLK}$：时钟周期时间</li><li>$f_\text{CLK}$：时钟频率</li></ul></li><li><p><strong>CPI</strong>：每条指令执行所用时钟数。</p><ul><li>$I$：指令数</li><li>$CPI=\frac{1}{I}\sum_{i=1}^n (CPI_i\times I_i)=\sum_{i=1}^n (\frac{I_i}{I}\times CPI_i)$</li><li>$T_\text{CPU}=I\times CPI\times T_\text{CLK}=\frac{I\times CPI}{f_\text{CLK}}$</li></ul></li><li><strong>IPC</strong>：每时钟周期执行的指令数</li><li><p><strong>MIPS</strong>：每秒钟执行的百万指令数</p><ul><li>$T$：执行时间</li><li>$MIPS=\frac{I}{T\times 10^6}=\frac{f_\text{CLK}}{CPI\times 10^6}$</li></ul></li><li><p><strong>FLOPS</strong>：每秒钟完成的浮点运算次数</p><ul><li>$M$：浮点运算次数</li><li>$FLOPS=\frac{M}{T}$</li><li>度量单位：<strong>M</strong>FLOPS、<strong>G</strong>FLOPS、<strong>T</strong>FLOPS…</li></ul></li></ul><h4 id="toc_50">提高 CPU 速度的策略</h4><ul><li>多核技术</li><li>多线程技术</li></ul><h2 id="toc_51">流水线技术与指令级并行</h2><h3 id="toc_52">流水线处理的概念</h3><p>若将一重复的处理过程分解为若干子过程，每个子过程都可在专用设备构成的流水线功能段上实现，并可与其它子过程同时执行，这种技术称为<strong>流水技术</strong>。</p><h4 id="toc_53">流水线的类型</h4><ul><li><p><strong>按流水线位于计算机系统的层次划分</strong></p><ul><li>系统级流水线 / 宏流水线（多计算机系统串行）</li><li>处理器级流水线</li><li>部件级流水线</li></ul></li><li><p><strong>按流水线功能的强弱划分</strong></p><ul><li>单功能流水线</li><li><p>多功能流水线</p><ul><li>静态流水线</li><li>动态流水线</li></ul></li></ul></li><li><p><strong>按流水线是否有反馈回路划分</strong></p><ul><li>线性流水线</li><li>非线性流水线（需要流水线调度）</li></ul></li><li><p><strong>按流水线输出端任务流出顺序与输入端任务流入顺序是否相同划分</strong></p><ul><li>顺序流动流水线（入出顺序相同）</li><li><p>异步流动流水线（入出顺序不同）</p><ul><li>无序流水线</li><li>错序流水线</li><li>乱序流水线</li></ul></li></ul></li><li><p><strong>按流水线一次处理对象的数量划分</strong></p><ul><li>标量流水线</li><li>超标量流水线</li><li>向量流水线</li><li>超长指令字流水线</li></ul></li></ul><h3 id="toc_54">浮点运算流水线</h3><h4 id="toc_55">浮点加减 / 乘除流水线</h4><ol><li>阶码比较</li><li>尾数对齐</li><li>尾数加 / 减</li><li>规格化</li></ol><h3 id="toc_56">指令流水线</h3><h4 id="toc_57">指令流水线策略</h4><ol><li><p>增加指令流水线深度</p><ul><li><p>局限性</p><ul><li>指令执行过程的细化有限度</li><li>随着深度增加，缓冲器增多，延迟加大，性能提高受阻碍</li></ul></li></ul></li><li>增加指令流水线条数</li></ol><h4 id="toc_58">RISC-V 基本指令流水线</h4><ol><li>设计指令获取、执行的硬件逻辑电路</li><li><p>对硬件逻辑分段</p><ul><li>尽量使每段处理功能相对独立，处理时间基本均衡。</li><li>保证当前指令在执行期间，指令流和数据流始终一个流向。</li><li>分段结果己是最细的划分：每段中仅有一个用于指令处理的功能部件。</li></ul></li><li>段间加入流水线寄存器</li><li>设计流水线控制器</li></ol><h3 id="toc_59">流水线性能度量 ⭐️</h3><h4 id="toc_60">时空图</h4><h4 id="toc_61">吞吐率</h4><ul><li>单位时间内，流水线所完成的<strong>任务数</strong>或<strong>输出结果的数量</strong>。</li><li><p><strong>最大吞吐率 $TP_\text{max}$</strong>：流水线在达到稳定状态后所得到的吞吐率。</p><ul><li>各段运行时间相等：$TP_\text{max}=\frac{1}{T_\text{CLK}}$</li><li>各段运行时间不等：$TP_\text{max}=\frac{1}{\max\{\tau_i\}}=\frac{1}{\tau}$</li></ul></li><li><p><strong>实际吞吐率 $TP$</strong>：流水线 $m$ 段组成，完成 $n$ 个的任务吞吐率为实际吞吐率。</p><ul><li><p>$m$ 段流水线，各段运行时间相等，为一个时钟周期 $T_\text{CLK}$</p><ul><li>完成 $n$ 个任务所用时间：$T_n(m)=(m+(n-1))\times\tau=(m+(n-1))\times T_\text{CLK}$</li><li>实际吞吐率：$TP=\frac{n}{T_n(m)}=\frac{n}{(m+(n-1))\times T_\text{CLK}}=\frac{TP_\text{max}}{1+\frac{m-1}{n}}$</li></ul></li><li><p>各段运行时间不等</p><ul><li>完成 $n$ 个任务所用时间：$T_n(m)=\sum_{i=1}^m\tau_i+(n-1)\times\max\{\tau_i\}$</li><li>实际吞吐率：$TP=\frac{n}{T_n(m)}=\frac{n}{\sum_{i=1}^m\tau_i+(n-1)\times\max\{\tau_i\}}$</li></ul></li></ul></li><li><p>使用 $MIPS$ 表示：$TP=MIPS\times 10^6=\frac{f_\text{CLK}}{CPI}$</p><ul><li>单流水线计算机系统：由于 $CPI_\text{最佳}=1$，故 $TP_\text{max}=f_\text{CLK}$</li></ul></li></ul><h4 id="toc_62">加速比</h4><p>加速比 $S$ 定义为等功能<strong>非流水线执行时间 $T(1)$</strong> 与<strong>流水线执行时间 $T(m)$</strong> 之比。</p><p>$$S=S_n(m)=\frac{T_n(1)}{T_n(m)}$$</p><ul><li><p>$m$ 段流水线，$n$ 个任务，若每段运行时间均为 $τ$。</p><ul><li>$T_n(1)=n\cdot m\tau$</li><li>$T_n(m)=mτ+(n-1)\cdot\tau$</li><li>$S_n(m)=\frac{mn}{m+n-1}=\frac{m}{1+\frac{m-1}{n}}$</li><li>可见，增大指令流水线的<strong>级数</strong>和送入流水线的<strong>指令数</strong>均可提高运行速度。</li></ul></li></ul><h4 id="toc_63">效率</h4><p>效率即流水线的设备利用率。流水线有通过（填充）时间和排空时间，效率 $E&lt;1$。</p><h5 id="toc_64">各段运行时间相等</h5><p>$m$ 个功能段，$n$ 个任务，各段运行时间为 $τ$，各段效率 $e_i$ 相等，即 $e_i=\frac{nτ}{T_n(m)}$</p><p>总效率 $E=\frac{1}{m}\sum_{i=1}^{m}e_i=\frac{nτ}{T_n(m)}=\frac{n}{m+n-1}=\frac{1}{1+\frac{m-1}{n}}$</p><p>可见当 $n \gg m$ 时，$E\approx 1$。</p><h5 id="toc_65">各段运行时间不等</h5><p>$$
E=\frac{n\text{ 个任务占用的时空区}}{m\text{ 个段总的时空区}}
$$</p><h3 id="toc_66">指令流水线的性能提高</h3><h4 id="toc_67">结构相关 / 冒险</h4><ul><li><p>部分功能单元没有充分流水</p><ul><li>解决：将流水线设计得更合理</li></ul></li><li><p>资源冲突：两个以上需要同时使用硬件资源</p><ul><li><p>解决</p><ul><li>增加资源副本</li><li><p>改变资源以能够并发使用</p><ul><li>主存访问冲突：哈佛结构（指令和数据分离）</li><li>两个加法器：ALU、地址加法器</li></ul></li><li>延迟（或暂停）冲突段 / 在冲突段插入流水线气泡</li></ul></li></ul></li></ul><h4 id="toc_68">数据相关 / 冒险</h4><ul><li>操作数未有效生成，就被作为后续指令的操作数</li><li><p>类型</p><ul><li>先写后读（RAW，Read After Write）</li><li>先读后写（WAR）</li><li>写后写（WAW）</li></ul></li><li><p>解决</p><ul><li>采用转发/直通/相关直接通路技术</li><li>增加专用硬件（推后法）</li><li>利用编译器</li><li>对寄存器读写做特别设计（RISC-V）</li></ul></li></ul><h4 id="toc_69">控制相关 / 冒险</h4><ul><li><p>对条件分支指令的处理方法</p><ol><li>冻结流水线：检测到分支指令就清除紧随分支并插入气泡。</li><li><p>静态分支预测</p><ul><li>不会发生</li><li>总会发生</li><li>编译器预测</li><li>测试法</li></ul></li><li><p>动态分支预测</p><ul><li>分支历史表（分支预测缓存）</li><li>分支历史移位寄存器</li></ul></li><li>延迟分支：在转移指令之后插入没有数据相关或控制相关的有效指令</li></ol></li><li><p>带转移开销的流水线性能</p><ul><li>控制相关对流水线性能造成的损失远比数据相关要大得多。</li><li>$\text{有停顿流水线的实际 CPI}=\text{理想 CPI}+\frac{\text{各种相关造成的停顿周期数}}{\text{指令数}}$</li><li>$\text{带转移开销流水线的加速比}=\frac{\text{流水线深度}}{\text{有停顿流水线的实际 CPI}}$</li></ul></li></ul><h3 id="toc_70">提高指令级并行的技术</h3><ul><li>乱序执行</li><li>推测执行</li></ul><h3 id="toc_71">多发射处理器</h3><ul><li>超标量</li><li>超长指令字处理器（VLIW）</li></ul><h2 id="toc_72">总线与输入 / 输出系统</h2><h3 id="toc_73">总线类型</h3><ul><li><p>按连接层次</p><ul><li>片内总线</li><li>系统总线</li><li>通信总线</li></ul></li><li><p>按数据位数</p><ul><li>并行总线</li><li>串行总线</li></ul></li><li><p>按用法</p><ul><li>专用总线</li><li>公用（共享）总线</li></ul></li></ul><h3 id="toc_74">总线的信息传输方式</h3><ul><li><p>过程</p><ol><li>传输请求</li><li>总线仲裁</li><li>部件 / 设备寻址</li><li><p>数据传输</p><ul><li>并行传送方式</li><li>串行传送方式</li><li>分时传送方式</li><li>消息传送方式</li></ul></li><li>总线释放</li></ol></li><li><p>通信方式</p><ul><li><p>同步通信方式</p><ul><li>速度快，逻辑简单</li><li>缺点：时钟速率受慢速设备限制</li></ul></li><li><p>异步通信方式</p><ul><li>无时钟信号线</li><li>使用握手协议</li></ul></li></ul></li></ul><h3 id="toc_75">总线仲裁</h3><ul><li><p>集中式仲裁</p><ul><li>链式查询方式（菊花链）：离总线控制器越近优先级越高</li><li>计数器定时查询方式（轮询）</li><li>独立请求方式</li></ul></li></ul><table><thead><tr><th align="center"> </th><th>菊花链</th><th>轮询</th><th>独立请求</th></tr></thead><tbody><tr><td align="center">线数</td><td>$3$</td><td>$2+[\log_2n]$</td><td>$2n+1$</td></tr><tr><td align="center">可扩充性</td><td>好</td><td>差</td><td>差</td></tr><tr><td align="center">可靠性</td><td>低</td><td>高</td><td>高</td></tr><tr><td align="center">优先级</td><td>固定</td><td>可变</td><td>可变</td></tr><tr><td align="center">总线分配速度</td><td>慢</td><td>慢</td><td>快</td></tr></tbody></table><ul><li>分布式仲裁</li></ul><h3 id="toc_76">典型的总线</h3><ul><li><p>系统总线（内总线）</p><ul><li>ISA 总线</li><li>PCI 总线</li><li>PCIe 总线</li></ul></li><li><p>通信总线（外总线）</p><ul><li>RS-232C</li><li>USB</li><li>SCSI</li><li>SAS</li><li>ATA</li><li>SATA</li></ul></li></ul><h3 id="toc_77">输入输出技术</h3><ul><li>程序查询方式</li><li>中断方式</li><li>直接存储器存取（DMA）</li><li>I/O 通道</li></ul><h2 id="toc_78">并行体系结构</h2><ul><li>SISD: 单指令流单数据流（串行计算机）</li><li><p>SIMD: 单指令流多数据流</p><ul><li>阵列处理机</li><li>向量处理机</li></ul></li><li><p>MIMD: 多指令流多数据流</p><ul><li><p>多处理器系统（共享内存）</p><ul><li>UMA：每个处理器 / 内核访问内存的时间一样</li><li>NUMA：……不一样</li></ul></li><li><p>多计算机系统（不共享内存，通信采用消息机制）</p><ul><li>MPP：大规模并行处理机（高性能）</li><li>Cluster：集群（性价比</li><li>网格（客户端 — 服务器，计算任务只在客户端节点进行，服务器进行任务分发和结果汇总）</li></ul></li></ul></li></ul>
