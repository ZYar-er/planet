<blockquote><h1 id="fpga4fun-Music-box"><a href="#fpga4fun-Music-box" class="headerlink" title="[fpga4fun] Music box"></a>[fpga4fun] Music box</h1><bloc</blockquote><h1 id="fpga4fun-Music-box"><a href="#fpga4fun-Music-box" class="headerlink" title="[fpga4fun] Music box"></a>[fpga4fun] Music box</h1><blockquote><p>还没整完。</p><p>UPDATE1 AT: 2022-12-22  继续完成了Music box 2 这一部分</p></blockquote><p>因为在学校收了一块野火征途mini FPGA开发板，在看的是配套的视频教程。群里学长推荐我做一做 fpga4fun 上的东西，那就整一整 ~</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个项目是用 FPGA 驱动喇叭发出声音和音乐。</p><p>硬件连接为 FPGA 开发板，一个喇叭，一个 1kΩ 电阻。</p><p><img src="https://www.fpga4fun.com/images/MusicBox.jpg"></p><p><img src="https://www.fpga4fun.com/images/MusicBoxSchematic.gif"></p><h2 id="Music-box-1-Simple-beep"><a href="#Music-box-1-Simple-beep" class="headerlink" title="Music box 1 -Simple beep"></a>Music box 1 -Simple beep</h2><h3 id="计数与频率"><a href="#计数与频率" class="headerlink" title="计数与频率"></a>计数与频率</h3><p>一个16位的计数器，范围位 0 ~ 65535 共65536个值，如果板子的主频为 25M ，如果在上升沿计数（时钟是个方波），那么这个16位计数器最高位对应的频率便为 $25\times10^6\div65536&#x3D;381Hz$  <strong>(就是加到对应那一位变化之后算一次)</strong></p><p>以此类推第15位为 $25\times10^6\div32768&#x3D;762Hz$ , 第14位为 $25\times10^6\div16384&#x3D;1525Hz$ …… 第2位为$25\times10^6\div4&#x3D;6.25\times10^6Hz$ , 第1位为$25\times10^6\div2&#x3D;15.5\times10^6Hz$</p><h3 id="产生-A-的声音"><a href="#产生-A-的声音" class="headerlink" title="产生 A 的声音"></a>产生 A 的声音</h3><p>A 的频率为 440Hz </p><p>以 25M 主频为例，产生440Hz可以先使用16位计数器，将 25M 分为 65536 份，此时计算出产生 440Hz 只需要计数到 56818 即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>counter<span class="token operator">==</span><span class="token number">56817</span><span class="token punctuation">)</span>        counter <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span>         counter <span class="token operator">&lt;</span> <span class="token operator">=</span> counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">assign</span> speaker <span class="token operator">=</span> counter<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是这样的话，占空比就不是 50% 了，$b’1000\ 0000\ 0000\ 0000&#x3D;d’32768$ ，所以低电平为 0<del>32767，高电平为 32768</del>56818，占空比为42%</p><p>所以可以折中一下，然后每次翻转 <code>speaker</code> 的电平值 ，而且折中之后可以省一位计数器的值~</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>counter<span class="token operator">==</span><span class="token number">28408</span><span class="token punctuation">)</span>        counter<span class="token operator">&lt;</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span>        counter <span class="token operator">&lt;</span> <span class="token operator">=</span> counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">reg</span> speaker<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>counter<span class="token operator">==</span><span class="token number">28408</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token operator">~</span>speaker<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>因为征途mini的主频为50M，所以用17位可以产生的时钟为 $(2\times25\times10^6)\div(2\times65536)&#x3D;381Hz$</p><p>要产生440Hz，计数到 $56818\times2&#x3D;113636$ 即可。</p><p>使用翻转的方式，使用16位计数器，折中计数至 56818，同时加上了复位信号</p><p>主程序代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// music.v</span><span class="token keyword">module</span> music <span class="token punctuation">(</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    rst<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     speaker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        counter <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">16'd56817</span><span class="token punctuation">)</span>        counter <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        counter <span class="token operator">&lt;</span> <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">16'd56817</span> <span class="token punctuation">)</span>        speaker <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token operator">~</span>speaker<span class="token punctuation">;</span>    <span class="token keyword">else</span>        speaker <span class="token operator">&lt;</span> <span class="token operator">=</span> speaker<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真验证，<code>Testbench</code>  代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// tb_music.v</span><span class="token constant">`timescale</span>  <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span>  <span class="token function">tb_music</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span>     clk<span class="token punctuation">;</span><span class="token keyword">reg</span>     rst<span class="token punctuation">;</span><span class="token keyword">wire</span>    speaker<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk  <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    rst <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token number">#20</span>    rst <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>music music_inst<span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk <span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">.</span>rst <span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>speaker <span class="token punctuation">(</span>speaker<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h4><p><img src="https://yun.ksfu.top/blog/fpga4fun/0.png" alt="0"></p><p>占空比 $4545450-3409090&#x3D;1136360$  $3409090-2272730&#x3D;1136360$ ，可以看出占空比确实为50% </p><p>频率 $\frac{1}{4545450-2272730}\times10^9&#x3D;440Hz$</p><p>）因为我莫得喇叭，就先不上板子了……</p><hr><p><del>剩下的等我学完……</del> 下面的再更新一下 <span class="bella_beijixing"></span></p><h3 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h3><p>添加了一个名字叫 <code>clkdivider</code> 的参数，方便之后的修改。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// music.v</span><span class="token keyword">module</span> music #<span class="token punctuation">(</span>    <span class="token keyword">parameter</span>  clkdivider <span class="token operator">=</span> <span class="token number">50000000</span><span class="token operator">/</span><span class="token number">440</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    rst<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     speaker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        counter <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> clkdivider<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        counter <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        counter <span class="token operator">&lt;=</span> counter <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> clkdivider<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token operator">~</span>speaker<span class="token punctuation">;</span>    <span class="token keyword">else</span>        speaker <span class="token operator">&lt;=</span> speaker<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// testbench.v</span><span class="token constant">`timescale</span>  <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span>  <span class="token function">tb_music</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span>     clk<span class="token punctuation">;</span><span class="token keyword">reg</span>     rst<span class="token punctuation">;</span><span class="token keyword">wire</span>    speaker<span class="token punctuation">;</span><span class="token keyword">parameter</span> clkdivider <span class="token operator">=</span> <span class="token number">50000000</span><span class="token operator">/</span><span class="token number">440</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk  <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    rst <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token number">#20</span>    rst <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>music  #<span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token function">clkdivider</span><span class="token punctuation">(</span>clkdivider<span class="token punctuation">)</span><span class="token punctuation">)</span>music_inst <span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk <span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>rst <span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>speaker <span class="token punctuation">(</span>speaker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Music-box-2-Ambulance-siren"><a href="#Music-box-2-Ambulance-siren" class="headerlink" title="Music box 2 - Ambulance siren"></a>Music box 2 - Ambulance siren</h2><p>这次在两种音调之间交替。首先使用24位计数器 <code>tone</code>  来产生一个缓慢的方波，其最高位（MSB）以1.5Hz的频率进行切换。然后我们在这两个频率之间切换另一个计数器。这样就发出了类似救护车警报一类的声音。</p><p>先产生一个1.5Hz的信号 <code>tone</code> ，此时计数器 <code>counter</code> 为向下计数，当 <code>counter</code> 为0时，如果 <code>tone</code> 为1，继续产生440Hz的信号，当 <code>tone</code> 为0时，产生220Hz。这两个频率的信号以1.5Hz的频率交替出现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// ambulance.v</span><span class="token keyword">module</span> music #<span class="token punctuation">(</span>    <span class="token keyword">parameter</span>  clkdivider <span class="token operator">=</span> <span class="token number">50000000</span><span class="token operator">/</span><span class="token number">440</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    rst<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     speaker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// MSB 1.5Hz变动一次</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  tone<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        tone <span class="token operator">&lt;=</span> <span class="token number">25'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        tone <span class="token operator">&lt;=</span> tone<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>         counter <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token comment">// 计数器为0，说明当前频率已产生完毕，切换下一个</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment">// 根据tone的MSB是否有值来确定</span>        <span class="token comment">// 如果tone的MSB为0，则切换为220Hz的声音</span>        <span class="token comment">// 如果tone的MSB为1，则切换为440Hz的声音</span>        counter <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">?</span>clkdivider<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> clkdivider<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         counter <span class="token operator">&lt;=</span> counter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token operator">~</span>speaker<span class="token punctuation">;</span> <span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Police-siren"><a href="#Police-siren" class="headerlink" title="Police siren"></a>Police siren</h3><p>接下来是生成一个听起来像警笛的声音。这个声音听着是又小逐渐变大的这种，之前声音像跳楼梯，这次的像上坡。</p><p>我们将音调计数器 <code>tone</code> 的速度提高一倍，变为3Hz。</p><p>然后，就开始升频操作。我们提取音调计数器的16位到第22位：<code>tone[22:16]</code>。这样我们得到了7bit，并且以一个中等速度从0~127，到达127后，再从127~0。</p><p>为了得到一个向下的斜坡，将其进行翻转（<code>~tone[22:16]</code>）,此时从127~0。</p><p>为了切换上下这两个通道，同上面一样，我们根据 MSB <code>tone[23]</code> 的值进行选择，3Hz切换一次。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ramp <span class="token operator">=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">?</span> tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">~</span>tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>wire表示直通，即只要输入有变化，输出马上无条件地反映；reg表示一定要有触发，输出才会反映输入。(<a href="https://zhuanlan.zhihu.com/p/482748824">【Verilog HDL】Verilog中wire与reg类型学习 - 知乎 (zhihu.com)</a>)</p></blockquote><p>这样做的意义：<a href="https://www.fpga4fun.com/MusicBox_ramp_explanation.html">fpga4fun.com - Music box siren ramp</a> 。</p><p>这个 <code>ramp</code> 的值从 <code>7&#39;b0000000</code> 到 <code>7&#39;b1111111</code> 。为了得到一个可用的值产生声音，我们在他前面补2位 <code>2&#39;b01</code> 后面补7位 <code>7&#39;b0000000</code> 进行填充。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> clkdivider <span class="token operator">=</span> <span class="token operator">&#123;</span><span class="token number">2'b01</span><span class="token punctuation">,</span> ramp<span class="token punctuation">,</span> <span class="token number">7'b0000000</span><span class="token operator">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样， <code>clkdivider</code> 的值从 <code>16&#39;b0100000000000000</code>  到<code>16&#39;b01111110000000</code> ，在50MHz的时钟下，相当于产生从765Hz到1525Hz的高音调警报器。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// police</span><span class="token keyword">module</span> police #<span class="token punctuation">(</span>    <span class="token keyword">parameter</span>  clkdivider <span class="token operator">=</span> <span class="token number">50000000</span><span class="token operator">/</span><span class="token number">440</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    rst<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     speaker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// MSB 3Hz变动一次</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  tone<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        tone <span class="token operator">&lt;=</span> <span class="token number">24'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        tone <span class="token operator">&lt;=</span> tone<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 判断是上升还是下降</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  ramp <span class="token operator">=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">?</span> tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">~</span>tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// clkdivider 以3Hz为周期变动</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> clkdivider <span class="token operator">=</span> <span class="token operator">&#123;</span><span class="token number">2'b01</span><span class="token punctuation">,</span> ramp<span class="token punctuation">,</span> <span class="token number">7'b0000000</span><span class="token operator">&#125;</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>         counter <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         counter <span class="token operator">&lt;=</span> clkdivider<span class="token punctuation">;</span>    <span class="token keyword">else</span>         counter <span class="token operator">&lt;=</span> counter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token operator">~</span>speaker<span class="token punctuation">;</span> <span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="High-speed-pursuit"><a href="#High-speed-pursuit" class="headerlink" title="High-speed pursuit"></a>High-speed pursuit</h3><p>要进行高速追击，警报声音有快有慢。</p><p>所以 <code>tone[22:16]</code> 给我们一个快速的斜坡，而 <code>tone[25:19]</code> 给我们一个缓慢的斜坡。</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> fastsweep <span class="token operator">=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">?</span> tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">~</span>tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> slowsweep <span class="token operator">=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">?</span> tone<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">~</span>tone<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> clkdivider <span class="token operator">=</span> <span class="token operator">&#123;</span><span class="token number">2'b01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">?</span> slowsweep <span class="token punctuation">:</span> fastsweep<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7'b0000000</span><span class="token operator">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最终代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// hign.v</span><span class="token keyword">module</span> hign <span class="token punctuation">(</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>       <span class="token keyword">wire</span>    rst<span class="token punctuation">,</span>    <span class="token keyword">output</span>      <span class="token keyword">reg</span>     speaker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  tone<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        tone <span class="token operator">&lt;=</span> <span class="token number">25'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        tone <span class="token operator">&lt;=</span> tone<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> fastsweep <span class="token operator">=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">?</span> tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">~</span>tone<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> slowsweep <span class="token operator">=</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">?</span> tone<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">~</span>tone<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> clkdivider <span class="token operator">=</span> <span class="token operator">&#123;</span><span class="token number">2'b01</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tone<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">?</span> slowsweep <span class="token punctuation">:</span> fastsweep<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7'b0000000</span><span class="token operator">&#125;</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>         counter <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         counter <span class="token operator">&lt;=</span> clkdivider<span class="token punctuation">;</span>    <span class="token keyword">else</span>         counter <span class="token operator">&lt;=</span> counter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        speaker <span class="token operator">&lt;=</span> <span class="token operator">~</span>speaker<span class="token punctuation">;</span> <span class="token keyword">endmodule</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仿真</p><figure><div class="code-wrapper"><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span>  <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span>  <span class="token function">tb_hign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span>     clk<span class="token punctuation">;</span><span class="token keyword">reg</span>     rst<span class="token punctuation">;</span><span class="token keyword">wire</span>    speaker<span class="token punctuation">;</span><span class="token comment">//初始化输入信号</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    clk  <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    rst <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token number">#20</span>    rst <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>hign hign_inst <span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk <span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//input     clk</span>    <span class="token punctuation">.</span>rst <span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>speaker <span class="token punctuation">(</span>speaker<span class="token punctuation">)</span>   <span class="token comment">//output    speaker</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://yun.ksfu.top/blog/fpga4fun/1.png" alt="1"></p><p>可以看出间隔确实是变化的，仿真波形图里第一个频率经过计算为912Hz，符合要求。</p><hr><p>待续……</p>