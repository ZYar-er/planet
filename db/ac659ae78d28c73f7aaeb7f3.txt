<blockquote>节省生命从小事做起</blockquote><blockquote><p>文章是我和GPT一块写的，回头再慢慢丰富润色。</p></blockquote><p>OpenSSH是一种强大的远程登录和数据传输工具，也是SSH协议目前最流行的实现。它提供了许多安全功能，如数据加密、身份验证和会话完整性。安全性上，SSH能吊着明文传输的Telnet打。并且SSH的配置也相对容易，目前基本所有主流Linux发行版都默认安装了OpenSSH，Win10&#x2F;11也自带了OpenSSH Cilent。</p><p>追求效率提升，首先需要看看日常重复次数最多的操作，然后试着优化——比如SSH，虽然每次只有1,2秒，但累积起来节省的时间也不少。配置好了基本能实现无感登陆那种程度，让你几乎忘掉这个环节，还是挺爽的。除了效率，提升点安全性也是挺好的：公网服务器改用密钥登陆，又无感又安全——只要密钥别丢。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><p>基本格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [options] [username]@[hostname]  </span><br></pre></td></tr></table></figure><p><code>[username]</code> 是远程主机的用户名，<code>[hostname]</code> 是远程主机的主机名或 IP 地址。</p><p><code>[options]</code> 是可选的参数，例如 <code>-i</code> 指定要使用的私钥文件，<code>-L</code> 指定要使用的本地端口转发，<code>-R</code> 指定要使用的远程端口转发等。</p><p>一般用的最多的是默认端口密码登陆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@hostname &lt;-p 22&gt;</span><br></pre></td></tr></table></figure><p>后面的<code>-p 22</code>是缺省参数，可以不加。</p><p>不过密码登陆安全性并不太高，建议重要场合上密钥登陆。例如，用密钥文件 <code>id_rsa</code> 以用户 <code>username</code> 登录远程主机 <code>example.com</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id-rsa username@example.com</span><br></pre></td></tr></table></figure><p>密钥和公钥就像锁和钥匙一一对应，你可以用同一对公钥密钥登陆多个主机，不过显然不太安全。建议一对公密钥只用于一个服务器的登陆。</p><p>它们的创建很简单，使用 <code>OpenSSH</code> 自带的 <code>ssh-keygen</code> 命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">xeonds@ark-station:~$ ssh-keygen </span><br><span class="line">Generating public/private ed25519 key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/xeonds/.ssh/id_ed25519): example-key     <span class="comment"># 指定公钥私钥保存在哪</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):                                         <span class="comment"># 指定私钥使用密码</span></span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> example-key</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> example-key.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:tFoZLdZFg3HDMqGG6rC5jq+zysxClfBCUvffMYgS5GY xeonds@ark-station</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+--[ED25519 256]--+</span></span><br><span class="line"><span class="string">| ...+     o**    |</span></span><br><span class="line"><span class="string">|.o o o o =+o.o   |</span></span><br><span class="line"><span class="string">|o o E + O =o     |</span></span><br><span class="line"><span class="string">| . * o = * o     |</span></span><br><span class="line"><span class="string">|  + .   S .      |</span></span><br><span class="line"><span class="string">| . =   o         |</span></span><br><span class="line"><span class="string">|. o . .          |</span></span><br><span class="line"><span class="string">|*. .             |</span></span><br><span class="line"><span class="string">|BX+              |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">xeonds@ark-station:~$ ls | grep example</span></span><br><span class="line"><span class="string">example-key</span></span><br><span class="line"><span class="string">example-key.pub</span></span><br></pre></td></tr></table></figure><p>上面带<code>.pub</code>后缀的就是公钥，私钥是不带后缀的那个。创建完成之后，可以用 <code>ssh-copy-id</code> 把公钥传给你要登陆的服务器，把私钥妥善保管好：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i example-key.pub username@example.com</span><br></pre></td></tr></table></figure><p>还可以用<code>-p xxxx</code>指定端口。传完之后就能用前面的指令登陆服务器了。但是这样也挺麻烦的对吧。你别急，还有办法：把下面的内容保存到你的<code>~/.ssh/config</code>文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host my-server</span><br><span class="line">    HostName example.com</span><br><span class="line">    User username</span><br><span class="line">    Port 22                             # 端口默认22的话可以不写</span><br><span class="line">    IdentityFile ~/.ssh/example-key     # 指向你的密钥路径</span><br><span class="line">    PreferredAuthentications publickey  # 指定优先使用公钥</span><br></pre></td></tr></table></figure><p>现在就可以直接用下面的指令登陆了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh my-server</span><br></pre></td></tr></table></figure><p>直接登陆，几乎无感。当然要是你给私钥设置密码了就得在登陆的时候再输入一遍密码。</p><blockquote><p>不过跟现代计算机系统比起来，还是人参与的环节更加脆弱，最终还是得小心社工手段。</p></blockquote><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><p>因为忘了断开另一个开发机的ssh连接导致我有几个端口一直被占用着，所以得想办法断开另一台机器的连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w <span class="comment"># 查看所有连接</span></span><br><span class="line">pkill -<span class="built_in">kill</span> -t pts/x <span class="comment"># 断开编号为x的连接</span></span><br><span class="line">pkill -9 -t pts/x <span class="comment"># 和上边一样，不过是强制断联</span></span><br></pre></td></tr></table></figure><p>不过不知道为啥好像远程shell的服务还活着，只能手动杀掉了。下次建议用tmux，省事省心。</p><h3 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h3><p>OpenSSH 还提供了一种安全传输文件的方法，称为 SFTP（SSH 文件传输协议）。要使用 SFTP 传输文件，您需要使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp [options] [username]@[hostname]  </span><br></pre></td></tr></table></figure><p>其中，<code>[options]</code> 是可选的参数，例如 <code>-i</code> 指定要使用的私钥文件，<code>-L</code> 指定要使用的本地端口转发，<code>-R</code> 指定要使用的远程端口转发等。<code>[username]</code> 是远程主机的用户名，<code>[hostname]</code> 是远程主机的主机名或 IP 地址。<br>例如，如果您要使用密钥文件 <code>id_rsa</code> 将本地文件 <code>file.txt</code> 传输到远程主机 <code>example.com</code>，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp -i id_rsa example.com  </span><br></pre></td></tr></table></figure><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="1-端口转发"><a href="#1-端口转发" class="headerlink" title="1. 端口转发"></a>1. 端口转发</h3><blockquote><p>ref:<a href="https://zhuanlan.zhihu.com/p/57630633">SSH命令的三种代理功能 - 韦易笑</a></p></blockquote><p>OpenSSH 提供了一种称为端口转发的功能，允许您将本地端口与远程端口进行映射。这使得您可以在本地网络上使用远程服务，而无需将服务暴露给外部网络。要使用端口转发，您需要使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L [local_port:]local_host [username]@[hostname]  </span><br></pre></td></tr></table></figure><p>其中，<code>[local_port]</code> 是本地端口的名称，<code>local_host</code> 是本地主机的名称或 IP 地址，<code>[username]</code> 是远程主机的用户名，<code>[hostname]</code> 是远程主机的主机名或 IP 地址。<br>例如，如果您要将本地端口 8080 映射到远程主机的 SSH 服务（端口 22），可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8080:localhost username@example.com  </span><br></pre></td></tr></table></figure><p>上面的指令就能很轻易实现基于<code>xxx over SSH</code>的内网穿透。举个例子，前面我配置好了我的服务器的<code>ssh config</code>，假设我的服务器配置项名为<code>server</code>，在局域网中有一台地址为<code>1.14.5.14</code>的Windows服务器，那么我就可以使用一行指令通过SSH跳转连接到这台Windows服务器的远程桌面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 3389:1.14.5.14:3389 server -N &amp; rdesktop localhost</span><br></pre></td></tr></table></figure><p>假设我的这台服务器<code>server</code>在层层内网中，需要经过多重跳板才能从公网进行访问，一般的远程桌面面对这种网络环境可能比较困难，但是对于上面的<code>RDP over SSH</code>，这种方法既能享受<code>SSH</code>的安全性，又能相对便利地进行访问——只要配置好这台<code>server</code>服务器的<code>ProxyJump</code>路径和登陆就行。</p><p>端口转发有三种方式，上边的<code>-L</code>是正向代理，也就是在本地启动端口，把本地的数据转发到远端。上面转发桌面的例子就是这样，把本地3389端口的RDP请求转发到了远端的3389端口，从而实现了从本地访问远程服务器所在局域网的计算机的需求。另外两种分别是反向代理<code>-R</code>和socks5代理<code>-D</code>。这个一般可以作为兜底方案，长期需求建议上服务器。</p><p>按照正向代理的思路，反向代理就是把远端端口的访问请求转发到本地的计算机上。比如访问一个公网计算机的1234端口，就可以通过<code>-R</code>启动反向代理将这个端口的请求转发到本地的任意端口（比如4514）从而将内网的某个服务映射到公网中。这一点特别适合临时给某个服务搭建一个预览平台。</p><p>另外就是socks5转发，可以直接点上边链接看原文，这种我还没用过就不做阐述了。</p><p>下面用指令总结下这几种代理方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转发本地请求到远端，例如访问远程局域网的远程桌面</span></span><br><span class="line">ssh -L [本地主机所在局域网任意主机:端口]:[目标主机所在局域网任意主机:端口] 要连接的主机</span><br><span class="line"><span class="comment"># 转发远端请求到本地，例如穿透本机某端口的服务到公网</span></span><br><span class="line">ssh -R [远端主机:端口]:[本地主机局域网任意主机:端口] 远端主机</span><br><span class="line"><span class="comment"># 本地socks5代理，效果大概就是让远端主机成为自己1080端口的上网代理？</span></span><br><span class="line"><span class="comment"># 完成之后，在浏览器代理设置里边设置代理为socks5，地址为localhost:1080就行</span></span><br><span class="line">ssh -D localhost:1080 远端主机</span><br></pre></td></tr></table></figure><ol start="2"><li>连接后执行一条指令后断开</li></ol><p>直接在连接命令后边跟上要执行的指令就行。</p><ol start="3"><li>在远程主机运行X程序</li></ol><p>连接命令加上<code>-X</code>参数，然后主机就会开启X转发。用<code>-x</code>则是关闭X转发。没用过，不过看起来像是服务器上跑进程，本地跑GUI的做法？</p><h3 id="2-SSHFS"><a href="#2-SSHFS" class="headerlink" title="2. SSHFS"></a>2. SSHFS</h3><p>安装<code>sshfs</code>之后，就可以用ssh的方式将远程的文件系统挂载到本地了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sshfs -o allow_other,default_permissions xeonds@10.0.0.154:/home/xeonds /mnt/ark-station-breeze/</span><br></pre></td></tr></table></figure><p>例如上面的指令，我将局域网中一个机器的用户目录挂载到了当前目录下。</p>