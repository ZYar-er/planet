<p>WMCTF 2020中<a href="https://zhaoj.in">赵师傅</a>出了一道PHP源码审计 <code>Make PHP Great Again</code>。<br>
比赛中没有做出来，非常遗憾。</p>
<p>作为一个赛后诸葛亮，趁着赵师傅还没发官<hr /><p>WMCTF 2020中<a href="https://zhaoj.in">赵师傅</a>出了一道PHP源码审计 <code>Make PHP Great Again</code>。<br>比赛中没有做出来，非常遗憾。</p><p>作为一个赛后诸葛亮，趁着赵师傅还没发官方分析，在此水一篇博客分析分析题目</p><h2 id="什么事require-once">什么事require_once</h2><p>as always，先看<a href="https://www.php.net/manual/en/function.require-once.php">文档</a><br><code>require_once</code>在功能上与<code>require</code>一致，只是对于任意文件都只会包含一次，而<code>require</code>在正常情况下又与<code>include</code>的功能一致。<br>又到了日常骂文档的时间：<code>require_once</code>的文档告诉我们要到<code>include_once</code>的文档中查看<code>_once</code>的行为（<code>See the include_once documentation for information about the _once behaviour</code>），而<code>include_once</code>又说了几句废话带过去了（<code>As the name suggests, the file will be included just once.</code>）。8愧事PHP</p><h2 id="源码分析">源码分析</h2><h3 id="Entry">Entry</h3><p>很多人会误以为require/include系列是函数，然而文档都写得很清楚了它们实际上是<code>statement</code>，语句，所以它们并没有通过<code>PHP_FUNCTION</code>宏注册于PHP的函数注册表中。这样的<code>statement</code>总共只有五个，分别是<code>include[_once]</code>、<code>require[_once]</code>与<code>eval</code>。</p><p>在<code>Zend/zend_vm_opcodes.h</code>中我们可以找到，<code>require/include</code>的opcode是73</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/opcode.png" class="" title="ZEND_INCLUDE_OR_EVAL"><p>而在<code>Zend/zend_vm_def</code>中我们可以看到</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/handler.png" class="" title="ZEND_VM_HANDLER"><p>可以看到，这个handler的核心在于<code>zend_include_or_eval</code>，接下来我们就从这个函数开始进一步分析</p><h3 id="zend-include-or-eval">zend_include_or_eval</h3><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/resolve.png" class="" title="zend_resolve_path"><p><code>zend_resolve_path</code>是php API的一部分，也就是说是动态赋值的。<br>很容易就会发现在<code>zend_startup</code>步骤中出现了<br><code>zend_resolve_path = utility_functions-&gt;resolve_path_function;</code><br>这样的语句，交叉引用看到<code>main.c</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">php_module_startup</span><span class="params">(sapi_module_struct *sf, zend_module_entry *additional_modules, <span class="keyword">uint32_t</span> num_additional_modules)</span></span>&#123;</span><br><span class="line">    zend_utility_functions zuf;</span><br><span class="line">    ...</span><br><span class="line">    zuf.resolve_path_function = php_resolve_path_for_zend;</span><br><span class="line">    <span class="built_in">zend_startup</span>(&amp;zuf);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终找到&quot;真正&quot;的<code>zend_resolve_path</code>函数，然后再琢磨一会才能找到<code>tsrm_realpath_r</code>，但是实际上这里正常的做法是动态调试。<br>在<code>zend_include_or_eval</code>中下断点，下在<code>zend_resolve_path</code>处，单步进入，会发现实际上走到了<code>phar_find_in_include_path</code>，原因是phar拓展拦截了<code>zend_resolve_path</code>函数（装饰器设计模式）。不过没关系，我们还是fallback到了<code>php_resolve_path_for_zend</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PHP_MINIT_FUNCTION</span>(phar)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">REGISTER_INI_ENTRIES</span>();</span><br><span class="line"></span><br><span class="line">    phar_orig_compile_file = zend_compile_file;</span><br><span class="line">    zend_compile_file = phar_compile_file;</span><br><span class="line"></span><br><span class="line">    phar_save_resolve_path = zend_resolve_path;</span><br><span class="line">    zend_resolve_path = phar_resolve_path;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">phar_object_init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">phar_intercept_functions_init</span>();</span><br><span class="line">    <span class="built_in">phar_save_orig_functions</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">php_register_url_stream_wrapper</span>(<span class="string">&quot;phar&quot;</span>, &amp;php_stream_phar_wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟啊跟，最终跟到<code>tsrm_realpath_r</code>。但是<code>tsrm_realpath_r</code>这么长不太想看怎么办？<br>别忘了我们是在动态调试。让我们先看看执行的效果如何</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/noexception.png" class="" title="what?"><p><code>tsrm_realpath</code>返回了NULL。看上去没问题，但是让我们回到<code>zend_include_or_eval</code>。按照开发者的逻辑，<code>tsrm_realpath</code>返回NULL意味着出现了问题，理应抛出一个异常（在PHP中为<code>execute_globals.exception</code>，即<code>EG(exception)</code>），然而纵观源码，此处并没有调用<code>zend_throw_exception</code>抛出异常。</p><p>所以我们直接走到了<code>zend_stream_open</code>。这时我们遇到了另一个PHP_API，参考<code>zend_resolve_path</code>，我们能够找到&quot;真正的&quot;<code>zend_stream_open</code>为<code>php_stream_open_for_zend</code>。可以看到它对<code>php_stream_open_wrapper</code>进行了包装，而<code>wrapper</code>又是一个指向<code>_php_stream_open_wrapper_ex</code>(main/streams/streams.c:2057)的宏</p><p>跟进来，仍然有对<code>zend_resolve_path</code>的调用</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/stream_open.png" class="" title="梅开二度"><p>梅开二度，仍然返回NULL，没抛Exception。我们跟到<code>main/streams/plain_wrapper.c</code>中看文件是如何打开的：</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/open_wrapper.png" class=""><p>也就是说需要经过一次<code>expand_filepath</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PHPAPI <span class="keyword">char</span> *<span class="title">expand_filepath</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filepath, <span class="keyword">char</span> *real_path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">expand_filepath_ex</span>(filepath, real_path, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PHPAPI <span class="keyword">char</span> *<span class="title">expand_filepath_ex</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filepath, <span class="keyword">char</span> *real_path, <span class="keyword">const</span> <span class="keyword">char</span> *relative_to, <span class="keyword">size_t</span> relative_to_len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">expand_filepath_with_mode</span>(filepath, real_path, relative_to, relative_to_len, CWD_FILEPATH);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PHPAPI <span class="keyword">char</span> *<span class="title">expand_filepath_with_mode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filepath, <span class="keyword">char</span> *real_path, <span class="keyword">const</span> <span class="keyword">char</span> *relative_to, <span class="keyword">size_t</span> relative_to_len, <span class="keyword">int</span> realpath_mode)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">virtual_file_ex</span>(&amp;new_state, filepath, <span class="literal">NULL</span>, realpath_mode)) &#123;</span><br><span class="line">        <span class="built_in">efree</span>(new_state.cwd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里怎么也有个<code>virtual_file_ex</code>？我们继续走</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/expand_virtual.png" class=""><p>竟然顺利通过了。所以我们可以得出一个小结论：是<code>virtual_file_ex</code>的不一致的表现导致了这个bug。<br>我们进一步来探讨一下这个不一致性是怎么产生的。</p><h3 id="virtual-file-ex">virtual_file_ex</h3><p>在上面的分析中，可以看到<code>tsrm_realpath</code>与<code>expand_filepath</code>在调用<code>virtual_file_ex</code>分别是这么传参的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsrm_realpath</span></span><br><span class="line"><span class="keyword">if</span> (virtual_file_ex(&amp;new_state, path, <span class="literal">NULL</span>, CWD_REALPATH)) &#123;...&#125;</span><br><span class="line"><span class="comment">// expand_filepath</span></span><br><span class="line"><span class="keyword">if</span> (virtual_file_ex(&amp;new_state, path, <span class="literal">NULL</span>, CWD_FILEPATH)) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>这两个宏在源码里是这么解释的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CWD_FILEPATH 1 <span class="comment">/* resolve symlinks if file is exist otherwise expand */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CWD_REALPATH 2 <span class="comment">/* call realpath(), resolve symlinks. File must exist */</span></span></span><br></pre></td></tr></table></figure><p>二者的区别在于REALPATH调用时必须<strong>保证</strong>文件存在，不然就会直接返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (save &amp;&amp; <span class="built_in">php_sys_lstat</span>(path, &amp;st) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (use_realpath == CWD_REALPATH) &#123;</span><br><span class="line">        <span class="comment">/* file not found */</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">size_t</span>)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* continue resolution anyway but don&#x27;t save result in the cache */</span></span><br><span class="line">    save = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lstat">lstat</h3><p>等等，它是怎么判断文件是否存在的？<code>php_sys_lstat</code>是什么？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> php_sys_lstat lstat</span></span><br></pre></td></tr></table></figure><p>也就是说只要<code>lstat(path)</code>小于0，PHP就会认为文件不存在，从而<code>virtual_file_ex(..., CWD_REALPATH)</code>，即<code>tsrm_realpath</code>会出问题，而<code>virtual_file_ex(..., CWD_FILEPATH)</code>虽然&quot;找不到&quot;这个文件，但仍然会返回一个合法的路径。<br>我们再仔细看看<a href="https://linux.die.net/man/3/lstat">lstat在什么情况下会报错</a></p><p>其中有一条就很有趣：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The lstat() function may fail if:</span><br><span class="line"></span><br><span class="line">ELOOP</span><br><span class="line">    More than &#123;SYMLOOP_MAX&#125; symbolic links were encountered</span><br><span class="line">    during resolution of the path argument.</span><br></pre></td></tr></table></figure><p>在网上查阅了大半个世纪，所有人都说这是通过sysconf动态赋值的，只要满足不小于POSIX规定的8即可。可是我找到了一件很搞笑的事情：</p><p><a href="https://github.com/torvalds/linux/search?q=MAXSYMLINKS&amp;unscoped_q=MAXSYMLINKS">https://github.com/torvalds/linux/search?q=MAXSYMLINKS&amp;unscoped_q=MAXSYMLINKS</a></p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/eloop.png" class=""><p>无敌的Linux竟然是把这个值写死成40的，nb，属实nb</p><p>至此，我们有了一个payload，即<code>&quot;/proc/self/root&quot;*21+/flag</code></p><p>payload中：<code>/proc/self/root</code>提供了两层symlink（<code>/proc/self</code>指向<code>/proc/[pid]</code>），也就是说重复21次我们将得到42层symlink，比lstat能够处理的层数多出两层。</p><h2 id="总结">总结</h2><ul><li>在软件开发的过程中，要有一个统一的异常处理机制，不要一会返回0，一会抛异常的</li><li>要和一起写代码的沟通好，写好文档（其实<code>virtual_file_ex</code>上面注释里写了，返回0是正常，1是有错，我估计调用的人就没好好看（逃））</li><li>要保证一个操作的一致性，比如这个<code>require_once</code>就因为内部前后不一致导致了绕过</li></ul><h2 id="备注">备注</h2><ul><li>源码分析基于PHP 7.4.5，截止<a href="https://github.com/php/php-src/blob/44ad2db15fe786b07ce793624885e0c43e0af897/Zend/zend_virtual_cwd.c#L885">8.0.0-beta1</a> php 仍然使用lstat的返回值作为文件是否存在的依据</li><li>在源码分析的过程中还有一个地方可能导致类似的问题，有兴趣的自己看，此处不点明（</li></ul><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"5955d155fe2ea768241e","clientSecret":"f96bbda9ff434950217f24f7f9369f8b8de3b025","repo":"frankli0324.github.io","owner":"frankli0324","admin":["frankli0324"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>