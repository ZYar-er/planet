<blockquote><blockquote>
<p>春天，又到了程序员和ArchLinux交尾的时间。</p>
</blockquote>
<p>原因是这样的，因为傻逼Win11各种奇奇怪怪的Bug、卡顿并且在移动办公过程中耗电量惊人，所以不得不把原本装在移动硬盘里的<del>学习版</del>Ar</blockquote><blockquote><p>春天，又到了程序员和ArchLinux交尾的时间。</p></blockquote><p>原因是这样的，因为傻逼Win11各种奇奇怪怪的Bug、卡顿并且在移动办公过程中耗电量惊人，所以不得不把原本装在移动硬盘里的<del>学习版</del>Arch给迁移到内置硬盘内。还有就是，一些开发程序在Linux下的兼容性要远好于Windows,所以干脆装双系统当生产力了，然后让Win11成为 “SteamOS”。</p><p><strong>此文章主要面向Y9000X安装Archlinux, 涉及到Y9000X的一些特殊适配问题，但是基本上通用。</strong><br><del>主要还是方便我下次炸了，重装系统，看看怎么适配的。</del></p><p>引导U盘用的是Ventory,不再赘述。</p><h2 id="基本系统安装"><a href="#基本系统安装" class="headerlink" title="基本系统安装"></a>基本系统安装</h2><p>首先，进入我们亲爱的archiso内，进行系统的初始化配置。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">步骤1 - 当我们启动电源时，BIOS（基本输入/输出系统）或UEFI（统一可扩展固件接口）固件从非易失性存储器加载，并执行POST（上电自检）。<br><br>步骤2 - BIOS/UEFI检测连接到系统的设备，包括CPU、RAM和存储。<br><br>步骤3 - 选择一个启动设备以从中引导操作系统。这可以是硬盘、网络服务器或光盘驱动器。<br><br>步骤4 - BIOS/UEFI运行引导加载程序（GRUB），该加载程序提供一个菜单，用于选择操作系统或内核功能。<br><br>步骤5 - 内核准备好后，我们现在切换到用户空间。内核启动systemd作为第一个用户空间进程，它管理进程和服务，探测所有剩余的硬件，挂载文件系统，并运行桌面环境。<br><br>步骤6 - systemd默认在系统引导时激活默认的.target单元。其他分析单元也会被执行。<br><br>步骤7 - 系统运行一系列启动脚本并配置环境。<br><br>步骤8 - 用户被呈现出登录窗口。系统现在已经准备就绪。<br><br>内容转自知乎，找不到原文链接了，十分抱歉。<br></code></pre></td></tr></table></figure><p><img src="/images/linux-boot-animation.webp" alt="Linux-boot-animation"></p><p>从上述说明我们可以得出，由于BIOS&#x2F;UEFI等是已经完备的，我们只需要提供bootloader、OS系统内核入口即可。</p><p>综上所述，我们安装系统所做的任务实际上只是制作一个bootloader及OS系统内核入口。</p><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><p>一切的一切追究还是存储在磁盘上，我们需要先从磁盘的分区开始操作。没有磁盘操作，我们无法存储重要的bootloader和内核文件。</p><p>这里我比较喜欢的工具是 cfdisk。</p><ol><li>通过 <code>lsblk</code> 查看磁盘情况</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ lsblk<br>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>nvme0n1     259:0    0 476.9G  0 disk <br>├─nvme0n1p1 259:1    0   260M  0 part <br>├─nvme0n1p2 259:2    0    16M  0 part <br>├─nvme0n1p3 259:3    0   200G  0 part <br>├─nvme0n1p4 259:4    0 274.7G  0 part <br>└─nvme0n1p5 259:5    0     2G  0 part <br>nvme1n1     259:6    0 953.9G  0 disk <br>├─nvme1n1p1 259:7    0    16M  0 part <br>├─nvme1n1p2 259:8    0 390.7G  0 part <br>├─nvme1n1p3 259:9    0     4G  0 part<br>└─nvme1n1p4 259:10   0   559G  0 part <br></code></pre></td></tr></table></figure><ol start="2"><li>选择某一个待安装磁盘进行安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cfdisk /dev/nvme1n1<br></code></pre></td></tr></table></figure><p>分区不需要关注在哪个盘，只需要关注能够挂载哪些分区即可。</p><p>分区需求：</p><ul><li>boot分区 （1-2GB，无特殊需求则留一些就行，type为UFEI System）</li><li>其他分区(除了根目录其他都可选)<ul><li>根分区</li><li>swap</li><li>…</li></ul></li></ul><p>上述的boot分区即是bootloader的存放位置，且其中也会放入内核文件，作为os的内核加载入口；根分区则为你要存放系统文件还有用户文件的地方（可以再单独创建一个home分区）。具体不再赘述，每个人有自己的分配喜好。</p><ol start="3"><li>分区格式化</li></ol><p>boot分区需要格式化为 exFAT 格式，其他的可以自行选择，我选择的是Btrfs支持快照，性能强大。</p><h3 id="分区挂载"><a href="#分区挂载" class="headerlink" title="分区挂载"></a>分区挂载</h3><p>想要持久性地存储肯定是需要储存在硬盘上的，我们需要挂载上我们刚刚分配的分区，并将系统写入硬盘内。</p><p>挂载不再赘述，需要注意分区的类型的影响，尤其是btrfs需要挂载子卷的情况。</p><p>根分区挂载在 &#x2F;mnt，boot分区挂载在 &#x2F;mnt&#x2F;boot。</p><h3 id="GRUB2的安装–安装bootloader"><a href="#GRUB2的安装–安装bootloader" class="headerlink" title="GRUB2的安装–安装bootloader"></a>GRUB2的安装–安装bootloader</h3><ol><li>还是先 pacman -Syu 下（可以提前还源）；<br>可以选择先测速以下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reflactor --sort rate -c China -l 200 --verbose --save /etc/pacman.d/mirrorlist<br></code></pre></td></tr></table></figure><ol start="2"><li>安装grub2到boot分区：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grub-install --efi-directory=/mnt/boot --target=x86_64-efi --bootloader-id=想叫啥叫啥<br></code></pre></td></tr></table></figure><h3 id="系统内核及相关配置"><a href="#系统内核及相关配置" class="headerlink" title="系统内核及相关配置"></a>系统内核及相关配置</h3><p>此时生成同等重要的操作系统核心文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下次联网用</span><br>pacstrap /mnt networkmanager<br><span class="hljs-meta prompt_"># </span><span class="language-bash">系统重要库</span><br>pacstrap /mnt base linux linux-firmware base-devel grub<br><span class="hljs-meta prompt_"># </span><span class="language-bash">intel微码（可选）</span><br>pacstrap /mnt intel-ucode<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到 /mnt 下</span><br>arch-chroot /mnt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加你的用户到<span class="hljs-built_in">sudo</span>(wheel)组</span><br>useradd -m -G whell xxx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">别忘了设置密码</span><br>passwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地化配置，这里我按照英文来，不然可能会出现中文路径等，我懒得管</span><br>vim /etc/locale.gen #取消en_US.UTF-8的注释<br>echo &#x27;LANG=en_US.UTF-8&#x27;  &gt; /etc/locale.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改主机名</span><br>nano /etc/hostname<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成引导配置文件，让grub可以找到你的内核入口</span><br>grub-mkconfig -o /boot/grub/grub.cfg<br>exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成自动挂载文件</span><br>genfstab -U /mnt &gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure><h2 id="桌面环境配置"><a href="#桌面环境配置" class="headerlink" title="桌面环境配置"></a>桌面环境配置</h2><p>操作完上述步骤后，就可以重启进入系统了。但是伟大的arch用户是需要自己安装桌面环境的。</p><p><strong>此文章使用的是kde+wayland，环境为mux方案下的intel+nvidia混显笔记本。</strong></p><p>首先，安装intel的核显驱动，我们暂且搁置傻逼nvidia驱动，把他放在兼容性问题部分介绍；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S mesa lib32-mesa vulkan-intel lib32-vulkan-intel<br></code></pre></td></tr></table></figure><p>然后，安装plasma环境;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Syu<br>pacman -S plasma-meta #安装完整的plasma<br>pacman -S plasma-workspace xdg-desktop-portal<br><span class="hljs-meta prompt_"># </span><span class="language-bash">N卡用户需要额外安装egl-wayland,xdg-desktop-portal包是为了如obs此类工具录制屏幕使用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">xdg-desktop-portal包组提供了不同环境下使用的软件包</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如kde用户可选择xdg-desktop-portal-kde包</span><br>systemctl enable sddm<br></code></pre></td></tr></table></figure><p>然后就可以进入桌面了，其他配置不再赘述。</p><p><strong>需要注意的是fcitx5输入法安装后，可以从系统设置里添加激活，然后在特定文件内写入传统的输入法配置信息，这样子才能在控制台等地方调出输入法。</strong></p><h2 id="Y9000X兼容性问题"><a href="#Y9000X兼容性问题" class="headerlink" title="Y9000X兼容性问题"></a>Y9000X兼容性问题</h2><h3 id="声音问题"><a href="#声音问题" class="headerlink" title="声音问题"></a>声音问题</h3><p>先安装一些声音固件相关的模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S sof-firmware alsa-firmware alsa-ucm-conf  <br></code></pre></td></tr></table></figure><p>然后即使你通过alsa手动开启了扬声器，仍然会发现有声音输出但是扬声器没有声音。</p><p>去Arch Forum可以看到有人发表了相关的问题，是因为Y9000X在声音输出与扬声器间有一个功放模块，这个功放模块应该是与杜比音效相关的，如果没有相关的驱动，功放模块无法运作，导致没有实际的声音输出。</p><p>得益于有位老哥手动从这个功放模块的开源库做了一个dkms版的补丁，现在可以爽用了。</p><p>可以使用yay一键安装这个aur包，其他方式自行搜索这个包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S legion-y9000x-2022-iah7-sound-fix-dkms<br></code></pre></td></tr></table></figure><h3 id="MUX方案支持问题（混显-独显）"><a href="#MUX方案支持问题（混显-独显）" class="headerlink" title="MUX方案支持问题（混显&#x2F;独显）"></a>MUX方案支持问题（混显&#x2F;独显）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">驱动不再赘述，自行选择开源还是闭源的，需要注意zen等自定内核，需要使用dkms版本（一定要安装对应的headers）</span><br>yay -S optimus-manager<br></code></pre></td></tr></table></figure><p>具体的情况可以看我之前的Blog,目前的问题是独显模式下，无法进入桌面吗，但是仍然可以启动其他应用程序。主要还是Optimus-Manger识别不到核显，就直接崩了。</p><p>等完美解决了再续写。linux-wechat-qt</p><h3 id="睡眠后-GPU进入深度睡眠状态无法唤醒"><a href="#睡眠后-GPU进入深度睡眠状态无法唤醒" class="headerlink" title="睡眠后,GPU进入深度睡眠状态无法唤醒"></a>睡眠后,GPU进入深度睡眠状态无法唤醒</h3><p>设置一定时间后进入睡眠状态,可能会导致NVIDIA GPU进入深度睡眠状态,从而无法唤醒,进入SDDM的登陆界面后,会直接卡住,也无法进入TTY,只能进行长按电源强制关机。</p><p>调出系统日志后，可以看到类似这种语句：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">drm error failed to read dpcd register 0x60<br></code></pre></td></tr></table></figure><p>这个问题在2022年已经有人讨论过了，他们给出的解决方案是去更新以下bios,最新的bios可能修复了这个问题，但是我的bios已经是最新的了。</p><p>我发现，我没有在内核参数中增加 <code>ibt=off</code> 可能是这个问题。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">摘自Arch Wiki-Nvidia页<br><br>Note: 470xx and older drivers may not function correctly on Linux 5.18 (or later) on systems with Intel CPUs 11th Gen and newer[dead link 2024-07-30 ⓘ] due an incompatibility with Indirect Branch Tracking. You can disable it by setting the ibt=off kernel parameter from the boot loader. Be aware, this security feature is responsible for mitigating a class of exploit techniques.<br></code></pre></td></tr></table></figure><h2 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h2><p>Office可以用LibreOffice或者去官网下载OnlyOffice的app image。OnlyOffice是只负责兼容Ubuntu的，其他系统不进行兼容配置，在arch下是无法过编译的，因为各种配置问题，所以还是老老实实app image吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">clash</span><br>yay -S clash-verge-rev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份软件</span><br>yay -S timeshift<br></code></pre></td></tr></table></figure><p>其他软件不再赘述，qq用linuxqq,wechat用wechat-uos-qt。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在这场Arch安装+完全配置竞速中，我取得了一天的好成绩。</p><p>一次grub install后忘记grub-mkconfig了，一次忘记mount boot了，一次忘记下载联网工具了，一次忘记设置用户密码了。</p><p>我是Arch低手😭😭😭。</p>