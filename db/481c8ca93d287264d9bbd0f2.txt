<blockquote><img src="https://s2.loli.net/2022/08/01/HuqXCyzwJA3N2kE.jpg" alt="Featured image of post 自己编译 Linux 内核，好像一点用都没有？" /><h2 id="目录">目录</h2>
<ul>
<li>为什么我要自己编译内核～ Linux 内核的多元化</li>
<li>为啥自己编译没用～性能对比和优劣势对比</li>
<li>如何加速内核编译～使用 modprobed-db 精简驱动模块</li>
<li>我到底配置了啥～给大家看看我改过的内核配置</li>
<li>结尾</li>
</ul>
<h2 id="为什么我要自己编译内核-linux-内核的多元化">为什么我要自己编译内核～ Linux 内核的多元化</h2>
<p>很简单，下学期我有门课，叫“操作系统”，据说需要编译内核。实际上我之前编译过，但是我没有接触过设置，这回想看看我能设置啥。<br>
不过我最讨厌学习了，所以接下来的才是真正原因233<br>
我玩《黑山起源》，玩起来很卡。游戏设置当然是调了，但根据我之前压制视频，我觉得是内核没有把我的核显和 CPU 压榨干净(我的电脑是轻薄本)。之前看过很多帖子，说用了特制内核，跑起来能快一些。<br>
这里，我提到了“特制内核”。因为 Linux 内核是开源的，自然，有人魔改了很多版本。这里介绍四个版本：</p>
<ol>
<li>长期支持版(LTS)，为了稳定而优化的版本，相当于 Windows 的 LTSC 版。一般出现在 CentOS 和 Ubuntu 上面。</li>
<li>linux-zen，为了桌面电脑而进行过性能优化。我日用这个版本。</li>
<li>linux-hardened，为了系统安全而优化的版本。</li>
<li>linux-libre，为了代码的绝对自由而砍掉了很多驱动。</li>
</ol>
<p>当然，如果你是为了应付操作系统实验，我建议你还是使用原版吧。首先，网上教程丰富，其次，代码简单易得。</p>
<h2 id="为啥自己编译没用性能对比">为啥自己编译没用～性能对比</h2>
<p>鉴于我编译内核，最主要的出发点是加速游戏运行，自然我得提供这方面的数据了。<br>
我的自制内核，基于 linux-zen 内核，精简了很多没必要的驱动，以及在电脑管理模块强制使用性能模式，并根据我的处理器型号(AMD Ryzen 4750U)，使用了&quot;Zen 2&quot;性能优化。<br>
以下跑分均在我的电脑上进行，型号是 Thinkpad T14 ，系统是最新的 Arch Linux ，在接电情况下进行。<br>
首先是GeekBench(下称GB)的跑分成绩：</p>
<table>
	<tr>
		<th rowspan="2">测试次数</th>
		<th colspan="3">原版 zen 内核</th>
		<th colspan="3">自制 zen 内核</th>
	</tr>
	<tr>
		<th>单核成绩</th>
		<th>多核成绩</th>
		<th>GB 数据库编号</th>
		<th>单核成绩</th>
		<th>多核成绩</th>
		<th>GB 数据库编号</th>
	</tr>
	<tr>
		<td>1</td>
		<td>1204</td>
		<td>5038</td>
		<td>12522767</td>
		<td>1209</td>
		<td>5112</td>
		<td>12523274</td>
	</tr>
	<tr>
		<td>2</td>
		<td>1191</td>
		<td>5090</td>
		<td>12522823</td>
		<td>1209</td>
		<td>5119</td>
		<td>12523312</td>
	</tr>
	<tr>
		<td>3</td>
		<td>1214</td>
		<td>5087</td>
		<td>12522819</td>
		<td>1208</td>
		<td>5109</td>
		<td>12522353</td>
	</tr>
	<tr>
		<td>4</td>
		<td>1206</td>
		<td>5070</td>
		<td>12522915</td>
		<td>1207</td>
		<td>5126</td>
		<td>12523397</td>
	</tr>
	<tr>
		<td>5</td>
		<td>1215</td>
		<td>5086</td>
		<td>12522951</td>
		<td>1204</td>
		<td>5126</td>
		<td>12523431</td>
	</tr>
	<tr>
		<td>6</td>
		<td>1217</td>
		<td>5092</td>
		<td>12522998</td>
		<td>1212</td>
		<td>5098</td>
		<td>12523485</td>
	</tr>
	<tr>
		<td>平均成绩</td>
		<td>1208</td>
		<td>5077</td>
		<td>-</td>
		<td>1208</td>
		<td>5115</td>
		<td>-</td>
	</tr>	
</table>
<p>接下来是《半条命2：失落的海岸线》(与《黑山起源》同为起源引擎)的跑分成绩，单位是 FPS：</p>
<table>
	<tr>
		<th>测试次数</th>
		<th>原版 zen 内核</th>
		<th>自制 zen 内核</th>
	</tr>
	<tr>
		<td>1</td>
		<td>155.31</td>
		<td>151.91</td>
	</tr>
	<tr>
		<td>2</td>
		<td>137.70</td>
		<td>139.08</td>
	</tr>
	<tr>
		<td>3</td>
		<td>137.63</td>
		<td>141.41</td>
	</tr>
	<tr>
		<td>平均FPS</td>
		<td>143.5</td>
		<td>144.1</td>
	</tr>
</table>
<p>由上可见，虽然自编译内核相较原版内核，有一定的性能提升，但是提升幅度不大。而我还发现，使用强制性能模式会导致电脑风扇长时间运行，CPU 过热现象明显。而在新内核下运行《黑山起源》，我觉得流畅度有些微提升，至少没有之前那么卡了。但是我高度怀疑这是某种安慰剂效应。<br>
所以，自行编译内核并没有达到我的需求。但这不意味着我白搞了一通，至少编译内核速度快了。
补充说明：我当时玩的是《黑山起源》的 Linux 版本，那个版本被很多的 ProtonDB 用户评为垃圾水平，因为在 AMDGPU 上会有贴图故障，而且不太更新。详情看这个。
好了，进入我这篇文章的宝藏部分捏。</p>
<h2 id="如何加速内核编译使用-modprobed-db-精简驱动模块">如何加速内核编译～使用 modprobed-db 精简驱动模块</h2>
<p><a class="link" href="https://github.com/graysky2/modprobed-db"  target="_blank" rel="noopener"
    >modprobed-db</a> 是一个 bash 脚本，他能侦测你系统目前所使用的模块，并记录下来。在编译内核的时候，程序只会编译我们使用过的驱动模块，加速编译速度，减少内核体积。</p>
<blockquote>
<p><strong>注意</strong>：使用这个软件，可能会精简驱动过头，导致使用不便。请各位打算使用前，最好稍微了解一下内核配置选项。本人仅在 Arch Linux 下运行过这个软件，如果你用的是 Ubuntu 等系统，使用有问题的话，请跟我说一下。</p>
</blockquote>
<h3 id="过一下编译内核的一般步骤">过一下编译内核的一般步骤</h3>
<ol>
<li>电脑装好编译环境，一般包括 gcc，make 等。Arch Linux 是要安装上 <code>base-devel</code> 软件包组和 <code>gcc</code> 。</li>
<li>你需要拖下来最新稳定版的内核源代码，然后进入源代码文件夹：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone https://mirrors.tuna.tsinghua.edu.cn/git/linux-stable.git <span class="c1"># 这里使用了清华镜像</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> linux-stable
</span></span></code></pre></div><ol start="3">
<li>使用以下任意一个命令，配置内核参数：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ make nconfig <span class="c1"># 命令行界面配置</span>
</span></span><span class="line"><span class="cl">$ make xconfig <span class="c1"># 图形化界面配置(使用 QT )</span>
</span></span></code></pre></div><blockquote>
<p><strong>注意</strong>: 很多教程是用make config配置内核，本人不推荐。界面太原始就算了，在 Arch Wiki 上面被标记为&quot;被 nconfig 取代&quot;</p>
</blockquote>
<p><figure 
	>
	<a href="https://legacy.superbart.top/picture/Compile%20Linux%20Kernel%20is%20Useless/Power%20Preformance.jpg" >
		<img src="https://legacy.superbart.top/picture/Compile%20Linux%20Kernel%20is%20Useless/Power%20Preformance.jpg"
			
			
			
			loading="lazy"
			alt="nconfig长这样">
	</a>
	
	<figcaption>nconfig长这样</figcaption>
	
</figure></p>
<ol start="4">
<li>使用 <code>make -j$n</code> 命令编译，这里 <code>$n</code> 代表你电脑/虚拟机的核心数。</li>
<li>使用以下两个命令来安装内核：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo make module_install <span class="c1"># 安装内核模块</span>
</span></span><span class="line"><span class="cl">$ sudo make install <span class="c1"># 安装内核本身</span>
</span></span></code></pre></div><ol start="6">
<li>重启到新内核，如果没有的话，查看系统引导器设置。</li>
</ol>
<h3 id="使用-modprobed-db-精简内核">使用 modprobed-db 精简内核</h3>
<ol>
<li>获取 modprobed-db 软件。Arch Linux 用户可以使用 AUR 直接安装 <code>modprobed-db</code> 软件包。如果不是的话，根据该软件 Github 所介绍：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone https://github.com/graysky2/modprobed-db
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> modprobed-db
</span></span><span class="line"><span class="cl">$ make
</span></span><span class="line"><span class="cl">$ sudo make install
</span></span></code></pre></div><ol start="2">
<li>获取目前你电脑正在挂载的模块：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ modprobed-db <span class="c1"># 初始化软件</span>
</span></span><span class="line"><span class="cl">$ modprobed-db store <span class="c1"># 获取目前运行模块并保存在一个数据库中</span>
</span></span><span class="line"><span class="cl">$ modprobed-db list <span class="c1"># 列出存在数据库里面，电脑运行过的的内核模块记录</span>
</span></span><span class="line"><span class="cl">$ modprobed-db debug <span class="c1"># 列出目前运行系统模块和数据库记录的异同</span>
</span></span></code></pre></div><ol start="3">
<li>在编译内核的时候，配置内核参数部分，执行这个命令来关掉不需要的模块编译开关。然后编译安装即可。</li>
</ol>
<pre tabindex="0"><code>$ make LSMOD=$HOME/.config/modprobed.db localmodconfig
</code></pre><h3 id="使用提示">使用提示</h3>
<p>如果你是实机运行的话，务必把所有你要使用的设备都使用上。这里我翻译一下<a class="link" href="https://wiki.archlinux.org/title/Modprobed-db#Populating_the_database"  target="_blank" rel="noopener"
    > Arch Wiki 的原文</a>：</p>
<ul>
<li>挂载上所有需要用到的文件系统</li>
<li>接上所有需要用到的可移动媒体，比如U盘，光驱等</li>
<li>以上选项包括挂载 ISO 文件，这个涉及到 loop 模块和 isofs 模块</li>
<li>使用电脑上的所有设备，例如网卡，输入设备，电脑摄像头，移动设备等</li>
<li>使用电脑上的所有应用程序，有些程序是需要特定内核模块来运行的，比如虚拟机</li>
<li>在不同版本/特制的内核上运行 modprobed-db，也许会录入一些其他内核没有的模块</li>
</ul>
<p>我当时没有插上我的光驱，就运行了这个，结果新内核没法读我的光驱:-P</p>
<h2 id="我到底配置了啥给大家看看我改过的内核配置">我到底配置了啥～给大家看看我改过的内核配置</h2>
<p>我上面说过，使用 modprobed-db 的前提是对内核配置有一定了解，至少需要看到选项的时候，脑瓜不疼。(如果你是应付操作系统实验，我看<a class="link" href="https://github.com/LevickCG/Happy-SE-in-XDU/tree/master/OS"  target="_blank" rel="noopener"
    >我们学校的操作系统资料</a>和<a class="link" href="https://moefactory.com/3041.moe"  target="_blank" rel="noopener"
    >小梦哥哥的实验总结</a>的步骤，我觉得你要是在虚拟机下直接搞，应该没有问题)<br>
所以，我来给大家看一下我的内核配置吧，给大家看看我改了什么。这里我用 <code>make nconfig</code> 配置。<br>
第一个选项是总体选项，是包括了内核压缩，特定版本号之类的信息。请看 xmgg 的吧。<br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/jwCd34vDs9EqmiV.jpg" >
		<img src="https://s2.loli.net/2022/08/01/jwCd34vDs9EqmiV.jpg"
			
			
			
			loading="lazy"
			alt="默认界面">
	</a>
	
	<figcaption>默认界面</figcaption>
	
</figure>
这是默认界面，配置程序给了我们一些选项。下面的功能键中，F2可以查看配置选项的详细信息，F9可以搜索配置选项。<br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/MsVvJqoDXEr18RQ.jpg" >
		<img src="https://s2.loli.net/2022/08/01/MsVvJqoDXEr18RQ.jpg"
			
			
			
			loading="lazy"
			alt="处理器类型和特性">
	</a>
	
	<figcaption>处理器类型和特性</figcaption>
	
</figure>
这个地方是配置处理器相关信息的。我这里把很多因特尔处理器的独家特性给删掉了，然后处理器优化强制设置为Zen 2。其他方面的有任务调度之类，我没有动，因为不懂。<br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/MvdYJQ4K5ANZc3D.jpg" >
		<img src="https://s2.loli.net/2022/08/01/MvdYJQ4K5ANZc3D.jpg"
			
			
			
			loading="lazy"
			alt="插入电源管理特性">
	</a>
	
	<figcaption>插入电源管理特性</figcaption>
	
</figure>
这个地方配置电源管理，我开启了休眠和睡眠，然后将CPU频率调整设置为&quot;性能&quot;。<br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/gVZfTyXWjeBE1s4.jpg" >
		<img src="https://s2.loli.net/2022/08/01/gVZfTyXWjeBE1s4.jpg"
			
			
			
			loading="lazy"
			alt="文件系统选项">
	</a>
	
	<figcaption>文件系统选项</figcaption>
	
</figure>
这个地方配置文件系统支持，是精简内核的重中之重，也是一个坑。如果精简过头，可能插个U盘读不出来。尤其注意CD文件系统和DOS文件系统选项。<br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/269QYoNTSOxhRad.jpg" >
		<img src="https://s2.loli.net/2022/08/01/269QYoNTSOxhRad.jpg"
			
			
			
			loading="lazy"
			alt="驱动配置">
	</a>
	
	<figcaption>驱动配置</figcaption>
	
</figure>
这个地方配置驱动选项，基本上编译内核，大部分时间都是在编译驱动。所以，这个地方我们可以大开杀戒。不过千万不要要把你需要用到的驱动给去了。<br>
其他方面，诸如支持32位可执行程序，内核安全算法，调试选项等，我就不说啦。</p>
<h2 id="结尾">结尾</h2>
<p>虽然自己编译内核，没有使游戏性能有很大提升😶<br>
但是我由此得到了提升内核编译的一个途径，这要将来节省时间<del>卷过别人</del>不就很方便了吗🥰<br>
实际上我还给内核打上了<a class="link" href="https://github.com/zhmars/cjktty-patches"  target="_blank" rel="noopener"
    >中文补丁</a>，不过网上很多教程，我就不在这说了。给大家个<a class="link" href="https://zhuanlan.zhihu.com/p/375460344"  target="_blank" rel="noopener"
    >链接</a>看看吧。没记错命令是 <code>patch -Np1 &lt; 补丁文件</code> 。<br>
我还使用了 Arch Linux 的包管理工具，让整个过程更简单。具体看<a class="link" href="https://wiki.archlinux.org/title/Kernel/Arch_Build_System"  target="_blank" rel="noopener"
    >这个</a>。</p>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a class="link" href="https://wiki.archlinux.org/title/Kernel/Traditional_compilation"  target="_blank" rel="noopener"
    >Arch Wiki提供的编译内核指南(多系统适用哦)</a><br>
<a class="link" href="https://moefactory.com/3041.moe"  target="_blank" rel="noopener"
    >小梦哥哥教大家操作系统实验啦</a></p></blockquote>