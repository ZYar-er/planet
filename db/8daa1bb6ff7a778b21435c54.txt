<blockquote><h1 id="Nuxt-3-开发避坑">Nuxt 3 开发避坑<a class="headerlink" href="#Nuxt-3-开发避坑" title="Permanent link">&para;</a></h1>
<!-- more -->

<p>开发个人主页时用了 Nuxt 3。虽然有些坑，但它还是很好用的。</p>
<p>文档：<a href="https://nuxt.com/docs/getting-started/introduction">https://nuxt.com/docs/getting-started/introduction</a>。</p>
<h2 id="解决初始化报错">解决初始化报错<a class="headerlink" href="#解决初始化报错" title="Permanent link">&para;</a></h2>
<p>执行初始化命令后</p>
<div class="highlight"><pre><span></span><code>npx<span class="w"> </span>nuxi@latest<span class="w"> </span>init<span class="w"> </span>&lt;project-name&gt;
</code></pre></div>
<p>显示下面的报错。</p>
<blockquote>
<p>Error: Failed to download template from registry: Failed to download <a href="https://raw.githubusercontent.com/nuxt/starter/templates/templates/v3.json">https://raw.githubusercontent.com/nuxt/starter/templates/templates/v3.json</a>: TypeError: fetch failed</p>
</blockquote>
<p>在 GitHub 上找到了相关的 Issues：<a href="https://github.com/nuxt/cli/issues/159">support http proxy when using <code>nuxi init</code> with node &gt;= 18</a>。其中有人总结了原因：</p>
<blockquote>
<p>The main issue is native fetch API provided by newer Node.js versions (18+), does not support HTTP agents for proxy support.</p>
</blockquote>
<p>简单概括就是它不走代理。目前有 3 种解决方法：</p>
<ol>
<li>改 hosts 文件。这个我不喜欢，跳过。</li>
<li>
<p>换源。有人把相关的文件 clone 到了 gitee 上，设置环境变量</p>
<div class="highlight"><pre><span></span><code><span class="nb">set</span><span class="w"> </span><span class="nv">NUXI_INIT_REGISTRY</span><span class="o">=</span><span class="s2">&quot;https://gitee.com/hzgotb/nuxt-starter/raw/templates/templates&quot;</span>
</code></pre></div>
<p>之后再初始化就可以了。</p>
</li>
<li>
<p>官方目前提供了一个支持代理的版本，但是 nightly 版，还不是正式版。 </p>
<div class="highlight"><pre><span></span><code>npx<span class="w"> </span>nuxi-nightly@latest<span class="w"> </span>init<span class="w"> </span>&lt;project-name&gt;
</code></pre></div>
</li>
<li>
<p>使用 <a href="../../../eadf-afaa-cfcg/">Clash 的 TUN 模式</a>，不用系统代理。</p>
</li>
</ol>
<h2 id="Font-Awesome">Font Awesome<a class="headerlink" href="#Font-Awesome" title="Permanent link">&para;</a></h2>
<h3 id="配置">配置<a class="headerlink" href="#配置" title="Permanent link">&para;</a></h3>
<p>按它的文档做就行：<a href="https://docs.fontawesome.com/web/use-with/vue/use-with#nuxt">https://docs.fontawesome.com/web/use-with/vue/use-with#nuxt</a>。建议把 Integrations/Vue 里的文档全看一下。</p>
<p>需要先装两个核心的包。</p>
<div class="highlight"><pre><span></span><code>npm<span class="w"> </span>i<span class="w"> </span>--save<span class="w"> </span>@fortawesome/fontawesome-svg-core
npm<span class="w"> </span>i<span class="w"> </span>--save<span class="w"> </span>@fortawesome/vue-fontawesome@latest-3
</code></pre></div>
<p>常用的免费 Icon Packages，可以全部安装。</p>
<div class="highlight"><pre><span></span><code>npm<span class="w"> </span>i<span class="w"> </span>--save<span class="w"> </span>@fortawesome/free-solid-svg-icons
npm<span class="w"> </span>i<span class="w"> </span>--save<span class="w"> </span>@fortawesome/free-regular-svg-icons
npm<span class="w"> </span>i<span class="w"> </span>--save<span class="w"> </span>@fortawesome/free-brands-svg-icons
</code></pre></div>
<p>在写它的 plugin 文件时要注意</p>
<div class="highlight"><pre><span></span><code><span class="c1">// For Nuxt 3</span>
<span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">library</span><span class="p">,</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;@fortawesome/fontawesome-svg-core&#39;</span>
<span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">FontAwesomeIcon</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;@fortawesome/vue-fontawesome&#39;</span>
<span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">fas</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;@fortawesome/free-solid-svg-icons&#39;</span>

<span class="c1">// This is important, we are going to let Nuxt worry about the CSS</span>
<span class="nx">config</span><span class="p">.</span><span class="nx">autoAddCss</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span>

<span class="c1">// You can add your icons directly in this plugin. See other examples for how you</span>
<span class="c1">// can add other styles or just individual icons.</span>
<span class="nx">library</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">fas</span><span class="p">)</span>

<span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">defineNuxtPlugin</span><span class="p">((</span><span class="nx">nuxtApp</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">nuxtApp</span><span class="p">.</span><span class="nx">vueApp</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;font-awesome-icon&#39;</span><span class="p">,</span><span class="w"> </span><span class="nx">FontAwesomeIcon</span><span class="p">,</span><span class="w"> </span><span class="p">{})</span>
<span class="p">})</span>

<span class="c1">// Modify the `nuxt.config.ts` file by adding to the `export default defineNuxtConfig()`</span>
<span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">defineNuxtConfig</span><span class="p">({</span>
<span class="w">  </span><span class="nx">css</span><span class="o">:</span><span class="w"> </span><span class="p">[</span>
<span class="w">    </span><span class="s1">&#39;@fortawesome/fontawesome-svg-core/styles.css&#39;</span>
<span class="w">  </span><span class="p">]</span>
<span class="p">})</span>
</code></pre></div>
<p>上面一半代码是写在 <code>plugins/fontawesome.js</code> 里的。下面 <code>export default defineNuxtConfig({...})</code> 里的代码是加在 <code>nuxt.config.ts</code> 里的。</p>
<p>另外不建议像上面一样，直接把一个 <code>IconPack</code> 加进 <code>library</code> 里。最好是只加需要用到的 <code>IconDefinition</code>，这样能显著减小 build 以后的 js 文件大小。</p>
<h3 id="Hydration-Mismatch">Hydration Mismatch<a class="headerlink" href="#Hydration-Mismatch" title="Permanent link">&para;</a></h3>
<p>相关的 Issues：<a href="https://github.com/FortAwesome/vue-fontawesome/issues/394">Nuxt 3: Hydration mismatch when using SSR</a>。开 SSR 时，浏览器控制台会警告 Hydration Mismatch，命令行会提示 <code>Could not find one or more icon(s)</code>。</p>
<p>SSR 还是建议开的，参考：<a href="https://nuxt.com/docs/getting-started/deployment#static-hosting">https://nuxt.com/docs/getting-started/deployment#static-hosting</a>。</p>
<p>最简单粗暴的解决方式是用 <code>&lt;ClientOnly&gt;</code> 标签把 <code>&lt;font-awesome-icon&gt;</code> 包起来，这样服务端就不渲染了，自然就没有 Mismatch 了。（</p>
<p>另一种更好的解决方法来自 Discussions：<a href="https://github.com/nuxt/nuxt/discussions/16014">Using FontAwesome in Nuxt 3</a>。虽然他们讨论的是另一个问题，但也能解决我这里的问题。根据 Answer 里的第一条回复，把引入的所有 Font Awesome 包都写进 <code>nuxt.config.ts</code> 的 <code>build.transpile</code> 中。</p>
<div class="highlight"><pre><span></span><code><span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">defineNuxtConfig</span><span class="p">({</span>
<span class="w">  </span><span class="nx">build</span><span class="o">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">transpile</span><span class="o">:</span><span class="w"> </span><span class="p">[</span>
<span class="w">      </span><span class="s1">&#39;@fortawesome/vue-fontawesome&#39;</span><span class="p">,</span>
<span class="w">      </span><span class="s1">&#39;@fortawesome/fontawesome-svg-core&#39;</span><span class="p">,</span>
<span class="w">      </span><span class="s1">&#39;@fortawesome/free-brands-svg-icons&#39;</span><span class="p">,</span>
<span class="w">      </span><span class="s1">&#39;@fortawesome/free-regular-svg-icons&#39;</span><span class="p">,</span>
<span class="w">      </span><span class="s1">&#39;@fortawesome/free-solid-svg-icons&#39;</span><span class="p">,</span>
<span class="w">    </span><span class="p">]</span>
<span class="w">  </span><span class="p">}</span>
<span class="p">})</span>
</code></pre></div>
<blockquote>
<p>If you're curious, like I was, about <em>why</em> we need to transpile @fortawesome/vue-fontawesome in order to avoid this SSR hydration mismatch, it's because the module field in the package.json file from @fortawesome/vue-fontawesome specifies index.es.js as the entry point (<a href="https://github.com/FortAwesome/vue-fontawesome/blob/3.x/package.json#L20">link</a>) but package.json doesn't specify <code>"type": "module"</code> so Node treats this file as a CommonJS module. But index.es.js actually uses ESM syntax, so Node fails to load it and thus the <code>&lt;FontAwesomeIcon&gt;</code> component fails to render on the server since it's not defined.</p>
<p>The Nuxt documentation does an excellent job documenting this problem:</p>
<p>https://nuxt.com/docs/guide/concepts/esm#what-kinds-of-problems-can-there-be</p>
<p>So until @fortawesome/vue-fontawesome is updated to correct this issue, simply configure Nuxt to transpile @fortawesome/vue-fontawesome:</p>
<p><div class="highlight"><pre><span></span><code><span class="nx">build</span><span class="o">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">transpile</span><span class="o">:</span><span class="w"> </span><span class="p">[</span>
<span class="w">    </span><span class="s1">&#39;@fortawesome/vue-fontawesome&#39;</span><span class="p">,</span>
<span class="w">  </span><span class="p">],</span>
<span class="p">},</span>
</code></pre></div>
<sup id="fnref:1"><a class="footnote-ref" href="#fn:1">1</a></sup></p>
</blockquote>
<h2 id="设置页面-head-信息">设置页面 head 信息<a class="headerlink" href="#设置页面-head-信息" title="Permanent link">&para;</a></h2>
<p>文档 <a href="https://nuxt.com/docs/getting-started/seo-meta#usehead">https://nuxt.com/docs/getting-started/seo-meta#usehead</a> 里推荐用 <code>usehead</code> 来实现。它是 <a href="https://unhead.unjs.io/">Unhead</a> 提供的，现在已经被 Nuxt 内置了，直接用就行。</p>
<h2 id="AppConfig">AppConfig<a class="headerlink" href="#AppConfig" title="Permanent link">&para;</a></h2>
<h3 id="useAppConfig-的代码提示"><code>useAppConfig()</code> 的代码提示<a class="headerlink" href="#useAppConfig-的代码提示" title="Permanent link">&para;</a></h3>
<p>文档 <a href="https://nuxt.com/docs/guide/directory-structure/app-config#typing-app-config">https://nuxt.com/docs/guide/directory-structure/app-config#typing-app-config</a> 中提到 Nuxt 会自动生成 <code>app.config.ts</code> 的类型信息。</p>
<p>实际使用时，以 VSCode 为例，需要重启编辑器才能生效。</p>
<h3 id="AppConfig-的限制">AppConfig 的限制<a class="headerlink" href="#AppConfig-的限制" title="Permanent link">&para;</a></h3>
<p><code>useAppConfig()</code> 返回的是配置对象的 Reactive Proxy，所以和 Vue 的 <code>reactive()</code> 有一样的限制。具体可以参考 Vue 的文档 <a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#limitations-of-reactive"><code>reactive()</code> 的局限性</a>。</p>
<h2 id="纯静态部署到-Vercel">纯静态部署到 Vercel<a class="headerlink" href="#纯静态部署到-Vercel" title="Permanent link">&para;</a></h2>
<p>把 Nuxt 3 项目部署到 Vercel 时，默认是部署了一个叫 <code>__nitro</code> 的 Serverless Function。用户访问时，<code>__nitro</code> 就会被调用，然后返回对应的页面。</p>
<p>实际用了几天后，我发现每隔一段时间访问网站时，请求的耗时会显著增加。背后的原因，大概是每过一段时间 <code>__nitro</code> 就会把 cache 给失效掉，然后重新渲染整个页面，所以耗时比较长。对于我的没什么功能的小网站来说，这些步骤完全是多余的，还给用户带来了负面的体验，所以我决定直接静态化部署网站。</p>
<p><a href="https://vercel.com/docs/frameworks/nuxt#static-rendering">Vercel 的文档</a> 中提到了用 <code>nuxt generate</code> 和 <code>nuxt build</code>（默认）部署时的不同做法，但是后面一种我自己试的时候失败了，所以就用了前一种。流程很简单：</p>
<ol>
<li>
<p>修改 <code>nuxt.config.ts</code></p>
<div class="highlight"><pre><span></span><code><span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">defineNuxtConfig</span><span class="p">({</span>
<span class="w">  </span><span class="nx">nitro</span><span class="o">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">static</span><span class="o">:</span><span class="w"> </span><span class="kt">true</span><span class="p">,</span>
<span class="w">  </span><span class="p">},</span>
<span class="p">});</span>
</code></pre></div>
</li>
<li>
<p>在 Vercel 上去项目 Settings 面板重写 <code>Build Command</code> 为 <code>npm run generate</code>（或 <code>nuxt generate</code>）</p>
</li>
</ol>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="https://github.com/FortAwesome/vue-fontawesome/issues/394#issuecomment-2092933896">https://github.com/FortAwesome/vue-fontawesome/issues/394#issuecomment-2092933896</a>&#160;<a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div></blockquote>