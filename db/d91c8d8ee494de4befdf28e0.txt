<blockquote><p>相关文章：《<a href="/2023/09/05/aether-in-android/" title="Aether在Android中的适配探索">Aether在Android中的适配探索</a>》</p>
<p><strong>本文所用Aether版本为1.1.0。<</blockquote><p>相关文章：《<a href="/2023/09/05/aether-in-android/" title="Aether在Android中的适配探索">Aether在Android中的适配探索</a>》</p><p><strong>本文所用Aether版本为1.1.0。</strong></p><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>Aether作为一个具有依赖注入(Dependency Injection)设计思想的库，它的主体System只能接受所依赖工具的interface实现，所以我们在调用前需要完成所需工具类的初始化(或是指定类，由Aether进行主动实例化)。</p><p>Aether提供了<code>org.apache.maven.repository.internal.MavenRepositorySystemUtils</code>工具类以方便快速配置，虽然但是，我们仍需创建一个Factory来封装完整的初始化逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.maven.repository.internal.MavenRepositorySystemUtils;<br><span class="hljs-keyword">import</span> org.eclipse.aether.connector.wagon.WagonProvider;<br><span class="hljs-keyword">import</span> org.eclipse.aether.connector.wagon.WagonRepositoryConnectorFactory;<br><br>...<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RepositorySystem <span class="hljs-title function_">newRepositorySystem</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">DefaultServiceLocator</span> <span class="hljs-variable">locator</span> <span class="hljs-operator">=</span> MavenRepositorySystemUtils.newServiceLocator();<br>        locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );<br>        locator.addService( TransporterFactory.class, FileTransporterFactory.class );<br>        locator.addService( TransporterFactory.class, HttpTransporterFactory.class );<br><br>        <span class="hljs-keyword">return</span> locator.getService( RepositorySystem.class );<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RepositorySystemSession <span class="hljs-title function_">newSession</span><span class="hljs-params">( RepositorySystem system )</span><br>    &#123;<br>        <span class="hljs-type">DefaultRepositorySystemSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MavenRepositorySystemUtils.newSession();<br><br>        <span class="hljs-type">LocalRepository</span> <span class="hljs-variable">localRepo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalRepository</span>(<span class="hljs-string">&quot;依赖库文件储存路径&quot;</span>);<br>        session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo));<br><br>        <span class="hljs-keyword">return</span> session;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><p>完成初始化逻辑封装后，假如需要下载一个远程依赖(例如,<code>org.apache.maven:maven-profile:2.2.1</code>)我们只需:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>        <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">RepositorySystem</span> <span class="hljs-variable">repoSystem</span> <span class="hljs-operator">=</span> newRepositorySystem();<br><br>        <span class="hljs-type">RepositorySystemSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> newSession( repoSystem );<br><br>        <span class="hljs-type">Dependency</span> <span class="hljs-variable">dependency</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dependency</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultArtifact</span>( <span class="hljs-string">&quot;org.apache.maven:maven-profile:2.2.1&quot;</span> ), <span class="hljs-string">&quot;compile&quot;</span> );<br>        <span class="hljs-type">RemoteRepository</span> <span class="hljs-variable">central</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteRepository</span>.Builder( <span class="hljs-string">&quot;central&quot;</span>, <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;http://repo1.maven.org/maven2/&quot;</span> ).build();<br><br>        <span class="hljs-type">CollectRequest</span> <span class="hljs-variable">collectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectRequest</span>();<br>        collectRequest.setRoot( dependency );<br>        collectRequest.addRepository( central );<br>        <span class="hljs-type">DependencyNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> repoSystem.collectDependencies( session, collectRequest ).getRoot();<br><br>        <span class="hljs-type">DependencyRequest</span> <span class="hljs-variable">dependencyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DependencyRequest</span>();<br>        dependencyRequest.setRoot( node );<br><br>        repoSystem.resolveDependencies( session, dependencyRequest  );<br><br>        <span class="hljs-type">PreorderNodeListGenerator</span> <span class="hljs-variable">nlg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreorderNodeListGenerator</span>();<br>        node.accept( nlg );<br>        System.out.println( nlg.getClassPath() );<br>    &#125;<br></code></pre></td></tr></table></figure><p>运行后，便可在设置的本地仓库(Local Repository)文件夹下找到已下载的依赖库文件。</p><p>具体代码的内容也很清晰易懂：<br>首先，Factory完成的是仓库连接与传输、本地仓库缓存的配置设置；</p><p>在main()方法内，初始化system(Repository系统及其功能的主要入口点)以及session(定义控制Repository系统的设置和组件)，再创建一个Dependency(需要下载的依赖)；</p><p>依赖必定需要从MavenRepository内查找，所以我们还需要RemoteRepository作为指定的远程仓库(注意：RemoteRepository可以同时添加多个，会依次查找)；</p><p>进行Dependency的下载前，需要构建其依赖关系树，以下载其及其所需子依赖，构建依赖关系树前需要查询，则下一步进行的是CollectRequest，设置其rootDependency为所需依赖(必定为依赖树的root)，并添加需要查找的RemoteRepository；</p><p>下一步即为依赖树的构建，repoSystem.collectDependencies()获取DependencyResult,再调用DependencyResult.getRoot()获取树的根节点，得到依赖树；</p><p>DependencyRequest用于初始化一个Dependency下载请求，设置root为刚刚得到的依赖树根节点即可，调用RepositorySystem.resolveDependencies(session,dependencyRequest)即可进行下载工作。可能会比较疑惑下载到哪里了，实际上可以知道在newSystemSession()方法内，我们进行session的初始化时已经设置了LocalRepository作为本地仓库，即缓存文件存放位置。</p><p>Tips: 最后的PreorderNodeListGenerator实质上不会对依赖下载产生影响，只是官方提供的一个遍历依赖树的示例。</p><h2 id="Aether开发逻辑介绍"><a href="#Aether开发逻辑介绍" class="headerlink" title="Aether开发逻辑介绍"></a>Aether开发逻辑介绍</h2><p>API部分建议自行浏览Aether的源代码，只需要了解基本的开发逻辑，则根据名字以及注释很容易上手。</p><ul><li>Aether使用的是依赖注入(Dependency Injection)这一设计模式，在使用RepositorySystem之前，必须从DefaultServiceLocator中进行初始化。DefaultServiceLocator在初始化时便以默认配置了需要类，我们按需添加缺失的必要类即可。在完成配置之后，Aether会通过DefaultServiceLocator.getService()方法得到需要的interface(当然是已经实例化的)，所以我们可以通过addService()在不修改Aether代码的情况下，更改一些核心逻辑，实现高度的自定义化；同时需要强调的是，我们也应该通过DefaultServiceLocator.getService()进行所需interface的获取。</li><li>Aether的所有操作基本上都是先创建一个XxxRequest，然后通过System执行对应的操作逻辑，结果是返回一个XxxResult。例如，Get Started代码中main()方法内的CollectRequest和DependencyRequest。且XxxRequest为Final Class，自行初始化即可。</li><li>特别注意，RepositorySystem需要通过DefaultServiceLocator得到的，通过依赖注入，RepositorySystem会自动获取DefaultServiceLocator中所需要的类；RepositorySystemSession则是配置信息的载体，需要自己通过代码设置配置信息。</li></ul><h2 id="常见操作需求"><a href="#常见操作需求" class="headerlink" title="常见操作需求"></a>常见操作需求</h2><h3 id="下载Dependency"><a href="#下载Dependency" class="headerlink" title="下载Dependency"></a>下载Dependency</h3><p>见 <a href="#get-started">Get Started</a> 不再赘述。</p><h3 id="获取某一Artifact的缓存路径"><a href="#获取某一Artifact的缓存路径" class="headerlink" title="获取某一Artifact的缓存路径"></a>获取某一Artifact的缓存路径</h3><ol><li>通过RepositorySystemSession.getLocalRepositoryManager()获取LocalRepositoryManager;</li><li>调用LocalRepositoryManager.getPathForLocalArtifact()</li></ol><h2 id="常见Model的初始化"><a href="#常见Model的初始化" class="headerlink" title="常见Model的初始化"></a>常见Model的初始化</h2><ol><li>Artifact<br>调用DefaultArtifact的构造方法即可，需要传入coords(坐标，诸如org.apache.maven:maven-profile:2.2.1格式)，也有其他构造方法，具体自行浏览API。</li><li>Dependency<br>调用Dependency的构造方法，并传入Artifact及scope(<a href="https://www.baeldung.com/maven-dependency-scopes">Maven Scope</a>)等参数即可。</li></ol><h2 id="常见问题-已解决"><a href="#常见问题-已解决" class="headerlink" title="常见问题(已解决)"></a>常见问题(已解决)</h2><h3 id="无法自动识别依赖文件类型为AAR的Artifact"><a href="#无法自动识别依赖文件类型为AAR的Artifact" class="headerlink" title="无法自动识别依赖文件类型为AAR的Artifact"></a>无法自动识别依赖文件类型为AAR的Artifact</h3><p>因为我的初衷是用在android ide上，下载aar文件是不可避免的，但是从<code>org.eclipse.aether.artifact.DefaultArtifact</code>的构造方法可以看到(见下面的代码)，默认的extension是jar，并且extension是final修饰的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultArtifact</span><span class="hljs-params">(String coords, Map&lt;String, String&gt; properties)</span> &#123;<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> COORDINATE_PATTERN.matcher(coords);<br>        <span class="hljs-keyword">if</span> (!m.matches()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Bad artifact coordinates &quot;</span> + coords<br>                    + <span class="hljs-string">&quot;, expected format is &lt;groupId&gt;:&lt;artifactId&gt;[:&lt;extension&gt;[:&lt;classifier&gt;]]:&lt;version&gt;&quot;</span>);<br>        &#125;<br>        groupId = m.group(<span class="hljs-number">1</span>);<br>        artifactId = m.group(<span class="hljs-number">2</span>);<br>        extension = get(m.group(<span class="hljs-number">4</span>), <span class="hljs-string">&quot;jar&quot;</span>); <span class="hljs-comment">//this line</span><br>        classifier = get(m.group(<span class="hljs-number">6</span>), <span class="hljs-string">&quot;&quot;</span>);<br>        version = m.group(<span class="hljs-number">7</span>);<br>        file = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.properties = copyProperties(properties);<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><p>可能到这里会想，那就在coords里指明extension不就可以了吗？很遗憾，测试后，你会发现这个根依赖倒是下载了，但是其子依赖仍然无法正确的识别文件类型。</p><p>接下来我们从源码的层面分析一下：</p><p>首先，根据上文的研究，Collect阶段会进行依赖树的构建，我们以此为入口，分析子依赖的构建过程。需要注意的是interface对应的默认impl类为DefaultXxx，比如RepositorySystem对应的默认impl类为DefaultRepositorySystem。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.eclipse.aether.internal.impl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultRepositorySystem</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RepositorySystem</span>, Service &#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CollectResult <span class="hljs-title function_">collectDependencies</span><span class="hljs-params">(RepositorySystemSession session, CollectRequest request)</span><br>            <span class="hljs-keyword">throws</span> DependencyCollectionException &#123;<br>        validateSession(session);<br>        requireNonNull(request, <span class="hljs-string">&quot;request cannot be null&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> dependencyCollector.collectDependencies(session, request);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到dependencyCollector.collectDependencies()执行了具体的操作，从dependencyCollector的初始化代码以及DefaultServiceLocator的相关代码，得知默认impl类为org.eclipse.aether.internal.impl.collect.DefaultDependencyCollector，继续往下追踪。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultDependencyCollector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DependencyCollector</span>, Service &#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CollectResult <span class="hljs-title function_">collectDependencies</span><span class="hljs-params">(RepositorySystemSession session, CollectRequest request)</span><br>            <span class="hljs-keyword">throws</span> DependencyCollectionException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">delegateName</span> <span class="hljs-operator">=</span> ConfigUtils.getString(session, DEFAULT_COLLECTOR_IMPL, CONFIG_PROP_COLLECTOR_IMPL);<br>        <span class="hljs-type">DependencyCollectorDelegate</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> delegates.get(delegateName);<br>        <span class="hljs-keyword">if</span> (delegate == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                    <span class="hljs-string">&quot;Unknown collector impl: &#x27;&quot;</span> + delegateName + <span class="hljs-string">&quot;&#x27;, known implementations are &quot;</span> + delegates.keySet());<br>        &#125;<br>        <span class="hljs-keyword">return</span> delegate.collectDependencies(session, request);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>好好好，继续套娃操作，看代码知默认是深度优先<code>org.eclipse.aether.internal.impl.collect.df.DfDependencyCollector</code>，并且DependencyCollectorDelegate会利用collectDependencies()包装了DependencyCollector.doCollectDependencies()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DependencyCollectorDelegate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DependencyCollector</span> &#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> CollectResult <span class="hljs-title function_">collectDependencies</span><span class="hljs-params">(RepositorySystemSession session, CollectRequest request)</span><br>            <span class="hljs-keyword">throws</span> DependencyCollectionException &#123;<br>        requireNonNull(session, <span class="hljs-string">&quot;session cannot be null&quot;</span>);<br>        requireNonNull(request, <span class="hljs-string">&quot;request cannot be null&quot;</span>);<br>        session = optimizeSession(session);<br><br>        <span class="hljs-type">RequestTrace</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> RequestTrace.newChild(request.getTrace(), request);<br><br>        <span class="hljs-type">CollectResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectResult</span>(request);<br><br>        <span class="hljs-type">DependencyTraverser</span> <span class="hljs-variable">depTraverser</span> <span class="hljs-operator">=</span> session.getDependencyTraverser();<br>        <span class="hljs-type">VersionFilter</span> <span class="hljs-variable">verFilter</span> <span class="hljs-operator">=</span> session.getVersionFilter();<br><br>        <span class="hljs-type">Dependency</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> request.getRoot();<br>        List&lt;RemoteRepository&gt; repositories = request.getRepositories();<br>        List&lt;Dependency&gt; dependencies = request.getDependencies();<br>        List&lt;Dependency&gt; managedDependencies = request.getManagedDependencies();<br><br>        Map&lt;String, Object&gt; stats = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.nanoTime();<br><br>        DefaultDependencyNode node;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Version</span>&gt; versions;<br>            VersionRangeResult rangeResult;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">VersionRangeRequest</span> <span class="hljs-variable">rangeRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionRangeRequest</span>(<br>                        root.getArtifact(), request.getRepositories(), request.getRequestContext());<br>                rangeRequest.setTrace(trace);<br>                rangeResult = versionRangeResolver.resolveVersionRange(session, rangeRequest);<br>                versions = filterVersions(root, rangeResult, verFilter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultVersionFilterContext</span>(session));<br>            &#125; <span class="hljs-keyword">catch</span> (VersionRangeResolutionException e) &#123;<br>                result.addException(e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DependencyCollectionException</span>(result, e.getMessage());<br>            &#125;<br><br>            <span class="hljs-type">Version</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> versions.get(versions.size() - <span class="hljs-number">1</span>);<br>            root = root.setArtifact(root.getArtifact().setVersion(version.toString()));<br><br>            ArtifactDescriptorResult descriptorResult; <span class="hljs-comment">//关键代码</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ArtifactDescriptorRequest</span> <span class="hljs-variable">descriptorRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorRequest</span>();<br>                descriptorRequest.setArtifact(root.getArtifact());<br>                descriptorRequest.setRepositories(request.getRepositories());<br>                descriptorRequest.setRequestContext(request.getRequestContext());<br>                descriptorRequest.setTrace(trace);<br>                <span class="hljs-keyword">if</span> (isLackingDescriptor(root.getArtifact())) &#123;<br>                    descriptorResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorResult</span>(descriptorRequest);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    descriptorResult = descriptorReader.readArtifactDescriptor(session, descriptorRequest);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ArtifactDescriptorException e) &#123;<br>                result.addException(e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DependencyCollectionException</span>(result, e.getMessage());<br>            &#125;<br><br>            root = root.setArtifact(descriptorResult.getArtifact());<br><br>            <span class="hljs-keyword">if</span> (!session.isIgnoreArtifactDescriptorRepositories()) &#123;<br>                repositories = remoteRepositoryManager.aggregateRepositories(<br>                        session, repositories, descriptorResult.getRepositories(), <span class="hljs-literal">true</span>);<br>            &#125;<br>            dependencies = mergeDeps(dependencies, descriptorResult.getDependencies());<br>            managedDependencies = mergeDeps(managedDependencies, descriptorResult.getManagedDependencies());<br><br>            node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultDependencyNode</span>(root);<br>            node.setRequestContext(request.getRequestContext());<br>            node.setRelocations(descriptorResult.getRelocations());<br>            node.setVersionConstraint(rangeResult.getVersionConstraint());<br>            node.setVersion(version);<br>            node.setAliases(descriptorResult.getAliases());<br>            node.setRepositories(request.getRepositories());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultDependencyNode</span>(request.getRootArtifact());<br>            node.setRequestContext(request.getRequestContext());<br>            node.setRepositories(request.getRepositories());<br>        &#125;<br><br>        result.setRoot(node);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">traverse</span> <span class="hljs-operator">=</span> root == <span class="hljs-literal">null</span> || depTraverser == <span class="hljs-literal">null</span> || depTraverser.traverseDependency(root);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (traverse &amp;&amp; !dependencies.isEmpty()) &#123;<br>            <span class="hljs-type">DataPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataPool</span>(session);<br><br>            <span class="hljs-type">DefaultDependencyCollectionContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultDependencyCollectionContext</span>(<br>                    session, request.getRootArtifact(), root, managedDependencies);<br><br>            <span class="hljs-type">DefaultVersionFilterContext</span> <span class="hljs-variable">versionContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultVersionFilterContext</span>(session);<br><br>            <span class="hljs-type">Results</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Results</span>(result, session);<br><br>            doCollectDependencies(<br>                    session,<br>                    trace,<br>                    pool,<br>                    context,<br>                    versionContext,<br>                    request,<br>                    node,<br>                    repositories,<br>                    dependencies,<br>                    managedDependencies,<br>                    results);<br><br>            errorPath = results.getErrorPath();<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.nanoTime();<br><br>        <span class="hljs-type">DependencyGraphTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> session.getDependencyGraphTransformer();<br>        <span class="hljs-keyword">if</span> (transformer != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">DefaultDependencyGraphTransformationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultDependencyGraphTransformationContext</span>(session);<br>                context.put(TransformationContextKeys.STATS, stats);<br>                result.setRoot(transformer.transformGraph(node, context));<br>            &#125; <span class="hljs-keyword">catch</span> (RepositoryException e) &#123;<br>                result.addException(e);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time3</span> <span class="hljs-operator">=</span> System.nanoTime();<br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            stats.put(getClass().getSimpleName() + <span class="hljs-string">&quot;.collectTime&quot;</span>, time2 - time1);<br>            stats.put(getClass().getSimpleName() + <span class="hljs-string">&quot;.transformTime&quot;</span>, time3 - time2);<br>            logger.debug(<span class="hljs-string">&quot;Dependency collection stats &#123;&#125;&quot;</span>, stats);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (errorPath != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DependencyCollectionException</span>(result, <span class="hljs-string">&quot;Failed to collect dependencies at &quot;</span> + errorPath);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!result.getExceptions().isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DependencyCollectionException</span>(result);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DfDependencyCollector</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DependencyCollectorDelegate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCollectDependencies</span><span class="hljs-params">(</span><br><span class="hljs-params">            RepositorySystemSession session,</span><br><span class="hljs-params">            RequestTrace trace,</span><br><span class="hljs-params">            DataPool pool,</span><br><span class="hljs-params">            DefaultDependencyCollectionContext context,</span><br><span class="hljs-params">            DefaultVersionFilterContext versionContext,</span><br><span class="hljs-params">            CollectRequest request,</span><br><span class="hljs-params">            DependencyNode node,</span><br><span class="hljs-params">            List&lt;RemoteRepository&gt; repositories,</span><br><span class="hljs-params">            List&lt;Dependency&gt; dependencies,</span><br><span class="hljs-params">            List&lt;Dependency&gt; managedDependencies,</span><br><span class="hljs-params">            Results results)</span> &#123;<br>        <span class="hljs-type">NodeStack</span> <span class="hljs-variable">nodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeStack</span>();<br>        nodes.push(node);<br><br>        <span class="hljs-type">Args</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Args</span>(session, pool, nodes, context, versionContext, request);<br><br>        process(<br>                args,<br>                trace,<br>                results,<br>                dependencies,<br>                repositories,<br>                session.getDependencySelector() != <span class="hljs-literal">null</span><br>                        ? session.getDependencySelector().deriveChildSelector(context)<br>                        : <span class="hljs-literal">null</span>,<br>                session.getDependencyManager() != <span class="hljs-literal">null</span><br>                        ? session.getDependencyManager().deriveChildManager(context)<br>                        : <span class="hljs-literal">null</span>,<br>                session.getDependencyTraverser() != <span class="hljs-literal">null</span><br>                        ? session.getDependencyTraverser().deriveChildTraverser(context)<br>                        : <span class="hljs-literal">null</span>,<br>                session.getVersionFilter() != <span class="hljs-literal">null</span> ? session.getVersionFilter().deriveChildFilter(context) : <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-keyword">final</span> Args args,</span><br><span class="hljs-params">            RequestTrace trace,</span><br><span class="hljs-params">            Results results,</span><br><span class="hljs-params">            List&lt;Dependency&gt; dependencies,</span><br><span class="hljs-params">            List&lt;RemoteRepository&gt; repositories,</span><br><span class="hljs-params">            DependencySelector depSelector,</span><br><span class="hljs-params">            DependencyManager depManager,</span><br><span class="hljs-params">            DependencyTraverser depTraverser,</span><br><span class="hljs-params">            VersionFilter verFilter)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Dependency dependency : dependencies) &#123;<br>            processDependency(<br>                    args, trace, results, repositories, depSelector, depManager, depTraverser, verFilter, dependency);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDependency</span><span class="hljs-params">(</span><br><span class="hljs-params">            Args args,</span><br><span class="hljs-params">            RequestTrace trace,</span><br><span class="hljs-params">            Results results,</span><br><span class="hljs-params">            List&lt;RemoteRepository&gt; repositories,</span><br><span class="hljs-params">            DependencySelector depSelector,</span><br><span class="hljs-params">            DependencyManager depManager,</span><br><span class="hljs-params">            DependencyTraverser depTraverser,</span><br><span class="hljs-params">            VersionFilter verFilter,</span><br><span class="hljs-params">            Dependency dependency)</span> &#123;<br><br>        List&lt;Artifact&gt; relocations = Collections.emptyList();<br>        processDependency(<br>                args,<br>                trace,<br>                results,<br>                repositories,<br>                depSelector,<br>                depManager,<br>                depTraverser,<br>                verFilter,<br>                dependency,<br>                relocations,<br>                <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDependency</span><span class="hljs-params">(</span><br><span class="hljs-params">            Args args,</span><br><span class="hljs-params">            RequestTrace parent,</span><br><span class="hljs-params">            Results results,</span><br><span class="hljs-params">            List&lt;RemoteRepository&gt; repositories,</span><br><span class="hljs-params">            DependencySelector depSelector,</span><br><span class="hljs-params">            DependencyManager depManager,</span><br><span class="hljs-params">            DependencyTraverser depTraverser,</span><br><span class="hljs-params">            VersionFilter verFilter,</span><br><span class="hljs-params">            Dependency dependency,</span><br><span class="hljs-params">            List&lt;Artifact&gt; relocations,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> disableVersionManagement)</span> &#123;<br>        <span class="hljs-keyword">if</span> (depSelector != <span class="hljs-literal">null</span> &amp;&amp; !depSelector.selectDependency(dependency)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">RequestTrace</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> collectStepTrace(parent, args.request.getRequestContext(), args.nodes.nodes, dependency);<br>        <span class="hljs-type">PremanagedDependency</span> <span class="hljs-variable">preManaged</span> <span class="hljs-operator">=</span><br>                PremanagedDependency.create(depManager, dependency, disableVersionManagement, args.premanagedState);<br>        dependency = preManaged.getManagedDependency();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">noDescriptor</span> <span class="hljs-operator">=</span> isLackingDescriptor(dependency.getArtifact());<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">traverse</span> <span class="hljs-operator">=</span> !noDescriptor &amp;&amp; (depTraverser == <span class="hljs-literal">null</span> || depTraverser.traverseDependency(dependency));<br><br>        List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Version</span>&gt; versions;<br>        VersionRangeResult rangeResult;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">VersionRangeRequest</span> <span class="hljs-variable">rangeRequest</span> <span class="hljs-operator">=</span><br>                    createVersionRangeRequest(args.request.getRequestContext(), trace, repositories, dependency);<br><br>            rangeResult = cachedResolveRangeResult(rangeRequest, args.pool, args.session);<br><br>            versions = filterVersions(dependency, rangeResult, verFilter, args.versionContext);<br>        &#125; <span class="hljs-keyword">catch</span> (VersionRangeResolutionException e) &#123;<br>            results.addException(dependency, e, args.nodes.nodes);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Version version : versions) &#123;<br>            <span class="hljs-type">Artifact</span> <span class="hljs-variable">originalArtifact</span> <span class="hljs-operator">=</span> dependency.getArtifact().setVersion(version.toString());<br>            <span class="hljs-type">Dependency</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> dependency.setArtifact(originalArtifact);<br><br>            <span class="hljs-type">ArtifactDescriptorRequest</span> <span class="hljs-variable">descriptorRequest</span> <span class="hljs-operator">=</span><br>                    createArtifactDescriptorRequest(args.request.getRequestContext(), trace, repositories, d);<span class="hljs-comment">//关键代码</span><br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ArtifactDescriptorResult</span> <span class="hljs-variable">descriptorResult</span> <span class="hljs-operator">=</span><br>                    getArtifactDescriptorResult(args, results, noDescriptor, d, descriptorRequest);<span class="hljs-comment">//关键代码</span><br>            <span class="hljs-keyword">if</span> (descriptorResult != <span class="hljs-literal">null</span>) &#123;<br>                d = d.setArtifact(descriptorResult.getArtifact());<br><br>                <span class="hljs-type">DependencyNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> args.nodes.top();<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">cycleEntry</span> <span class="hljs-operator">=</span> DefaultDependencyCycle.find(args.nodes.nodes, d.getArtifact());<br>                <span class="hljs-keyword">if</span> (cycleEntry &gt;= <span class="hljs-number">0</span>) &#123;<br>                    results.addCycle(args.nodes.nodes, cycleEntry, d);<br>                    <span class="hljs-type">DependencyNode</span> <span class="hljs-variable">cycleNode</span> <span class="hljs-operator">=</span> args.nodes.get(cycleEntry);<br>                    <span class="hljs-keyword">if</span> (cycleNode.getDependency() != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-type">DefaultDependencyNode</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> createDependencyNode(<br>                                relocations, preManaged, rangeResult, version, d, descriptorResult, cycleNode);<br>                        node.getChildren().add(child);<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (!descriptorResult.getRelocations().isEmpty()) &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">disableVersionManagementSubsequently</span> <span class="hljs-operator">=</span><br>                            originalArtifact.getGroupId().equals(d.getArtifact().getGroupId())<br>                                    &amp;&amp; originalArtifact<br>                                            .getArtifactId()<br>                                            .equals(d.getArtifact().getArtifactId());<br><br>                    processDependency(<br>                            args,<br>                            parent,<br>                            results,<br>                            repositories,<br>                            depSelector,<br>                            depManager,<br>                            depTraverser,<br>                            verFilter,<br>                            d,<br>                            descriptorResult.getRelocations(),<br>                            disableVersionManagementSubsequently);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    d = args.pool.intern(d.setArtifact(args.pool.intern(d.getArtifact())));<br><br>                    List&lt;RemoteRepository&gt; repos =<br>                            getRemoteRepositories(rangeResult.getRepository(version), repositories);<br><br>                    <span class="hljs-type">DefaultDependencyNode</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> createDependencyNode(<br>                            relocations,<br>                            preManaged,<br>                            rangeResult,<br>                            version,<br>                            d,<br>                            descriptorResult.getAliases(),<br>                            repos,<br>                            args.request.getRequestContext());<br><br>                    node.getChildren().add(child);<br><br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">recurse</span> <span class="hljs-operator">=</span><br>                            traverse &amp;&amp; !descriptorResult.getDependencies().isEmpty();<br>                    <span class="hljs-keyword">if</span> (recurse) &#123;<br>                        doRecurse(<br>                                args,<br>                                parent,<br>                                results,<br>                                repositories,<br>                                depSelector,<br>                                depManager,<br>                                depTraverser,<br>                                verFilter,<br>                                d,<br>                                descriptorResult,<br>                                child);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">DependencyNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> args.nodes.top();<br>                List&lt;RemoteRepository&gt; repos = getRemoteRepositories(rangeResult.getRepository(version), repositories);<br>                <span class="hljs-type">DefaultDependencyNode</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> createDependencyNode(<br>                        relocations,<br>                        preManaged,<br>                        rangeResult,<br>                        version,<br>                        d,<br>                        <span class="hljs-literal">null</span>,<br>                        repos,<br>                        args.request.getRequestContext());<br>                node.getChildren().add(child);<br>            &#125;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中已用注释写明了关键代码位置，可以得知在RootDependency的Collect操作中，会进行ArtifactDescriptor(即，依赖的pom文件的解析)的解析操作，得到该Dependency的直接依赖，此操作由ArtifactDescriptorReader进行，但是既然解析了pom文件，为什么不根据pom文件内声明的extension类型来修正Artifact对应的文件类型呢？只因<del>你太美</del>Artifact中的extension是final修饰的，咱也不懂Aether为什么不写个自动修正extension的操作，毕竟人家是apache foundation下的，咱也不敢问。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>前情回顾，Aether内部使用了Dependency Injection，我们如果需要更改内部的逻辑，最简单的当然还是利用DefaultLocatorService操作了。</p><p>我们只需这么修改代码，将默认的ArtifactDescriptorReader更改为可以自动修正的自定义ArtifactDescriptorReader即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RepositorySystem <span class="hljs-title function_">newRepositorySystem</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DefaultServiceLocator</span> <span class="hljs-variable">locator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultServiceLocator</span>();<br><span class="hljs-comment">//        locator.addService(ArtifactDescriptorReader.class, DefaultArtifactDescriptorReader.class); //默认的ArtifactDescriptorReader</span><br>        locator.addService(ArtifactDescriptorReader.class, CompactAARArtifactDescriptorReader.class);<span class="hljs-comment">//兼容AAR的CompactAARArtifactDescriptorReader</span><br>        locator.addService(VersionResolver.class, DefaultVersionResolver.class);<br>        locator.addService(VersionRangeResolver.class, DefaultVersionRangeResolver.class);<br>        locator.addService(MetadataGeneratorFactory.class, SnapshotMetadataGeneratorFactory.class);<br>        locator.addService(MetadataGeneratorFactory.class, VersionsMetadataGeneratorFactory.class);<br>        locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);<br>        locator.addService(TransporterFactory.class, FileTransporterFactory.class);<br>        locator.addService(TransporterFactory.class, HttpTransporterFactory.class);<br>        <span class="hljs-keyword">return</span> locator.getService(RepositorySystem.class);<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><p>这个思路显然是对的，但是问题又来了，我们如何实现自动修正，毕竟人家extension是final修饰的？反射操作。</p><p>那，又怎么获取正确的extension呢？不妨来看看ArtifactDescriptorReader的代码，看看人家是怎么解析的。</p><p><code>org.apache.maven.repository.internal.DefaultArtifactDescriptorReader</code>的代码摘要(具体片段懒得继续缩减了，就这个方法先凑活看好了):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultArtifactDescriptorReader</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArtifactDescriptorReader</span>, Service<br>&#123;<br>    ...<br>    <span class="hljs-keyword">private</span> Model <span class="hljs-title function_">loadPom</span><span class="hljs-params">( RepositorySystemSession session, ArtifactDescriptorRequest request,</span><br><span class="hljs-params">                           ArtifactDescriptorResult result )</span><br>        <span class="hljs-keyword">throws</span> ArtifactDescriptorException<br>    &#123;<br>        <span class="hljs-type">RequestTrace</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> RequestTrace.newChild( request.getTrace(), request );<br><br>        Set&lt;String&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">Artifact</span> <span class="hljs-variable">artifact</span> <span class="hljs-operator">=</span> request.getArtifact();; )<br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-type">VersionRequest</span> <span class="hljs-variable">versionRequest</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionRequest</span>( artifact, request.getRepositories(), request.getRequestContext() );<br>                versionRequest.setTrace( trace );<br>                <span class="hljs-type">VersionResult</span> <span class="hljs-variable">versionResult</span> <span class="hljs-operator">=</span> versionResolver.resolveVersion( session, versionRequest );<br><br>                artifact = artifact.setVersion( versionResult.getVersion() );<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( VersionResolutionException e )<br>            &#123;<br>                result.addException( e );<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>( result );<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> ( !visited.add( artifact.getGroupId() + <span class="hljs-string">&#x27;:&#x27;</span> + artifact.getArtifactId() + <span class="hljs-string">&#x27;:&#x27;</span> + artifact.getBaseVersion() ) )<br>            &#123;<br>                <span class="hljs-type">RepositoryException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepositoryException</span>( <span class="hljs-string">&quot;Artifact relocations form a cycle: &quot;</span> + visited );<br>                invalidDescriptor( session, trace, artifact, exception );<br>                <span class="hljs-keyword">if</span> ( ( getPolicy( session, artifact, request ) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID ) != <span class="hljs-number">0</span> )<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                result.addException( exception );<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>( result );<br>            &#125;<br><br>            <span class="hljs-type">Artifact</span> <span class="hljs-variable">pomArtifact</span> <span class="hljs-operator">=</span> ArtifactDescriptorUtils.toPomArtifact( artifact );<br><br>            ArtifactResult resolveResult;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-type">ArtifactRequest</span> <span class="hljs-variable">resolveRequest</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactRequest</span>( pomArtifact, request.getRepositories(), request.getRequestContext() );<br>                resolveRequest.setTrace( trace );<br>                resolveResult = artifactResolver.resolveArtifact( session, resolveRequest );<br>                pomArtifact = resolveResult.getArtifact();<br>                result.setRepository( resolveResult.getRepository() );<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( ArtifactResolutionException e )<br>            &#123;<br>                <span class="hljs-keyword">if</span> ( e.getCause() <span class="hljs-keyword">instanceof</span> ArtifactNotFoundException )<br>                &#123;<br>                    missingDescriptor( session, trace, artifact, (Exception) e.getCause() );<br>                    <span class="hljs-keyword">if</span> ( ( getPolicy( session, artifact, request ) &amp; ArtifactDescriptorPolicy.IGNORE_MISSING ) != <span class="hljs-number">0</span> )<br>                    &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;<br>                result.addException( e );<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>( result );<br>            &#125;<br><br>            Model model;<span class="hljs-comment">// Model为POM文件对应的模型类</span><br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-type">ModelBuildingRequest</span> <span class="hljs-variable">modelRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultModelBuildingRequest</span>();<br>                modelRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );<br>                modelRequest.setProcessPlugins( <span class="hljs-literal">false</span> );<br>                modelRequest.setTwoPhaseBuilding( <span class="hljs-literal">false</span> );<br>                modelRequest.setSystemProperties( toProperties( session.getUserProperties(),<br>                                                                session.getSystemProperties() ) );<br>                modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );<br>                modelRequest.setModelResolver( <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultModelResolver</span>( session, trace.newChild( modelRequest ),<br>                                                                         request.getRequestContext(), artifactResolver,<br>                                                                         remoteRepositoryManager,<br>                                                                         request.getRepositories() ) );<br>                <span class="hljs-keyword">if</span> ( resolveResult.getRepository() <span class="hljs-keyword">instanceof</span> WorkspaceRepository )<br>                &#123;<br>                    modelRequest.setPomFile( pomArtifact.getFile() );<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    modelRequest.setModelSource( <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileModelSource</span>( pomArtifact.getFile() ) );<br>                &#125;<br><br>                model = modelBuilder.build( modelRequest ).getEffectiveModel();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( ModelBuildingException e )<br>            &#123;<br>                <span class="hljs-keyword">for</span> ( ModelProblem problem : e.getProblems() )<br>                &#123;<br>                    <span class="hljs-keyword">if</span> ( problem.getException() <span class="hljs-keyword">instanceof</span> UnresolvableModelException )<br>                    &#123;<br>                        result.addException( problem.getException() );<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>( result );<br>                    &#125;<br>                &#125;<br>                invalidDescriptor( session, trace, artifact, e );<br>                <span class="hljs-keyword">if</span> ( ( getPolicy( session, artifact, request ) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID ) != <span class="hljs-number">0</span> )<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                result.addException( e );<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>( result );<br>            &#125;<br><br>            <span class="hljs-type">Relocation</span> <span class="hljs-variable">relocation</span> <span class="hljs-operator">=</span> getRelocation( model );<br><br>            <span class="hljs-keyword">if</span> ( relocation != <span class="hljs-literal">null</span> )<br>            &#123;<br>                result.addRelocation( artifact );<br>                artifact =<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">RelocatedArtifact</span>( artifact, relocation.getGroupId(), relocation.getArtifactId(),<br>                                           relocation.getVersion() );<br>                result.setArtifact( artifact );<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> model;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的loadPom()方法会在DefaultArtifactDescriptorReader.readArtifactDescriptor()中调用，代码中的<code>org.apache.maven.model.Model</code>类是POM文件的模型类，我们可以调用Model.getPackaging()获得extension，并且loadPom()接受一个ArtifactDescriptorResult参数，我们可以通过ArtifactDescriptorResult.getArtifact()取得当前操作的Artifact以更正extension字段。</p><blockquote><p>Q：为什么我不使用setArtifact()方法来替换Artifact？<br>A：因为，lazy不想再实验了，并且用反射得到的程序可以正常运行(逃)。如果感兴趣可以自己试试</p></blockquote><p><strong>注意：代码中存在internal的类，我们不能在自己项目内直接调用，所以再加一层反射操作来替换这些操作internal的类即可。</strong></p><p>CompactAARArtifactDescriptorReader代码如下(随手写的，建议用者再仔细看看，另外Reflect为团队内的反射工具，自己替换为正常的反射代码即可)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.maven.model.DependencyManagement;<br><span class="hljs-keyword">import</span> org.apache.maven.model.DistributionManagement;<br><span class="hljs-keyword">import</span> org.apache.maven.model.License;<br><span class="hljs-keyword">import</span> org.apache.maven.model.Model;<br><span class="hljs-keyword">import</span> org.apache.maven.model.Prerequisites;<br><span class="hljs-keyword">import</span> org.apache.maven.model.Relocation;<br><span class="hljs-keyword">import</span> org.apache.maven.model.Repository;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.DefaultModelBuilderFactory;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.DefaultModelBuildingRequest;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.FileModelSource;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.ModelBuilder;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.ModelBuildingException;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.ModelBuildingRequest;<br><span class="hljs-keyword">import</span> org.apache.maven.model.building.ModelProblem;<br><span class="hljs-keyword">import</span> org.apache.maven.model.resolution.UnresolvableModelException;<br><span class="hljs-keyword">import</span> org.apache.maven.repository.internal.ArtifactDescriptorUtils;<br><span class="hljs-keyword">import</span> org.codehaus.plexus.component.annotations.Component;<br><span class="hljs-keyword">import</span> org.codehaus.plexus.component.annotations.Requirement;<br><span class="hljs-keyword">import</span> org.eclipse.aether.RepositoryEvent;<br><span class="hljs-keyword">import</span> org.eclipse.aether.RepositoryEvent.EventType;<br><span class="hljs-keyword">import</span> org.eclipse.aether.RepositoryException;<br><span class="hljs-keyword">import</span> org.eclipse.aether.RepositorySystemSession;<br><span class="hljs-keyword">import</span> org.eclipse.aether.RequestTrace;<br><span class="hljs-keyword">import</span> org.eclipse.aether.artifact.Artifact;<br><span class="hljs-keyword">import</span> org.eclipse.aether.artifact.ArtifactProperties;<br><span class="hljs-keyword">import</span> org.eclipse.aether.artifact.ArtifactType;<br><span class="hljs-keyword">import</span> org.eclipse.aether.artifact.ArtifactTypeRegistry;<br><span class="hljs-keyword">import</span> org.eclipse.aether.artifact.DefaultArtifact;<br><span class="hljs-keyword">import</span> org.eclipse.aether.artifact.DefaultArtifactType;<br><span class="hljs-keyword">import</span> org.eclipse.aether.graph.Dependency;<br><span class="hljs-keyword">import</span> org.eclipse.aether.graph.Exclusion;<br><span class="hljs-keyword">import</span> org.eclipse.aether.impl.ArtifactDescriptorReader;<br><span class="hljs-keyword">import</span> org.eclipse.aether.impl.ArtifactResolver;<br><span class="hljs-keyword">import</span> org.eclipse.aether.impl.RemoteRepositoryManager;<br><span class="hljs-keyword">import</span> org.eclipse.aether.impl.RepositoryEventDispatcher;<br><span class="hljs-keyword">import</span> org.eclipse.aether.impl.VersionResolver;<br><span class="hljs-keyword">import</span> org.eclipse.aether.repository.WorkspaceRepository;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorException;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorPolicy;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorPolicyRequest;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorRequest;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorResult;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactRequest;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactResolutionException;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.ArtifactResult;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.VersionRequest;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.VersionResolutionException;<br><span class="hljs-keyword">import</span> org.eclipse.aether.resolution.VersionResult;<br><span class="hljs-keyword">import</span> org.eclipse.aether.spi.locator.Service;<br><span class="hljs-keyword">import</span> org.eclipse.aether.spi.locator.ServiceLocator;<br><span class="hljs-keyword">import</span> org.eclipse.aether.spi.log.Logger;<br><span class="hljs-keyword">import</span> org.eclipse.aether.spi.log.LoggerFactory;<br><span class="hljs-keyword">import</span> org.eclipse.aether.spi.log.NullLoggerFactory;<br><span class="hljs-keyword">import</span> org.eclipse.aether.transfer.ArtifactNotFoundException;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">import</span> javax.inject.Inject;<br><span class="hljs-keyword">import</span> javax.inject.Named;<br><br><span class="hljs-meta">@Named</span><br><span class="hljs-meta">@Component(role = ArtifactDescriptorReader.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompactAARArtifactDescriptorReader</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArtifactDescriptorReader</span>, Service &#123;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br>    <span class="hljs-meta">@Requirement(role = LoggerFactory.class)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> NullLoggerFactory.LOGGER;<br><br>    <span class="hljs-meta">@Requirement</span><br>    <span class="hljs-keyword">private</span> RemoteRepositoryManager remoteRepositoryManager;<br><br>    <span class="hljs-meta">@Requirement</span><br>    <span class="hljs-keyword">private</span> VersionResolver versionResolver;<br><br>    <span class="hljs-meta">@Requirement</span><br>    <span class="hljs-keyword">private</span> ArtifactResolver artifactResolver;<br><br>    <span class="hljs-meta">@Requirement</span><br>    <span class="hljs-keyword">private</span> RepositoryEventDispatcher repositoryEventDispatcher;<br><br>    <span class="hljs-meta">@Requirement</span><br>    <span class="hljs-keyword">private</span> ModelBuilder modelBuilder;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CompactAARArtifactDescriptorReader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// enable no-arg constructor</span><br>    &#125;<br><br>    <span class="hljs-meta">@Inject</span><br>    CompactAARArtifactDescriptorReader(RemoteRepositoryManager remoteRepositoryManager, VersionResolver versionResolver,<br>                                       ArtifactResolver artifactResolver, ModelBuilder modelBuilder,<br>                                       RepositoryEventDispatcher repositoryEventDispatcher, LoggerFactory loggerFactory) &#123;<br>        setRemoteRepositoryManager(remoteRepositoryManager);<br>        setVersionResolver(versionResolver);<br>        setArtifactResolver(artifactResolver);<br>        setModelBuilder(modelBuilder);<br>        setLoggerFactory(loggerFactory);<br>        setRepositoryEventDispatcher(repositoryEventDispatcher);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initService</span><span class="hljs-params">(ServiceLocator locator)</span> &#123;<br>        setLoggerFactory(locator.getService(LoggerFactory.class));<br>        setRemoteRepositoryManager(locator.getService(RemoteRepositoryManager.class));<br>        setVersionResolver(locator.getService(VersionResolver.class));<br>        setArtifactResolver(locator.getService(ArtifactResolver.class));<br>        setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));<br>        modelBuilder = locator.getService(ModelBuilder.class);<br>        <span class="hljs-keyword">if</span> (modelBuilder == <span class="hljs-literal">null</span>) &#123;<br>            setModelBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultModelBuilderFactory</span>().newInstance());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CompactAARArtifactDescriptorReader <span class="hljs-title function_">setLoggerFactory</span><span class="hljs-params">(LoggerFactory loggerFactory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.logger = NullLoggerFactory.getSafeLogger(loggerFactory, getClass());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogger</span><span class="hljs-params">(LoggerFactory loggerFactory)</span> &#123;<br>        <span class="hljs-comment">// plexus support</span><br>        setLoggerFactory(loggerFactory);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CompactAARArtifactDescriptorReader <span class="hljs-title function_">setRemoteRepositoryManager</span><span class="hljs-params">(RemoteRepositoryManager remoteRepositoryManager)</span> &#123;<br>        <span class="hljs-keyword">if</span> (remoteRepositoryManager == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;remote repository manager has not been specified&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.remoteRepositoryManager = remoteRepositoryManager;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CompactAARArtifactDescriptorReader <span class="hljs-title function_">setVersionResolver</span><span class="hljs-params">(VersionResolver versionResolver)</span> &#123;<br>        <span class="hljs-keyword">if</span> (versionResolver == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;version resolver has not been specified&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.versionResolver = versionResolver;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CompactAARArtifactDescriptorReader <span class="hljs-title function_">setArtifactResolver</span><span class="hljs-params">(ArtifactResolver artifactResolver)</span> &#123;<br>        <span class="hljs-keyword">if</span> (artifactResolver == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;artifact resolver has not been specified&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.artifactResolver = artifactResolver;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CompactAARArtifactDescriptorReader <span class="hljs-title function_">setRepositoryEventDispatcher</span><span class="hljs-params">(RepositoryEventDispatcher repositoryEventDispatcher)</span> &#123;<br>        <span class="hljs-keyword">if</span> (repositoryEventDispatcher == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;repository event dispatcher has not been specified&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.repositoryEventDispatcher = repositoryEventDispatcher;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CompactAARArtifactDescriptorReader <span class="hljs-title function_">setModelBuilder</span><span class="hljs-params">(ModelBuilder modelBuilder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (modelBuilder == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;model builder has not been specified&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.modelBuilder = modelBuilder;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ArtifactDescriptorResult <span class="hljs-title function_">readArtifactDescriptor</span><span class="hljs-params">(RepositorySystemSession session,</span><br><span class="hljs-params">                                                           ArtifactDescriptorRequest request)</span><br>            <span class="hljs-keyword">throws</span> ArtifactDescriptorException &#123;<br>        <span class="hljs-type">ArtifactDescriptorResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorResult</span>(request);<br><br>        <span class="hljs-type">Model</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> loadPom(session, request, result);<br><br>        <span class="hljs-keyword">if</span> (model != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ArtifactTypeRegistry</span> <span class="hljs-variable">stereotypes</span> <span class="hljs-operator">=</span> session.getArtifactTypeRegistry();<br><br>            <span class="hljs-keyword">for</span> (Repository r : model.getRepositories()) &#123;<br>                result.addRepository(ArtifactDescriptorUtils.toRemoteRepository(r));<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (org.apache.maven.model.Dependency dependency : model.getDependencies()) &#123;<br>                result.addDependency(convert(dependency, stereotypes));<br>            &#125;<br><br>            <span class="hljs-type">DependencyManagement</span> <span class="hljs-variable">mngt</span> <span class="hljs-operator">=</span> model.getDependencyManagement();<br>            <span class="hljs-keyword">if</span> (mngt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (org.apache.maven.model.Dependency dependency : mngt.getDependencies()) &#123;<br>                    result.addManagedDependency(convert(dependency, stereotypes));<br>                &#125;<br>            &#125;<br><br>            Map&lt;String, Object&gt; properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;String, Object&gt;();<br><br>            <span class="hljs-type">Prerequisites</span> <span class="hljs-variable">prerequisites</span> <span class="hljs-operator">=</span> model.getPrerequisites();<br>            <span class="hljs-keyword">if</span> (prerequisites != <span class="hljs-literal">null</span>) &#123;<br>                properties.put(<span class="hljs-string">&quot;prerequisites.maven&quot;</span>, prerequisites.getMaven());<br>            &#125;<br><br>            List&lt;License&gt; licenses = model.getLicenses();<br>            properties.put(<span class="hljs-string">&quot;license.count&quot;</span>, licenses.size());<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; licenses.size(); i++) &#123;<br>                <span class="hljs-type">License</span> <span class="hljs-variable">license</span> <span class="hljs-operator">=</span> licenses.get(i);<br>                properties.put(<span class="hljs-string">&quot;license.&quot;</span> + i + <span class="hljs-string">&quot;.name&quot;</span>, license.getName());<br>                properties.put(<span class="hljs-string">&quot;license.&quot;</span> + i + <span class="hljs-string">&quot;.url&quot;</span>, license.getUrl());<br>                properties.put(<span class="hljs-string">&quot;license.&quot;</span> + i + <span class="hljs-string">&quot;.comments&quot;</span>, license.getComments());<br>                properties.put(<span class="hljs-string">&quot;license.&quot;</span> + i + <span class="hljs-string">&quot;.distribution&quot;</span>, license.getDistribution());<br>            &#125;<br><br>            result.setProperties(properties);<br><br>            setArtifactProperties(result, model);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Model <span class="hljs-title function_">loadPom</span><span class="hljs-params">(RepositorySystemSession session, ArtifactDescriptorRequest request,</span><br><span class="hljs-params">                          ArtifactDescriptorResult result)</span><br>            <span class="hljs-keyword">throws</span> ArtifactDescriptorException &#123;<br>        <span class="hljs-type">RequestTrace</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> RequestTrace.newChild(request.getTrace(), request);<br><br>        Set&lt;String&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Artifact</span> <span class="hljs-variable">artifact</span> <span class="hljs-operator">=</span> request.getArtifact(); ; ) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">VersionRequest</span> <span class="hljs-variable">versionRequest</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionRequest</span>(artifact, request.getRepositories(), request.getRequestContext());<br>                versionRequest.setTrace(trace);<br>                <span class="hljs-type">VersionResult</span> <span class="hljs-variable">versionResult</span> <span class="hljs-operator">=</span> versionResolver.resolveVersion(session, versionRequest);<br><br>                artifact = artifact.setVersion(versionResult.getVersion());<br>            &#125; <span class="hljs-keyword">catch</span> (VersionResolutionException e) &#123;<br>                result.addException(e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>(result);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!visited.add(artifact.getGroupId() + <span class="hljs-string">&#x27;:&#x27;</span> + artifact.getArtifactId() + <span class="hljs-string">&#x27;:&#x27;</span> + artifact.getBaseVersion())) &#123;<br>                <span class="hljs-type">RepositoryException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepositoryException</span>(<span class="hljs-string">&quot;Artifact relocations form a cycle: &quot;</span> + visited);<br>                invalidDescriptor(session, trace, artifact, exception);<br>                <span class="hljs-keyword">if</span> ((getPolicy(session, artifact, request) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                result.addException(exception);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>(result);<br>            &#125;<br><br>            <span class="hljs-type">Artifact</span> <span class="hljs-variable">pomArtifact</span> <span class="hljs-operator">=</span> ArtifactDescriptorUtils.toPomArtifact(artifact);<br><br>            ArtifactResult resolveResult;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ArtifactRequest</span> <span class="hljs-variable">resolveRequest</span> <span class="hljs-operator">=</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactRequest</span>(pomArtifact, request.getRepositories(), request.getRequestContext());<br>                resolveRequest.setTrace(trace);<br>                resolveResult = artifactResolver.resolveArtifact(session, resolveRequest);<br>                pomArtifact = resolveResult.getArtifact();<br>                result.setRepository(resolveResult.getRepository());<br>            &#125; <span class="hljs-keyword">catch</span> (ArtifactResolutionException e) &#123;<br>                <span class="hljs-keyword">if</span> (e.getCause() <span class="hljs-keyword">instanceof</span> ArtifactNotFoundException) &#123;<br>                    missingDescriptor(session, trace, artifact, (Exception) e.getCause());<br>                    <span class="hljs-keyword">if</span> ((getPolicy(session, artifact, request) &amp; ArtifactDescriptorPolicy.IGNORE_MISSING) != <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;<br>                result.addException(e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>(result);<br>            &#125;<br><br>            Model model;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ModelBuildingRequest</span> <span class="hljs-variable">modelRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultModelBuildingRequest</span>();<br>                modelRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);<br>                modelRequest.setProcessPlugins(<span class="hljs-literal">false</span>);<br>                modelRequest.setTwoPhaseBuilding(<span class="hljs-literal">false</span>);<br>                modelRequest.setSystemProperties(toProperties(session.getUserProperties(),<br>                        session.getSystemProperties()));<br>                modelRequest.setModelCache(<br>                        Reflect.on(<span class="hljs-string">&quot;org.apache.maven.repository.internal.DefaultModelCache&quot;</span>)<br>                                .call(<span class="hljs-string">&quot;newInstance&quot;</span>, session).get());<br>                <span class="hljs-comment">//modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );</span><br>                modelRequest.setModelResolver(<br>                        Reflect.on(<span class="hljs-string">&quot;org.apache.maven.repository.internal.DefaultModelResolver&quot;</span>)<br>                                .create(session, trace.newChild(modelRequest),<br>                                        request.getRequestContext(), artifactResolver,<br>                                        remoteRepositoryManager,<br>                                        request.getRepositories())<br>                                .get());<br><span class="hljs-comment">//              modelRequest.setModelResolver(new DefaultModelResolver(session, trace.newChild(modelRequest),</span><br><span class="hljs-comment">//                        request.getRequestContext(), artifactResolver,</span><br><span class="hljs-comment">//                        remoteRepositoryManager,</span><br><span class="hljs-comment">//                        request.getRepositories()));</span><br>                <span class="hljs-keyword">if</span> (resolveResult.getRepository() <span class="hljs-keyword">instanceof</span> WorkspaceRepository) &#123;<br>                    modelRequest.setPomFile(pomArtifact.getFile());<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    modelRequest.setModelSource(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileModelSource</span>(pomArtifact.getFile()));<br>                &#125;<br><br>                model = modelBuilder.build(modelRequest).getEffectiveModel();<br>            &#125; <span class="hljs-keyword">catch</span> (ModelBuildingException e) &#123;<br>                <span class="hljs-keyword">for</span> (ModelProblem problem : e.getProblems()) &#123;<br>                    <span class="hljs-keyword">if</span> (problem.getException() <span class="hljs-keyword">instanceof</span> UnresolvableModelException) &#123;<br>                        result.addException(problem.getException());<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>(result);<br>                    &#125;<br>                &#125;<br>                invalidDescriptor(session, trace, artifact, e);<br>                <span class="hljs-keyword">if</span> ((getPolicy(session, artifact, request) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                result.addException(e);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorException</span>(result);<br>            &#125;<br><br>            <span class="hljs-type">Relocation</span> <span class="hljs-variable">relocation</span> <span class="hljs-operator">=</span> getRelocation(model);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">packaging</span> <span class="hljs-operator">=</span> model.getPackaging();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;aar&quot;</span>.equals(packaging)) &#123; <span class="hljs-comment">//适配aar类型</span><br>                <span class="hljs-comment">//根据POM重置artifact的extenstion</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Class&lt;DefaultArtifact&gt; artifactCls = DefaultArtifact.class;<br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> artifactCls.getDeclaredField(<span class="hljs-string">&quot;extension&quot;</span>);<br>                    extension.setAccessible(<span class="hljs-literal">true</span>);<br>                    extension.set(result.getArtifact(), model.getPackaging());<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (relocation != <span class="hljs-literal">null</span>) &#123;<br>                result.addRelocation(artifact);<br>                artifact = Reflect.on(<span class="hljs-string">&quot;org.apache.maven.repository.internal.RelocatedArtifact&quot;</span>)<br>                        .create(artifact, relocation.getGroupId(), relocation.getArtifactId(),<br>                                relocation.getVersion()).get();<br><br><span class="hljs-comment">//                artifact =</span><br><span class="hljs-comment">//                        new RelocatedArtifact(artifact, relocation.getGroupId(), relocation.getArtifactId(),</span><br><span class="hljs-comment">//                                relocation.getVersion());</span><br>                result.setArtifact(artifact);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> model;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Properties <span class="hljs-title function_">toProperties</span><span class="hljs-params">(Map&lt;String, String&gt; dominant, Map&lt;String, String&gt; recessive)</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">if</span> (recessive != <span class="hljs-literal">null</span>) &#123;<br>            props.putAll(recessive);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dominant != <span class="hljs-literal">null</span>) &#123;<br>            props.putAll(dominant);<br>        &#125;<br>        <span class="hljs-keyword">return</span> props;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Relocation <span class="hljs-title function_">getRelocation</span><span class="hljs-params">(Model model)</span> &#123;<br>        <span class="hljs-type">Relocation</span> <span class="hljs-variable">relocation</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">DistributionManagement</span> <span class="hljs-variable">distMngt</span> <span class="hljs-operator">=</span> model.getDistributionManagement();<br>        <span class="hljs-keyword">if</span> (distMngt != <span class="hljs-literal">null</span>) &#123;<br>            relocation = distMngt.getRelocation();<br>        &#125;<br>        <span class="hljs-keyword">return</span> relocation;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArtifactProperties</span><span class="hljs-params">(ArtifactDescriptorResult result, Model model)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">downloadUrl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">DistributionManagement</span> <span class="hljs-variable">distMngt</span> <span class="hljs-operator">=</span> model.getDistributionManagement();<br>        <span class="hljs-keyword">if</span> (distMngt != <span class="hljs-literal">null</span>) &#123;<br>            downloadUrl = distMngt.getDownloadUrl();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (downloadUrl != <span class="hljs-literal">null</span> &amp;&amp; downloadUrl.length() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">Artifact</span> <span class="hljs-variable">artifact</span> <span class="hljs-operator">=</span> result.getArtifact();<br>            Map&lt;String, String&gt; props = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;(artifact.getProperties());<br>            props.put(ArtifactProperties.DOWNLOAD_URL, downloadUrl);<br>            result.setArtifact(artifact.setProperties(props));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Dependency <span class="hljs-title function_">convert</span><span class="hljs-params">(org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes)</span> &#123;<br>        <span class="hljs-type">ArtifactType</span> <span class="hljs-variable">stereotype</span> <span class="hljs-operator">=</span> stereotypes.get(dependency.getType());<br>        <span class="hljs-keyword">if</span> (stereotype == <span class="hljs-literal">null</span>) &#123;<br>            stereotype = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultArtifactType</span>(dependency.getType());<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">system</span> <span class="hljs-operator">=</span> dependency.getSystemPath() != <span class="hljs-literal">null</span> &amp;&amp; dependency.getSystemPath().length() &gt; <span class="hljs-number">0</span>;<br><br>        Map&lt;String, String&gt; props = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (system) &#123;<br>            props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, dependency.getSystemPath());<br>        &#125;<br><br>        <span class="hljs-type">Artifact</span> <span class="hljs-variable">artifact</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultArtifact</span>(dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), <span class="hljs-literal">null</span>,<br>                        dependency.getVersion(), props, stereotype);<br><br>        List&lt;Exclusion&gt; exclusions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Exclusion&gt;(dependency.getExclusions().size());<br>        <span class="hljs-keyword">for</span> (org.apache.maven.model.Exclusion exclusion : dependency.getExclusions()) &#123;<br>            exclusions.add(convert(exclusion));<br>        &#125;<br><br>        <span class="hljs-type">Dependency</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dependency</span>(artifact, dependency.getScope(), dependency.isOptional(), exclusions);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Exclusion <span class="hljs-title function_">convert</span><span class="hljs-params">(org.apache.maven.model.Exclusion exclusion)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exclusion</span>(exclusion.getGroupId(), exclusion.getArtifactId(), <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">missingDescriptor</span><span class="hljs-params">(RepositorySystemSession session, RequestTrace trace, Artifact artifact,</span><br><span class="hljs-params">                                   Exception exception)</span> &#123;<br>        RepositoryEvent.<span class="hljs-type">Builder</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepositoryEvent</span>.Builder(session, EventType.ARTIFACT_DESCRIPTOR_MISSING);<br>        event.setTrace(trace);<br>        event.setArtifact(artifact);<br>        event.setException(exception);<br><br>        repositoryEventDispatcher.dispatch(event.build());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invalidDescriptor</span><span class="hljs-params">(RepositorySystemSession session, RequestTrace trace, Artifact artifact,</span><br><span class="hljs-params">                                   Exception exception)</span> &#123;<br>        RepositoryEvent.<span class="hljs-type">Builder</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepositoryEvent</span>.Builder(session, EventType.ARTIFACT_DESCRIPTOR_INVALID);<br>        event.setTrace(trace);<br>        event.setArtifact(artifact);<br>        event.setException(exception);<br><br>        repositoryEventDispatcher.dispatch(event.build());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPolicy</span><span class="hljs-params">(RepositorySystemSession session, Artifact artifact, ArtifactDescriptorRequest request)</span> &#123;<br>        <span class="hljs-type">ArtifactDescriptorPolicy</span> <span class="hljs-variable">policy</span> <span class="hljs-operator">=</span> session.getArtifactDescriptorPolicy();<br>        <span class="hljs-keyword">if</span> (policy == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ArtifactDescriptorPolicy.STRICT;<br>        &#125;<br>        <span class="hljs-keyword">return</span> policy.getPolicy(session, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtifactDescriptorPolicyRequest</span>(artifact, request.getRequestContext()));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>提示：千万不要忘记在Factory内替换DefaultArtifactDescriptorReader为CompactAARArtifactDescriptorReader。</strong></p><h3 id="Aether的版本冲突解决方式与Gradle的不同"><a href="#Aether的版本冲突解决方式与Gradle的不同" class="headerlink" title="Aether的版本冲突解决方式与Gradle的不同"></a>Aether的版本冲突解决方式与Gradle的不同</h3><p>假如，使用已经兼容AAR依赖的Aether系统去下载Google的一些库，比如<code>androidx</code>系列，很大概率出现因为依赖冲突而无法下载的问题，或者即使下载了也无法正常编译。</p><p>这个问题是因为Aether和Gradle的默认版本冲突解决方式不同，Aether是就近原则，依赖程度浅的版本则优先度高，Gradle则是就近+最新原则，在本地配置内采用最近原则，在处理远程依赖的子依赖时采用最新版本。</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>我们只需要改变依赖冲突的解决方式即可，这个需要通过RepositorySystemSession来设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RepositorySystemSession <span class="hljs-title function_">newSession</span><span class="hljs-params">(RepositorySystem system, LocalRepository localRepo)</span> &#123;<br>        <span class="hljs-type">DefaultRepositorySystemSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> MavenRepositorySystemUtils.newSession();<br>        session.setConfigProperty(ConflictResolver.CONFIG_PROP_VERBOSE, <span class="hljs-literal">true</span>);<br>        session.setConfigProperty(DependencyManagerUtils.CONFIG_PROP_VERBOSE, <span class="hljs-literal">true</span>);<br>        session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo));<br>        session.setDependencyGraphTransformer(<br>            <span class="hljs-comment">//改为自定义的DependencyGraphTransformer</span><br>        );<br>        <span class="hljs-keyword">return</span> session;<br>    &#125;<br></code></pre></td></tr></table></figure><p>自己实现所需的依赖树裁枝方式即可。我这里比较懒省事，直接做一个LazyConflictResolver，下载依赖树上的所有依赖，之后在编译的时候取最新的版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.eclipse.aether.RepositoryException;<br><span class="hljs-keyword">import</span> org.eclipse.aether.collection.DependencyGraphTransformationContext;<br><span class="hljs-keyword">import</span> org.eclipse.aether.collection.DependencyGraphTransformer;<br><span class="hljs-keyword">import</span> org.eclipse.aether.graph.DependencyNode;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择摆烂的ConflictResolver,遇到困难睡大觉，把困难丢给后面的人解决。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyConflictResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DependencyGraphTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> DependencyNode <span class="hljs-title function_">transformGraph</span><span class="hljs-params">(DependencyNode node, DependencyGraphTransformationContext context)</span> <span class="hljs-keyword">throws</span> RepositoryException &#123;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>