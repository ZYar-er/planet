<blockquote><h1 id="在-UI-上实现目标追踪">在 UI 上实现目标追踪<a class="headerlink" href="#在-UI-上实现目标追踪" title="Permanent link">&para;</a></h1>
<!-- more -->

<p>实现目标任务追踪功能。在 UI 上的椭圆区域内，显示目标的方向和距离。</p>
<p><img alt="演示" src="../../../obsidian-vault/attachments/track_indicator_demo.png" /></p>
<h2 id="配置椭圆">配置椭圆<a class="headerlink" href="#配置椭圆" title="Permanent link">&para;</a></h2>
<p>公开两个字段，用于配置椭圆两个轴的长度。取值范围设置为 <span class="arithmatex">\([0,1]\)</span>，方便配置。另外，规定水平的是长轴，竖直的是短轴。</p>
<div class="highlight"><pre><span></span><code><span class="na">[Range(0, 1)]</span><span class="w"> </span><span class="k">public</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">HorizontalSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.8f</span><span class="p">;</span>
<span class="na">[Range(0, 1)]</span><span class="w"> </span><span class="k">public</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">VerticalSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.8f</span><span class="p">;</span>
</code></pre></div>
<p>结合 Panel 的 <code>RectTransform.rect</code> 可以确定椭圆方程中的 <span class="arithmatex">\(a\)</span> 和 <span class="arithmatex">\(b\)</span>。</p>
<div class="highlight"><pre><span></span><code><span class="k">private</span><span class="w"> </span><span class="k">void</span><span class="w"> </span><span class="nf">GetEllipseParam</span><span class="p">(</span><span class="n">RectTransform</span><span class="w"> </span><span class="n">panelRect</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">Rect</span><span class="w"> </span><span class="n">rect</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">panelRect</span><span class="p">.</span><span class="n">rect</span><span class="p">;</span>
<span class="w">    </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rect</span><span class="p">.</span><span class="n">width</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">0.5f</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">HorizontalSize</span><span class="p">;</span>
<span class="w">    </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">0.5f</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">VerticalSize</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="编辑器辅助线">编辑器辅助线<a class="headerlink" href="#编辑器辅助线" title="Permanent link">&para;</a></h2>
<p>在编辑器中绘制辅助线，帮助我们直观地看到椭圆范围。</p>
<p><img alt="辅助线" src="../../../obsidian-vault/attachments/track_indicator_gizmo.png" /></p>
<p>Unity 没有提供绘制椭圆的方法。只能在椭圆上多采一些离散的点，然后用 <a href="https://docs.unity3d.com/ScriptReference/Gizmos.DrawLineStrip.html"><code>Gizmos.DrawLineStrip(points, true)</code></a> 绘制，第二个参数为 <code>true</code> 表示绘制为首尾闭合的多边形。</p>
<div class="highlight"><pre><span></span><code><span class="k">private</span><span class="w"> </span><span class="k">void</span><span class="w"> </span><span class="nf">OnDrawGizmosSelected</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">RectTransform</span><span class="w"> </span><span class="n">rect</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">transform</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">RectTransform</span><span class="p">;</span>
<span class="w">    </span><span class="n">GetEllipseParam</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>
<span class="w">    </span><span class="n">Vector3</span><span class="p">[]</span><span class="w"> </span><span class="n">points</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Vector3</span><span class="p">[</span><span class="m">360</span><span class="p">];</span>

<span class="w">    </span><span class="c1">// 极坐标下，每隔一度采一个点</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">360</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="kt">float</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Mathf</span><span class="p">.</span><span class="n">Cos</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">);</span>
<span class="w">        </span><span class="kt">float</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Mathf</span><span class="p">.</span><span class="n">Sin</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">);</span>
<span class="w">        </span><span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rect</span><span class="p">.</span><span class="n">TransformPoint</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="cp">#if UNITY_EDITOR</span>
<span class="w">    </span><span class="n">UnityEditor</span><span class="p">.</span><span class="n">Handles</span><span class="p">.</span><span class="n">Label</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="m">270</span><span class="p">],</span><span class="w"> </span><span class="s">&quot;跟踪图标的运动范围&quot;</span><span class="p">);</span>
<span class="cp">#endif</span>

<span class="w">    </span><span class="kt">var</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span><span class="p">;</span>
<span class="w">    </span><span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Color</span><span class="p">.</span><span class="n">green</span><span class="p">;</span>
<span class="w">    </span><span class="n">Gizmos</span><span class="p">.</span><span class="n">DrawLineStrip</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">ReadOnlySpan</span><span class="o">&lt;</span><span class="n">Vector3</span><span class="o">&gt;</span><span class="p">(</span><span class="n">points</span><span class="p">),</span><span class="w"> </span><span class="k">true</span><span class="p">);</span>
<span class="w">    </span><span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">color</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="计算目标点在-UI-上的位置">计算目标点在 UI 上的位置<a class="headerlink" href="#计算目标点在-UI-上的位置" title="Permanent link">&para;</a></h2>
<p>先计算目标点的屏幕坐标，再转换成 Panel 的本地坐标即可。考虑两种特殊情况：</p>
<ol>
<li>
<p>目标点在屏幕后面。</p>
<blockquote>
<p>判断方法很多，用屏幕坐标的深度、相机空间坐标的 z 值都可以。</p>
</blockquote>
</li>
<li>
<p>目标点不在椭圆范围内。</p>
<blockquote>
<p>设目标点在 Panel 中的本地坐标为 <span class="arithmatex">\((x,y)\)</span>，如果 <span class="arithmatex">\(\dfrac{x^2}{a^2}+\dfrac{y^2}{b^2}&gt;1\)</span> 就是在外面。</p>
</blockquote>
</li>
</ol>
<p>这时要把坐标限制在椭圆上。根据目标点在相机空间的坐标 <code>posVS.xy</code> 可以确定它在 Panel 本地坐标系中相对于原点的方向，进而确定一条从原点出发的射线。记 <code>posVS.xy</code> 为 <span class="arithmatex">\((u,v)\)</span>，该射线与椭圆的交点为：</p>
<div class="arithmatex">\[
\frac{ab}{\sqrt{a^2v^2+b^2u^2}} (u,v)
\]</div>
<ul>
<li>使用这个公式时，没必要对 <span class="arithmatex">\((u,v)\)</span> 归一化。</li>
<li>不能用屏幕坐标代替 <code>posVS.xy</code>！！！屏幕坐标在超出屏幕范围后容易跳变，显示出来效果不够丝滑。</li>
</ul>
<div class="highlight"><pre><span></span><code><span class="k">private</span><span class="w"> </span><span class="n">Vector2</span><span class="w"> </span><span class="nf">GetLocalPos</span><span class="p">(</span><span class="n">Transform</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">RectTransform</span><span class="w"> </span><span class="n">panelRect</span><span class="p">,</span><span class="w"> </span><span class="n">Camera</span><span class="w"> </span><span class="n">mainCamera</span><span class="p">,</span><span class="w"> </span><span class="n">Camera</span><span class="w"> </span><span class="n">uiCamera</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">isOutsideView</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">GetEllipseParam</span><span class="p">(</span><span class="n">panelRect</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>
<span class="w">    </span><span class="n">Vector3</span><span class="w"> </span><span class="n">posVS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mainCamera</span><span class="p">.</span><span class="n">worldToCameraMatrix</span><span class="p">.</span><span class="n">MultiplyPoint3x4</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
<span class="w">    </span><span class="n">Vector2</span><span class="w"> </span><span class="n">localPos</span><span class="p">;</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">posVS</span><span class="p">.</span><span class="n">z</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">isOutsideView</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">true</span><span class="p">;</span>
<span class="w">        </span><span class="n">localPos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Vector2</span><span class="p">.</span><span class="n">zero</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">else</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">Vector3</span><span class="w"> </span><span class="n">posNDC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mainCamera</span><span class="p">.</span><span class="n">projectionMatrix</span><span class="p">.</span><span class="n">MultiplyPoint</span><span class="p">(</span><span class="n">posVS</span><span class="p">);</span>
<span class="w">        </span><span class="n">Vector2</span><span class="w"> </span><span class="n">posScreen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Vector2</span><span class="p">((</span><span class="n">posNDC</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">0.5f</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Screen</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">posNDC</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">0.5f</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Screen</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
<span class="w">        </span><span class="n">RectTransformUtility</span><span class="p">.</span><span class="n">ScreenPointToLocalPointInRectangle</span><span class="p">(</span><span class="n">panelRect</span><span class="p">,</span><span class="w"> </span><span class="n">posScreen</span><span class="p">,</span><span class="w"> </span><span class="n">uiCamera</span><span class="p">,</span><span class="w"> </span><span class="k">out</span><span class="w"> </span><span class="n">localPos</span><span class="p">);</span>
<span class="w">        </span><span class="n">isOutsideView</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">localPos</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">localPos</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">localPos</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">localPos</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isOutsideView</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="kt">float</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">Mathf</span><span class="p">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">posVS</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">posVS</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">posVS</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">posVS</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
<span class="w">        </span><span class="p">(</span><span class="n">localPos</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">localPos</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">posVS</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">posVS</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">s</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">localPos</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><a href="https://docs.unity3d.com/ScriptReference/Matrix4x4.MultiplyPoint.html"><code>MultiplyPoint</code></a> 相比 <a href="https://docs.unity3d.com/ScriptReference/Matrix4x4.MultiplyPoint3x4.html"><code>MultiplyPoint3x4</code></a> 多了透视除法，所以乘出来直接是 NDC 坐标。具体可以看 <code>MultiplyPoint</code> 的源码。</p>
<p>把结果赋值给 Panel 里一个图标的 <code>localPosition</code> 即可。箭头方向、距离之类的功能比较简单，不写了。</p></blockquote>