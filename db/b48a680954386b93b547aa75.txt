D-Bus 与 Qt最近的操作系统实验要求写个进程间通信程序，我注意到了 D-Bus 这个可以双向通信的协议，它能够通知到接收方。D-Bus 协议是 Unix 平台下的用于进程间通信（IPC，I...<hr />
<h2 id="toc_190">D-Bus 与 Qt</h2><p>最近的操作系统实验要求写个进程间通信程序，我注意到了 D-Bus 这个可以双向通信的协议，它能够通知到接收方。</p><p>D-Bus 协议是 Unix 平台下的用于进程间通信（IPC，Inter-Process Communication）的协议，它也可用于远程过程调用（RPC，Remote Procedure Call）。</p><p>Qt 是一个广泛使用的图形界面库，它将系统的 D-Bus 库封装成为 <code>QDbus</code> 类，便于我们去使用。在<a href="https://doc.qt.io/qt-5/ipc.html#d-bus-protocol">官方文档</a>中，这是一种推荐的进程间通信方法，不过它仅支持 Unix 平台（Linux 或 macOS）。</p><p>不过 macOS，和众多主流 Linux 操作系统还是有所不同的。虽然 macOS 属于 Unix 系的操作系统，但它没有预装 D-Bus 库，所以想要在 Qt 里面使用 D-Bus 协议进行进程间通信，首先需要手动安装 D-Bus 服务。</p><h2 id="toc_191">安装 D-Bus</h2><p>如果你是个程序员，你的电脑上肯定安装了 Homebrew 或者其他的包管理工具，以提高效率。</p><p>下面就以 Homebrew 为例，安装 D-Bus。执行下面的安装命令。</p><pre><code class="lang-shell">brew install dbus</code></pre><p>安装完成后，你能在 <code>/opt/homebrew/Cellar/dbus</code> 目录下找到它，这个目录之后会用到。</p><p>我安装的版本是 1.14.0，所以 D-Bus 库在 <code>/opt/homebrew/Cellar/dbus/1.14.0</code> 下，下面将以这个版本为例。</p><h2 id="toc_192">启动 D-Bus 服务</h2><p>下面的两种方法，只需要看其中一种。</p><h3 id="toc_193">Homebrew Services</h3><p>Homebrew 提供了方便的类似于 Linux 下 service 命令的服务管理功能，其实本质也是调用了 launchctl 进行管理。</p><p>执行下面的命令即可启动 D-Bus 服务。</p><pre><code class="lang-shell">brew services start dbus</code></pre><p>如果出现下面的报错，说明之前已经启动过服务了。可以执行 <code>brew services stop dbus</code> 来停止服务。</p><pre><code class="lang-shell">Bootstrap failed: 5: Input/output error</code></pre><h3 id="toc_194">Launchctl</h3><p>Launchctl 是 macOS 原生的服务管理。</p><p>建立软连接到 <code>~/Library/LaunchAgents</code> 目录。</p><pre><code class="lang-shell">ln -sfv /opt/homebrew/Cellar/dbus/1.14.0/org.freedesktop.dbus-session.plist ~/Library/LaunchAgents</code></pre><p>执行下面的命令可以启动 D-Bus 服务。</p><pre><code class="lang-shell">launchctl load ~/Library/LaunchAgents/org.freedesktop.dbus-session.plist</code></pre><p>执行下面的命令关闭 D-Bus 服务。</p><pre><code class="lang-shell">launchctl unload ~/Library/LaunchAgents/org.freedesktop.dbus-session.plist</code></pre><p>如果有报错，可能是因为已经启动过服务了，可以关闭服务再启动试试。</p><h3 id="toc_195">备注</h3><p>如果非 root 权限无法启动，可能是由于目录权限不足，可以使用 chown 命令来修改 Homebrew 目录的所有者。</p><pre><code class="lang-shell">sudo chown -R $(whoami) $(brew --prefix)/*</code></pre><ul><li><code>$(whoami)</code> 变量指的是当前用户名。</li><li><code>$(brew --prefix)</code> 指的是 Homebrew 目录，我的是 <code>/opt/homebrew</code>。</li></ul><h2 id="toc_196">添加外部库</h2><p>按照<a href="https://doc.qt.io/qt-5/macos-issues.html#d-bus-and-macos">官方文档</a>的说法，macOS 下因为没有原生的 libdbus-1 库，所以需要自己引入。</p><p>刚才我们安装的 D-Bus 目录下面已经包含这些库啦，所以只需要在 Qt Creator 的项目中引入这些库就好。以我的为例，这个库的在 <code>/opt/homebrew/Cellar/dbus/1.14.0/lib/libdbus-1.dylib</code> 路径下。现在右键点击项目名称，点击「<strong>添加库…</strong>」，选择「<strong>外部库</strong>」。在「<strong>库文件</strong>」里填入库的路径，「包含路径」将会自动配置好，平台只选择 Mac 平台，接下来一路下一步就好啦。</p><p><figure><img class="" alt="添加库" data-src="https://upload.hawa130.com/2022/05/%E6%88%AA%E5%B1%8F2022-05-08%2019.43.41.png#vwid=612&vhei=559" src="https://upload.hawa130.com/2022/05/%E6%88%AA%E5%B1%8F2022-05-08%2019.43.41.png#vwid=612&vhei=559"><figcaption>添加库</figcaption></figure></p><h2 id="toc_197">试试看</h2><p>在 Qt Creator 的「示例」中，有个名为「D-Bus Chat Example」的示例项目，打开它，安装上述方法进行配置。</p><p>如果你成功地运行了这个项目，弹出了窗口，说明一切都到位了，你的 QDBus 是可以正常运行的。</p><p>如果不幸没有配置好的话，控制台会有如下的输出，说明前面有哪一步出了问题。</p><pre><code>Cannot connect to the D-Bus session bus.
Please check your system settings and try again.</code></pre><h2 id="toc_198">在自己的项目中使用</h2><p>以下内容为根据 Qt 示例的个人猜测，反正能用。</p><h3 id="toc_199">建立 D-BUS Object Introspection XML</h3><p>模仿示例项目中的 <code>org.example.chat.xml</code> 文件，新建一个自己的，新建文件时选择「<strong>General</strong>」&gt;「<strong>Empty File</strong>」，文件命名为 <code>&lt;组织类型&gt;.&lt;组织名&gt;.&lt;项目名&gt;.xml</code> 的格式，例如我新建一个 <code>org.hawa130.dbuschat.xml</code> 的文件，里面模仿示例文件写入内容。</p><pre><code class="lang-xml">&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
&lt;node&gt;
  &lt;interface name=&quot;org.hawa130.dbuschat&quot;&gt;
    &lt;signal name=&quot;message&quot;&gt;
      &lt;arg name=&quot;name&quot; type=&quot;s&quot; direction=&quot;out&quot;/&gt;
      &lt;arg name=&quot;content&quot; type=&quot;s&quot; direction=&quot;out&quot;/&gt;
    &lt;/signal&gt;
    &lt;signal name=&quot;action&quot;&gt;
      &lt;arg name=&quot;name&quot; type=&quot;s&quot; direction=&quot;out&quot;/&gt;
      &lt;arg name=&quot;content&quot; type=&quot;s&quot; direction=&quot;out&quot;/&gt;
    &lt;/signal&gt;
  &lt;/interface&gt;
&lt;/node&gt;</code></pre><p>其中 <code>interface</code> 的 <code>name</code> 属性写文件名。</p><p>接下来里面的是信号，这里示例的有两个信号，一个名为「message」，另一个名为「action」，表示聊天的消息以及成员的动作（加入 / 退出）。</p><p>每个信号里面包含了信号的参数。一个典型的消息需要有发出者和消息内容本身，所以需要两个参数：<code>name</code>属性是可选的，但是为了标记，最好还是写上，「name」指的是成员的名字，「content」指的是消息内容；后面的 <code>type</code> 为 <code>s</code>，指字符串；<code>direction</code> 为  <code>out</code>。</p><p>这个 xml 的内容可以按照自己的需要写。可以参考<a href="https://www.gnu.org/software/emacs/manual/html_node/dbus/Introspection.html">简明文档</a>以及更详细的<a href="https://dbus.freedesktop.org/doc/dbus-specification.html#introduction">官方文档</a>，了解写 D-Bus xml 的详细知识。</p><h3 id="toc_200">项目配置</h3><p>在你的 <code>.pro</code> 项目配置文件中，添加下面的内容，之后「<strong>添加外部库</strong>」。</p><pre><code class="lang-makefile">QT += dbus

DBUS_ADAPTORS += org.hawa130.dbuschat.xml
DBUS_INTERFACES += org.hawa130.dbuschat.xml</code></pre><h3 id="toc_201">引入头文件</h3><p>接下来 Build 会产生头文件。名为 <code>&lt;项目名&gt;_adaptor.h</code> 以及 <code>&lt;项目名&gt;_interface.h</code>。</p><p>以我的为例，在需要用到 D-Bus 的代码加入下面的头文件即可。</p><pre><code class="lang-cpp">#include &quot;dbuschat_adaptor.h&quot;
#include &quot;dbuschat_interface.h&quot;</code></pre><h3 id="toc_202">QDbus 的使用</h3><p>可以理解成线程间的信号与槽。</p><p>可以参考示例项目的代码理解。</p><pre><code class="lang-cpp">new ChatAdaptor(this);
QDBusConnection::sessionBus().registerObject(&quot;/&quot;, this);

org::example::chat *iface;
iface = new org::example::chat(QString(), QString(), QDBusConnection::sessionBus(), this);
// 可以将 iface 作为普通的 QObject 来举行信号与槽的连接
connect(iface, SIGNAL(message(QString,QString)), this, SLOT(messageSlot(QString,QString)));</code></pre>
