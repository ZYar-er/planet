<blockquote><img src="https://s2.loli.net/2022/08/01/XwlnJjUEqyDB6WZ.png" alt="Featured image of post 操作系统：线程" /><h2 id="进程概要">进程概要</h2>
<h3 id="栈区是否是程序的一部分">栈区是否是程序的一部分？</h3>
<p>不是，栈区是进程的一部分，而程序不是进程。(什么咬文嚼字233)<br>
概念：进程是正在运行的程序。包括程序计数器，栈区和数据区。</p>
<h3 id="进程创建的四种情况是啥">进程创建的四种情况是啥？</h3>
<p>系统初始化，用户请求，系统调用，批处理初始化。</p>
<h2 id="父子进程">父子进程</h2>
<h3 id="fork-创建子进程-和-exec-执行-的区别">Fork (创建子进程) 和 Exec (执行) 的区别</h3>
<p>我觉得括号里面说的很明白了2333</p>
<ul>
<li>Fork: 子进程和父进程的代码区，堆栈区是相同的。</li>
<li>Exec: 在同一个进程中，用程序镜像替换这个进程（使用执行程序的程序段和代码段覆盖）。</li>
</ul>
<h3 id="命令行shell如何执行用户指令">命令行(Shell)如何执行用户指令？</h3>
<p>用 UNIX 系统举例 (详情见书 P88 最后一段)</p>
<ol>
<li>读取并解析字符串，找到程序</li>
<li>使用 <code>fork</code>/<code>exec</code> 系统调用生成子进程</li>
<li>子进程使用 <code>execvp</code> 系统调用，使用执行程序的程序段和代码段覆盖。</li>
<li>父进程进入等待状态。</li>
</ol>
<p>概念：进程的状态有准备态(Ready)，等待态(Waiting)，运行态(Running)</p>
<h3 id="读这段代码说最终有几个进程捏">读这段代码，说最终有几个进程捏？</h3>
<p>先告诉你有四个。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">pid</span> <span class="o">=</span> <span class="nf">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><figure 
	>
	<a href="https://s2.loli.net/2022/08/01/8csaxz47l62pjKQ.jpg" >
		<img src="https://s2.loli.net/2022/08/01/8csaxz47l62pjKQ.jpg"
			
			
			
			loading="lazy"
			alt="Let&rsquo;s paint a tree, shall we?">
	</a>
	
	<figcaption>Let’s paint a tree, shall we?</figcaption>
	
</figure></p>
<h2 id="深入进程">深入进程</h2>
<h3 id="进程终结时候发生了啥">进程终结时候发生了啥？</h3>
<p>移除所有队列，释放占用的系统资源(内存等)，然后返回操作系统。有可能出现僵尸进程，得让父进程来终结:-P</p>
<p>进程终结状态如下：</p>
<ol>
<li>程序自愿退出：执行完了/遇到一般错误</li>
<li>被迫退出：进程遇到严重错误/被其他进程发信号退出</li>
</ol>
<h3 id="pcb-不是电路板">PCB 不是电路板！</h3>
<p>PCB (Process Control Block)：进程控制块。重点包括以下东西：</p>
<ol>
<li>进程状态</li>
<li>程序计数器</li>
<li>CPU寄存器</li>
<li>CPU调度信息</li>
<li>内存管理信息</li>
<li>Accounting information</li>
<li>输入输出状态信息</li>
</ol>
<p>注意：第六条直译为会计信息。我有两个理解：进程状态信息 / 用户信息
（我的上帝啊，谁能给我本翻译得十分不错的 Modern Operating System 啊）</p>
<h2 id="线程概要">线程概要</h2>
<h3 id="线程提出的目的">线程提出的目的</h3>
<p>对于操作系统来说，中断或者切换一个进程的代价太高了。</p>
<h3 id="弹出式线程的定义">弹出式线程的定义</h3>
<p>操作系统收到一个信息后，创建一个线程来处理信息。<br>
概念：进程分为用户态线程（管理归进程），系统态线程（管理归操作系统），混合态进程，以及弹出态进程</p>
<h3 id="用户态线程的优劣">用户态线程的优劣</h3>
<h4 id="优点">优点</h4>
<ol>
<li>线程调用很快。</li>
<li>线程可以自行定义调度算法。</li>
<li>减轻内核调用线程压力。（内核看不到用户态线程）</li>
</ol>
<h4 id="缺点">缺点</h4>
<ol>
<li>线程无法调用阻塞式系统调用。（毕竟只能访问进程里面的玩意）</li>
<li>没有时钟，除非运行完退出，其他线程无法运行。</li>
</ol>
<h2 id="调度算法">调度算法</h2>
<h3 id="调度发生的时机">调度发生的时机</h3>
<ol>
<li>新进程的创建</li>
<li>进程的退出</li>
<li>某进程需要IO操作,</li>
<li>IO设备申请CPU中断 (称之为IO中断)</li>
</ol>
<h3 id="一道计算题">一道计算题</h3>
<p>By Multilevel Quene Fixed Priority scheduling algorithm, there are 3 priority quenes and 7 processes with following information. Draw the CPU scheduling Gantt chart and complete the following table for the give processes information.</p>
<p>通过多层级队列混合优先级 (Multilevel Quene Fixed Priorty) 调度算法，总共有三个优先级队列和七个进程，信息如下。画出 CPU 调度甘特图，然后根据信息填写最下面的表格。</p>
<p><figure 
	>
	<a href="https://s2.loli.net/2022/08/01/ve12iqCUrXcMGVs.png" >
		<img src="https://s2.loli.net/2022/08/01/ve12iqCUrXcMGVs.png"
			
			
			
			loading="lazy"
			>
	</a>
	
</figure>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/eQOM1fvgwrCto2h.png" >
		<img src="https://s2.loli.net/2022/08/01/eQOM1fvgwrCto2h.png"
			
			
			
			loading="lazy"
			>
	</a>
	
</figure><br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/JQOcHP8YTVKvbpW.png" >
		<img src="https://s2.loli.net/2022/08/01/JQOcHP8YTVKvbpW.png"
			
			
			
			loading="lazy"
			>
	</a>
	
</figure><br>
<figure 
	>
	<a href="https://s2.loli.net/2022/08/01/J6dXQD7YcPlbizB.jpg" >
		<img src="https://s2.loli.net/2022/08/01/J6dXQD7YcPlbizB.jpg"
			
			
			
			loading="lazy"
			>
	</a>
	
</figure></p>
<h2 id="进程间通信">进程间通信</h2>
<h3 id="基础概念">基础概念</h3>
<ul>
<li>竞争条件 (race condition) ：多个进程间读取一个数据。</li>
<li>临界区 (critical region)：要与其他进程共享数据区域。</li>
<li>互斥访问 (mutual exclusion) 和忙等待 (busy waiting)</li>
</ul>
<h3 id="互斥访问方案原则">互斥访问方案原则</h3>
<ol>
<li>任意两个进程不能同时在临界区。</li>
<li>不对 CPU 速度和数量做出假设。</li>
<li>临界区外运行进程不能阻塞其他进程。</li>
<li>不要让进程进入临界区前无限制等待。</li>
</ol>
<h3 id="阅读代码填空">阅读代码，填空</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">enter_region:</span>
</span></span><span class="line"><span class="cl">	<span class="nf">MOVE</span> <span class="no">REGISTER</span><span class="p">,</span><span class="no">___</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="no">___</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">XCHG</span> <span class="no">REGISTER</span><span class="p">,</span><span class="no">LOCK</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">CMP</span>  <span class="no">REGISTER</span><span class="p">,</span><span class="c1">#1;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">JE</span>   <span class="no">OK</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">CALL</span> <span class="no">___</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="no">___</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">JMP</span>  <span class="no">___</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="no">___</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">ok:</span> <span class="nf">RET</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nl">leave_region:</span>
</span></span><span class="line"><span class="cl">	<span class="nf">MOVE</span> <span class="no">LOCK</span><span class="p">,</span><span class="no">___</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="no">___</span><span class="c1">;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RET</span><span class="c1">;
</span></span></span></code></pre></div><p>根据 <code>CMP REGISTER,#1; JE OK; ok: RET;</code> 可分析出 <code>#1</code> 是没上锁，<code>#0</code> 是上锁了。<br>
<code>XCHG</code> 可以互换两个寄存器的值，如果第一个空填入的是 <code>#1</code> ，那么无论如何，判断都是没上锁。所以第一个空填入 <code>#0</code> 。<br>
第二个和第三个空是忙等待的东西，分别填的是 <code>thread_yield</code> （找另外一个进程）和 <code>enter_region</code> 。<br>
第四个空填入 <code>#1</code> ，用完了就解锁。</p>
<p>概念 互斥访问策略</p>
<ol>
<li>关闭中断。(单 CPU 有效)</li>
<li>锁变量与忙等待。</li>
<li>严格轮换。</li>
<li>Peterson 算法。</li>
<li>汇编 <code>TSL</code> 指令。</li>
</ol>
<h3 id="严格轮换机制作业">严格轮换机制作业</h3>
<p>请修改附件中的代码，实现strict alternation机制（注要能够运行）。此外需要说明程序中那个部分是关键区，以及它为什么是关键区。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt; // For sleep().</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Critical region, because both threads needs to access this.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Lock Variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Thread 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="o">*</span> <span class="nf">th</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span> 
</span></span><span class="line"><span class="cl">		<span class="k">while</span><span class="p">(</span><span class="n">turn</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span> <span class="cm">/*loop*/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>   <span class="c1">// Access Critical Region
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;a=%d haha</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span><span class="c1">// Stop access.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">turn</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>     <span class="c1">// Change mark.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="kt">pthread_t</span> <span class="n">myth</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nf">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">myth</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">th</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="c1">// Thread 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span><span class="p">(</span><span class="n">turn</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>   <span class="cm">/*loop*/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>   <span class="c1">// Access Critical Region.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;a=%d hehe</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span><span class="c1">// Stop access.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">turn</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>     <span class="c1">// Change mark.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以下是编译运行方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcc thread.c -lpthread -o thread <span class="o">&amp;&amp;</span> ./thread
</span></span><span class="line"><span class="cl">ps -aux <span class="p">|</span> grep thread <span class="c1"># 记下 pid 号码</span>
</span></span><span class="line"><span class="cl">top -H -p PID <span class="c1"># 查看该 PID 对应的线程状态</span>
</span></span></code></pre></div><p>本程序的关键区是 <code>a</code> 和 <code>turn</code> ，因为它是两个进程共享的数据区域。其中 <code>a</code> 是两个进程互相访问的数据区，turn 是锁变量。</p>
<h3 id="生产者和消费者问题">生产者和消费者问题</h3>
<p>阅读代码，看看有啥问题。</p>
<p><figure 
	>
	<a href="https://s2.loli.net/2022/08/01/M7awq2niZU4m5LY.png" >
		<img src="https://s2.loli.net/2022/08/01/M7awq2niZU4m5LY.png"
			
			
			
			loading="lazy"
			>
	</a>
	
</figure></p>
<p>在单核 CPU 上：</p>
<p>先执行消费者进程：<br>
发现仓库里没有东西，准备睡眠。但是还没睡眠，进程切换到生产者了。<br>
生产者开始生产产品，发现仓库里有东西，向消费者进程发出唤醒信号。进程切换到消费者。<br>
消费者进程是醒着的，只是准备睡眠，把唤醒信号忽略掉，然后睡眠了，退出了 CPU 。<br>
最后生产者把仓库填满了，也睡了。两个进程都睡了:-P</p>
<p>如果目前仓库满了：<br>
生产者决定睡眠，但还没睡，进程切换到消费者了。<br>
消费者用了一个产品，发现仓库里数量为 N-1，唤醒生产者。<br>
生产者忽略了唤醒信号，睡眠。<br>
消费者用完了所有东西，也睡了:-P</p>
<p>要点：准备睡眠时切换进程了，唤醒信号被忽略。</p>
<h3 id="mutex互斥锁和-semaphore信号量的不同">Mutex（互斥锁）和 Semaphore（信号量）的不同</h3>
<p>Mutex 实现在用户态，代价低，数量上限高。Semaphore 实现在内核态，代价高，数量上限低。</p></blockquote>