<p>相关文章：《<a href="/2023/09/09/aether-manual/" title="Aether使用指南(主体功能概述)">Aether使用指南(主体功能概述)</a>》</p>
<p>本文章为针对一年前技术探索的回想与记录，因时间跨度过大，有部分实现细节已<hr /><p>相关文章：《<a href="/2023/09/09/aether-manual/" title="Aether使用指南(主体功能概述)">Aether使用指南(主体功能概述)</a>》</p><p>本文章为针对一年前技术探索的回想与记录，因时间跨度过大，有部分实现细节已经遗忘，望谅解。</p><p>因为篇幅原因，本文只做Aether的简单介绍以及在Android下的兼容开发过程，Aether的使用以及针对Gradle Dependency Conflict Resolution的适配见后续文章。</p><blockquote><p>Aether is a library for working with artifact repositories. Aether deals with the specification of local repository, remote repository, developer workspaces, artifact transports, and artifact resolution.<br>(Aether是一个用于处理Artifact仓库的库。 Aether能够处理本地Maven仓库、远程Maven仓库、开发工作区、Artifact的传输和Artifact的解析。)</p></blockquote><h2 id="什么是Aether？我们为什么要使用Aether？"><a href="#什么是Aether？我们为什么要使用Aether？" class="headerlink" title="什么是Aether？我们为什么要使用Aether？"></a>什么是Aether？我们为什么要使用Aether？</h2><p>Aether是<em>Eclipse Foundation</em>下的一个用于Maven拉取与本地仓库管理的项目。不同于Maven，Aether是Maven包装后的可插件版。</p><p>通过Aether，开发者可以把控Artifact拉取以及存放过程中的各种细节，并自定义<em>依赖冲突解决策略</em>、<em>版本比较方案</em>、<em>依赖树遍历策略</em>等功能。</p><p>当然，因为我的目的是在Android上运行一个Maven Resolver，经过和朋友们的筛选，发现Aether较符合我们的要求(兼容度与功能丰富度)，所以使用了他。</p><p><strong>Aether现已废弃，更名为<a href="https://github.com/apache/maven-resolver">maven-resolver</a>并持续更新中。</strong></p><blockquote><p>相关链接：<br><a href="https://projects.eclipse.org/projects/technology.aether">Aether Project Website(已废弃)</a><br><a href="https://github.com/apache/maven-resolver">maven-resolver</a><br><a href="https://wiki.eclipse.org/Aether">Aether Wiki</a></p></blockquote><h2 id="Aether的依赖结构"><a href="#Aether的依赖结构" class="headerlink" title="Aether的依赖结构"></a>Aether的依赖结构</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aetherVersion</span>&gt;</span>1.0.0.v20140518<span class="hljs-tag">&lt;/<span class="hljs-name">aetherVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mavenVersion</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">mavenVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">wagonVersion</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">wagonVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-connector-basic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-transport-file<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-transport-http<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.aether<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aether-transport-wagon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aetherVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-aether-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mavenVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.wagon<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wagon-ssh<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;wagonVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述依赖用途说明 *(摘自Aether Wiki)*：</p><ul><li>aether-api<br>此Jar依赖包含了Aether interfaces，Aether系统的入口类是<em>org.eclipse.aether.RepositorySystem</em>。</li><li>aether-util<br>如名，此依赖包含了许多工具类，并提供了常用系统组件。</li><li>aether-impl<br>此依赖包含了仓库系统接口的实例化类。<strong>除非在特殊情况下，需要自定义Aether系统的内部处理逻辑，或者需要手动协同一些功能，在程序的开发过程中不建议直接访问&#x2F;操作此依赖中的任何类。</strong></li><li>aether-connector-basic<br>Artifact到远程Repository的上传和下载是通过Repository connector实现的。 这一connector一部分通用，并将部分工作委托给可插拔的传输协议和repository layouts。 因此，需要明确的是，该connector本身无法访问任何repository，必需包含一个或多个传输模块才能组合为正常运行的系统。</li><li>ether-transport-file<br>此依赖提供了通过file或者URL访问repository的支持库。</li><li>aether-transport-http<br>此依赖提供了访问基于http或者https协议的repository的支持库。</li><li>aether-transport-wagon<br>此依赖基于Maven Wagon，通过已有Wagon providers来访问repository。</li><li>wagon-ssh<br>此依赖项补充了前面提到的 aether-transport-wagon库，并添加了对使用 scp: 和 sftp: 方案进行传输的支持。 它包含在上面的 POM 片段中只是一个示例，可以使用任何符合需求的 Wagon provider；也可以根本不使用，此时，可以从依赖中删除 aether-transport-wagon。</li><li>maven-aether-provider<br>此依赖提供了使用 Maven POM 作为Artifact descriptors并从中提取依赖关系信息。 此外，它还提供了对Maven Repository中使用的其他元数据(metadata)文件的处理。</li></ul><p><strong>注意: Aether需要1.5及以上的JDK来编译及允许。</strong></p><h2 id="针对Android的适配"><a href="#针对Android的适配" class="headerlink" title="针对Android的适配"></a>针对Android的适配</h2><p>适配问题其实很简单明了，只需要抓住主要矛盾：需要什么？有什么不同导致了需要的东西缺失？以什么方式来补全缺失？</p><p>从Jre上来看(暂且不论版本问题，毕竟Aether是个老项目，Java 1.5+即可)，Android上的Jre与PC端的不同点主要在于Android上的Jre是针对Android的阉割优化版，大体内容不变，但是不包含许多javax包下的类，以及所有针对PC平台的类。</p><h3 id="剖析：需要什么？有什么不同导致了需要的东西缺失？"><a href="#剖析：需要什么？有什么不同导致了需要的东西缺失？" class="headerlink" title="剖析：需要什么？有什么不同导致了需要的东西缺失？"></a>剖析：需要什么？有什么不同导致了需要的东西缺失？</h3><p>(当然，此文编造的是不断的尝试后的事后诸葛亮行为，解决问题的最好方式还是实践求真理，做个简单的demo并且不断地尝试了。)</p><p>我们仍从上述依赖配置中探索，首先针对Aether API、util、impl以及provider部分，因为只使用了基础的类，显然兼容度很高；然后，分析剩下的transport协议库，对于file部分没啥争议，毕竟Java 1.8之后才会考虑Path这个影响兼容性的东东，那么就是网络协议部分可能有问题了。</p><p>为了不纸上谈兵，我们先做一个简单的项目，并写一行，debug打包允许：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultServiceLocator</span> <span class="hljs-variable">locator</span> <span class="hljs-operator">=</span> MavenRepositorySystemUtils.newServiceLocator();<br></code></pre></td></tr></table></figure><p>果不其然，我们可以得到一个报错:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">java.lang.NoSuchMethodError:No direct method &lt;init&gt;(Ljavax/net/ssl/SSLSocketFactory;Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V in class Lorg/apache/http/conn/ssl/SSLSocketFactory; or its super classes(declaration of &#x27;org.apache.http.conn.ssl.SSLSocketFactory&#x27; appears in /system/framework/framework.jar!classes3.dex)<br><br>framework/framework.jar!classes3.dex)<br><br>at org.eclipse.aether.transport.http.SslSocketFactory.&lt;init(SslSocketFactory.java:57)<br><br>...<br></code></pre></td></tr></table></figure><p>原来是<em>org.eclipse.aether.transport.http.SslSocketFactory</em>的构造方法里面出现问题了，我们顺藤摸瓜看看为啥：</p><p>(在Android Studio内，切换到Project工程结构展示，展开External Libraries，进入org.eclipse.aether.transport-http包内查找)</p><p><em>org.eclipse.aether.transport.http.SslSocketFactory</em>文件内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SslSocketFactory</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.http.conn.ssl.SSLSocketFactory<br>&#123;<br>...<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SslSocketFactory</span><span class="hljs-params">( SSLSocketFactory socketfactory, X509HostnameVerifier hostnameVerifier,</span><br><span class="hljs-params">                              String[] cipherSuites, String[] protocols )</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>( socketfactory, hostnameVerifier );<br> <br>        <span class="hljs-built_in">this</span>.cipherSuites = cipherSuites;<br>        <span class="hljs-built_in">this</span>.protocols = protocols;<br>    &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>其实在AS内可以看到这里已经显示报错了:<br><img src="/../images/aether_error_in_as.png" alt="AS code error"></p><p>显然是父类根本没这个构造方法。那么问题来了，为什么在PC上的JRE可以用，Android上的却不行了？查资料可知：<br><img src="/../images/apache_http_client_removal.png" alt="apache_http_client_removal"></p><p>原来是，Android这小子不识抬举，大大阉割了Apache Http提供的Android特别版，转向使用OKhttp了，导致使用不了大部分Apache Http API。</p><p>知道问题了那么解决方案是什么？</p><h3 id="以什么方式来补全缺失？"><a href="#以什么方式来补全缺失？" class="headerlink" title="以什么方式来补全缺失？"></a>以什么方式来补全缺失？</h3><h4 id="Try-1-导入-Apache-Http-Legacy-包-失败"><a href="#Try-1-导入-Apache-Http-Legacy-包-失败" class="headerlink" title="Try 1: 导入 Apache Http Legacy 包 (失败)"></a>Try 1: 导入 Apache Http Legacy 包 (失败)</h4><p>导入<em>org.apache.http.legacy</em>包，但是这么简单的办法当然是不行的，在许多设备上无法成功，很小一部分设备可以。(点名批评Homo OS based AOSP，就是它兼容性最差。)</p><h4 id="Try-2-使用JarFilter替换不兼容类，改用兼容代码-失败"><a href="#Try-2-使用JarFilter替换不兼容类，改用兼容代码-失败" class="headerlink" title="Try 2: 使用JarFilter替换不兼容类，改用兼容代码 (失败)"></a>Try 2: 使用JarFilter替换不兼容类，改用兼容代码 (失败)</h4><p><a href="https://github.com/nekocode/JarFilterPlugin">JarFilter</a>是一个用于编译时替换所依赖Jar中指定类的Gradle Plugin。</p><p>于是有了以下操作:</p><p>1.使用JarFilter移除org.eclipse.aether.transport.http.SslSocketFactory</p><p>2.改用新自定义类，来适配安卓版的Apache Http，完成相关功能</p><h5 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h5><p>首先，在app模块下的build.gradle文件内添加如下内容:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&quot;jar-filter&quot;</span><br> <br>jarFilters &#123;<br>    <span class="hljs-comment">//兼容安卓版本的apache SSLSocketFactory</span><br>    <span class="hljs-string">&quot;org.eclipse.aether:aether-transport-http:(.*)&quot;</span> &#123;<br>        excludes = [<br>                <span class="hljs-string">&#x27;org/eclipse/aether/transport/http/SslSocketFactory.class&#x27;</span>,<br>                <span class="hljs-string">&#x27;org/eclipse/aether/transport/http/SslSocketFactory\\$(.*).class&#x27;</span><br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再创建一个同名的替换类<em>org.eclipse.aether.transport.http.SslSocketFactory</em>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.eclipse.aether.transport.http;<br> <br><span class="hljs-keyword">import</span> org.apache.http.conn.ConnectTimeoutException;<br><span class="hljs-keyword">import</span> org.apache.http.conn.HttpInetSocketAddress;<br><span class="hljs-keyword">import</span> org.apache.http.conn.scheme.HostNameResolver;<br><span class="hljs-keyword">import</span> org.apache.http.conn.scheme.LayeredSchemeSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.http.conn.scheme.LayeredSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.http.conn.scheme.SchemeLayeredSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.http.conn.ssl.X509HostnameVerifier;<br><span class="hljs-keyword">import</span> org.apache.http.params.HttpConnectionParams;<br><span class="hljs-keyword">import</span> org.apache.http.params.HttpParams;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketTimeoutException;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.KeyStore;<br><span class="hljs-keyword">import</span> java.security.KeyStoreException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.UnrecoverableKeyException;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateException;<br> <br><span class="hljs-keyword">import</span> javax.net.ssl.HostnameVerifier;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocket;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br> <br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SslSocketFactory</span><br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.http.conn.ssl.SSLSocketFactory <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SchemeLayeredSocketFactory</span>,<br>        LayeredSchemeSocketFactory, LayeredSocketFactory &#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SSLContext sslcontext;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> javax.net.ssl.SSLSocketFactory socketfactory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HostNameResolver nameResolver;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">X509HostnameVerifier</span> <span class="hljs-variable">hostnameVerifier</span> <span class="hljs-operator">=</span> BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] cipherSuites;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] protocols;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SslSocketFactory</span><span class="hljs-params">(SslConfig config)</span> <span class="hljs-keyword">throws</span> UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException, CertificateException, IOException &#123;<br>        <span class="hljs-built_in">this</span>(getSocketFactory(config.context), getHostnameVerifier(config.verifier), config.cipherSuites,<br>                config.protocols);<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SSLSocketFactory <span class="hljs-title function_">getSocketFactory</span><span class="hljs-params">(SSLContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> (context != <span class="hljs-literal">null</span>) ? context.getSocketFactory() : (SSLSocketFactory) SSLSocketFactory.getDefault();<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> X509HostnameVerifier <span class="hljs-title function_">getHostnameVerifier</span><span class="hljs-params">(HostnameVerifier verifier)</span> &#123;<br>        <span class="hljs-keyword">return</span> (verifier != <span class="hljs-literal">null</span>) ? X509HostnameVerifierAdapter.adapt(verifier)<br>                : org.apache.http.conn.ssl.SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SslSocketFactory</span><span class="hljs-params">(SSLSocketFactory socketfactory, X509HostnameVerifier hostnameVerifier,</span><br><span class="hljs-params">                             String[] cipherSuites, String[] protocols)</span> <span class="hljs-keyword">throws</span> UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException, CertificateException, IOException &#123;<br>        <span class="hljs-built_in">super</span>(defaultKeyStore());<br>        <span class="hljs-built_in">this</span>.sslcontext = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.socketfactory = socketfactory;<br>        <span class="hljs-built_in">this</span>.nameResolver = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.setHostnameVerifier(hostnameVerifier);<br>        <span class="hljs-built_in">this</span>.cipherSuites = cipherSuites;<br>        <span class="hljs-built_in">this</span>.protocols = protocols;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> KeyStore <span class="hljs-title function_">defaultKeyStore</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException &#123;<br>        <span class="hljs-type">KeyStore</span> <span class="hljs-variable">trustStore</span> <span class="hljs-operator">=</span> KeyStore.getInstance(KeyStore.getDefaultType());<br>        trustStore.load(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> trustStore;<br>    &#125;<br> <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareSocket</span><span class="hljs-params">(SSLSocket socket)</span><br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (cipherSuites != <span class="hljs-literal">null</span>) &#123;<br>            socket.setEnabledCipherSuites(cipherSuites);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (protocols != <span class="hljs-literal">null</span>) &#123;<br>            socket.setEnabledProtocols(protocols);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">createLayeredSocket</span><span class="hljs-params">(Socket socket, String target, <span class="hljs-type">int</span> port, <span class="hljs-type">boolean</span> autoClose)</span> <span class="hljs-keyword">throws</span> IOException, UnknownHostException &#123;<br>        <span class="hljs-type">SSLSocket</span> <span class="hljs-variable">sslSocket</span> <span class="hljs-operator">=</span> (SSLSocket) <span class="hljs-built_in">this</span>.socketfactory.createSocket(<br>                socket,<br>                target,<br>                port,<br>                autoClose<br>        );<br>        prepareSocket(sslSocket);<br>        sslSocket.startHandshake();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hostnameVerifier != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.hostnameVerifier.verify(target, sslSocket);<br>        &#125;<br>        <span class="hljs-comment">// verifyHostName() didn&#x27;t blowup - good!</span><br>        <span class="hljs-keyword">return</span> sslSocket;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">createLayeredSocket</span><span class="hljs-params">(Socket socket, String target, <span class="hljs-type">int</span> port, HttpParams params)</span> <span class="hljs-keyword">throws</span> IOException, UnknownHostException &#123;<br>        <span class="hljs-type">SSLSocket</span> <span class="hljs-variable">sslSocket</span> <span class="hljs-operator">=</span> (SSLSocket) <span class="hljs-built_in">this</span>.socketfactory.createSocket(<br>                socket,<br>                target,<br>                port,<br>                <span class="hljs-literal">true</span>);<br>        prepareSocket(sslSocket);<br>        sslSocket.startHandshake();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hostnameVerifier != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.hostnameVerifier.verify(target, sslSocket);<br>        &#125;<br>        <span class="hljs-comment">// verifyHostName() didn&#x27;t blowup - good!</span><br>        <span class="hljs-keyword">return</span> sslSocket;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">createSocket</span><span class="hljs-params">(HttpParams params)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">SSLSocket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> (SSLSocket) <span class="hljs-built_in">this</span>.socketfactory.createSocket();<br>        prepareSocket(sock);<br>        <span class="hljs-keyword">return</span> sock;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">connectSocket</span><span class="hljs-params">(Socket socket, InetSocketAddress remoteAddress, InetSocketAddress localAddress, HttpParams params)</span> <span class="hljs-keyword">throws</span> IOException, UnknownHostException, ConnectTimeoutException &#123;<br>        <span class="hljs-keyword">if</span> (remoteAddress == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Remote address may not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (params == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;HTTP parameters may not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> socket != <span class="hljs-literal">null</span> ? socket : <span class="hljs-built_in">this</span>.socketfactory.createSocket();<br>        <span class="hljs-keyword">if</span> (localAddress != <span class="hljs-literal">null</span>) &#123;<br>            sock.setReuseAddress(params.getBooleanParameter(<span class="hljs-string">&quot;http.socket.reuseaddr&quot;</span>, <span class="hljs-literal">false</span>));<br>            sock.bind(localAddress);<br>        &#125;<br> <br>        <span class="hljs-type">int</span> <span class="hljs-variable">connTimeout</span> <span class="hljs-operator">=</span> HttpConnectionParams.getConnectionTimeout(params);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">soTimeout</span> <span class="hljs-operator">=</span> HttpConnectionParams.getSoTimeout(params);<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            sock.setSoTimeout(soTimeout);<br>            sock.connect(remoteAddress, connTimeout);<br>        &#125; <span class="hljs-keyword">catch</span> (SocketTimeoutException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectTimeoutException</span>(<br>                    <span class="hljs-string">&quot;Connect to &quot;</span> + remoteAddress + <span class="hljs-string">&quot; timed out :&quot;</span> + ex.getMessage());<br>“连接到” + 远程地址 + “ 超时 ：” + ex.getMessage（））;<br>        &#125;<br> <br>        String hostname;<br>        <span class="hljs-keyword">if</span> (remoteAddress <span class="hljs-keyword">instanceof</span> HttpInetSocketAddress) &#123;<br>            hostname = ((HttpInetSocketAddress) remoteAddress).getHttpHost().getHostName();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hostname = remoteAddress.getHostName();<br>        &#125;<br> <br>        SSLSocket sslsock;<br>        <span class="hljs-comment">// Setup SSL layering if necessary</span><br>        <span class="hljs-keyword">if</span> (sock <span class="hljs-keyword">instanceof</span> SSLSocket) &#123;<br>            sslsock = (SSLSocket) sock;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> remoteAddress.getPort();<br>            sslsock = (SSLSocket) <span class="hljs-built_in">this</span>.socketfactory.createSocket(sock, hostname, port, <span class="hljs-literal">true</span>);<br>            prepareSocket(sslsock);<br>        &#125;<br>        sslsock.startHandshake();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hostnameVerifier != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.hostnameVerifier.verify(hostname, sslsock);<br>                <span class="hljs-comment">// verifyHostName() didn&#x27;t blowup - good!</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException iox) &#123;<br>                <span class="hljs-comment">// close the socket before re-throwing the exception</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    sslsock.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception x) &#123; <span class="hljs-comment">/*ignore*/</span> &#125;<br>                <span class="hljs-keyword">throw</span> iox;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sslsock;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们直接使用Android所兼容的Apache Http API即可。</p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>经实验，部分手机可以允许，Homo OS依旧无法运行。最大的问题在于，这个JarFilter支持的AGP版本太低，在AGP版本较高时便不能在build release时正常运行，在部分版本下只能在build debug正常运行。</p><p>寄。</p><h4 id="Try3-强行塞入PC端Jre的一些类-Apache-Http包-成功"><a href="#Try3-强行塞入PC端Jre的一些类-Apache-Http包-成功" class="headerlink" title="Try3: 强行塞入PC端Jre的一些类+Apache Http包 (成功)"></a>Try3: 强行塞入PC端Jre的一些类+Apache Http包 (成功)</h4><p>既然，Aether是transport缺少Apache Http API而无法运行，那么是不是可以直接把Apache Http给强行迁移过来呢？是，但是需要一定的魔改。</p><p>众所周知，JVM运行中，因为双亲委托机制的存在，用户能操作的ClassLoader是不能覆盖系统提供的类文件的，否则会有各种奇妙的异常(因为不同设备对Apache Http的阉割情况可能不同)，所以我们不能简单地直接依赖原版Apache Http包。</p><p>那么，较优的方法是通过JarJar修改所有包下关于Apache Http的包名信息为自定义的，然后强行塞入App内，<del>让它成为你想要的形状</del>。</p><h5 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h5><p>(因为当时没完整记录这个流程，导致没有截图啥的信息，只在此说明大概思路了。)</p><p>首先，下载所需版本的<em>aether-transport-http.jar</em>、<em>Apache Http Core.jar</em>、<em>Apache Http Client.jar</em>；</p><p>然后，利用JarJar手写规则，将<em>org.apache.http</em>包名更改为你自定义的包名；</p><p>最后，去掉build.gradle中对于aether-transport-http、Apache Http Core以及Apache Http Client的依赖，改为上述已修改的Jar。</p><p>如果没有意外的话，就有意外了，发现又有新的报错，是缺少javax.*包下的类，这个解决也很简单暴力，直接复制一份Jre 1.8下lib文件夹内的rt.jar，删除一些无关类即可。(删除什么我已经忘记了，可以自行尝试，即使删的少了也并不会影响运行。)</p><h5 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h5><p>经实验，本解决方案完美适配已知所有设备（Homo也难不倒它），可以放心地使用此方案。</p>