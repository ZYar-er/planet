<h1 id="STM32使用硬件IIC驱动SHT30温湿度传感器"><a href="#STM32使用硬件IIC驱动SHT30温湿度传感器" class="headerlink" title="STM32使用硬件IIC驱动SHT30温湿度传感器"></a>STM32使用硬件II<hr /><h1 id="STM32使用硬件IIC驱动SHT30温湿度传感器"><a href="#STM32使用硬件IIC驱动SHT30温湿度传感器" class="headerlink" title="STM32使用硬件IIC驱动SHT30温湿度传感器"></a>STM32使用硬件IIC驱动SHT30温湿度传感器</h1><p><del>喜报，终于写完了</del></p><p>当时网上 xjb乱逛，突然看见有人讨论小米温湿度传感器，我当时也买了个这玩意，于是突然感兴趣查了一下用的传感器——SHT30，协议是IIC。当时想着能不能自己也山寨一个小米温湿度传感器 <del>，然后下单了SHT30之后就再也没动过</del> 。这会放假了，想起来这玩意，就整一整吧，顺便再 <strong>学习一遍IIC协议</strong> 。图个方便，这次先用硬件IIC。</p><h2 id="IIC-协议"><a href="#IIC-协议" class="headerlink" title="IIC 协议"></a>IIC 协议</h2><h2 id="I2C协议介绍"><a href="#I2C协议介绍" class="headerlink" title="I2C协议介绍"></a>I2C协议介绍</h2><h3 id="（1）I2C协议简介"><a href="#（1）I2C协议简介" class="headerlink" title="（1）I2C协议简介"></a>（1）I2C协议简介</h3><blockquote><p>【省流版】：</p><p>串行通信协议的一种，属于串行通信协议中的半双工同步通信。</p><p>IIC是一种被定义好的标准，采用二线制，一条数据线，一条时钟线；</p><p>数据线传输数据，一位一位传输；时钟线控制传输速率。</p></blockquote><p>I2C总线是Philips公司在八十年代初推出的一种<strong>串行、半双工的总线</strong>，主要用于近距离、低速的芯片之间的通信。</p><p>每个IIC器件有两条线路：</p><ul><li>SDA是供主器件和节点发送和接收数据的线路。</li><li>SCL是承载时钟信号的线路。SCL总是由I2C主器件生成。规范对时钟信号的低相位和高相位有最短周期要求。</li></ul><p>I2C总线仅使用两条双向线路：每个器件的SDA和SCL用于简单的IC间通信。</p><img src="https://yun.ksfu.top/blog/SHT30H/11.webp" style="zoom:80%;" /><p>硬件最重要的注意是在SDA和SCL上加入上拉电阻。I2C器件通过开集或开漏引脚连接到总线，将线路拉低。当没有数据传输时，I2C总线处于高电平空闲状态；线路被被动拉高。要传输数据，须切换线路，即先拉低再释放（又变为高电平）。数据位在时钟下降沿传输。</p><p>开漏输出需要一个上拉电阻（Rp）才能正确输出高电平。上拉电阻连接在输出引脚和高电平所需的输出电压（VDD）之间。</p><p>对于VCC和VDD (5 V)的典型值，4700 Ω是最常用的上拉电阻值。</p><p>I2C总线是一种主从结构（Master&#x2F;Slave）总线， I2C总线上的每一个设备都可以作为主设备或者从设备，但一个总线上一般只有一个主设备，可以带多个从设备。其中主设备用来产生允许传输的时钟信号，并初始化总线的数据传输，所以主设备通常是CPU，而从设备只能被动响应主设备发起的通信请求，所以各种I2C接口芯片将作为从设备使用。</p><h4 id="（2）I2C从设备地址"><a href="#（2）I2C从设备地址" class="headerlink" title="（2）I2C从设备地址"></a>（2）I2C从设备地址</h4><p>因为一个I2C总线上可以有多个从设备，这样主设备需要通过地址来确定与哪个器件进行通信。I2C总线上每个从设备都有一个唯一的7bit地址物理识别，这个地址固化在芯片内部，并可以从芯片datasheet上找到。</p><p>I2C有16个保留地址。</p><img src="https://yun.ksfu.top/blog/SHT30H/12.webp" style="zoom:80%;" /><p>其中I2C的从器件地址（本次SHT30只用到了7位的）的组成如下：</p><p><strong>1byte &#x3D; 7bit地址 + 1bit读写标志</strong></p><p>注：1bit读写标志中，0-发送数据（写），1-请求数据（读）</p><p>有些时候一个总线上可能需要挂多个同一芯片，这样有些芯片还需要引出一个或几个引脚，由开发板设计电路来决定其具体地址，从而让不同芯片具有不同的7bit物理地址。</p><h3 id="I2C通信时序"><a href="#I2C通信时序" class="headerlink" title="I2C通信时序"></a>I2C通信时序</h3><p>在I2C总线上传送的每一位数据都由一个同步时钟脉冲相对应，即在SCL串行时钟的配合下，数据在SDA上从高位向低位依次串行传送每一位的数据。IIC通信时序图：</p><img src="https://yun.ksfu.top/blog/SHT30H/13.webp" style="zoom:80%;" /><h4 id="（1）起始位"><a href="#（1）起始位" class="headerlink" title="（1）起始位"></a>（1）起始位</h4><p>I2C总线在空闲时SDA和SCL都处于高电平状态(由上拉电阻拉成高电平)，当主设备要开始一次I2C通信时就发送一个START(S)信号，这个起始位就可以告诉所有I2C从机， “我”要开始进行I2C通信了；当要结束一次I2C通信时，则发送一个STOP信号结束本次通信。</p><p>START(S)：当SCL保持高电平时候，SDA出现下降沿，产生一个起始位，注意SCL一定要在高电平。<br>STOP( P )：当SCL保持高电平时候，SDA出现上升沿，产生一个停止位，注意SCL一定要在高电平。</p><img src="https://yun.ksfu.top/blog/SHT30H/14.webp" style="zoom: 67%;" /><h4 id="（2）读写地址"><a href="#（2）读写地址" class="headerlink" title="（2）读写地址"></a>（2）读写地址</h4><p>主机在发送START信号之后，第2个时序应该立刻给出要通信的目标从机物理地址。此外，I2C总线是一种能够实现半双工通信的同步串行通信协议，站在主设备的角度来看应该具有读&#x2F;写从设备的功能。</p><p>这时候I2C的读写地址除了7bit物理地址以外，还有1bit用来标识读&#x2F;写方向位。这样I2C的从设备读写地址通常是一个字节，其中高7bit是上面描述的物理地址，最低位用来表示读写方向（0为写操作, 1为读操作）</p><img src="https://yun.ksfu.top/blog/SHT30H/15.webp" style="zoom:67%;" /><h4 id="（3）I2C应答信号"><a href="#（3）I2C应答信号" class="headerlink" title="（3）I2C应答信号"></a>（3）I2C应答信号</h4><p>主机往I2C总线上传输器件地址，所有的从机接收到这个地址后与自己的地址相比较若相同则发出一个应答ACK（Acknowledge）信号，主机收到这个应答信号后通讯连接建立成功，若未收到应答信号则表示寻址失败。</p><img src="https://yun.ksfu.top/blog/SHT30H/16.webp" style="zoom: 67%;" /><p>此外，主&#x2F;从机在之后的数据通信中，数据接收方(可能是主机也可能是从机)收到传输的一个字节数据后，需要给出响应，此时处在第九个时钟，发送端释放SDA线控制权，将SDA电平拉高,由接收方控制。</p><ul><li>若希望继续，则给出“应答(ACK, Acknowledge)”信号，即SDA为低电平</li><li>若不希望继续，则给出“非应答(NACK,Not Acknowledge) ”信号，即SDA为高电平</li></ul><h4 id="（4）数据位发送与接收"><a href="#（4）数据位发送与接收" class="headerlink" title="（4）数据位发送与接收"></a>（4）数据位发送与接收</h4><p>主机在收到从机的应答信号之后，开始给从机发送数据。SDA数据线上的每个字节必须是8位，每次传输的字节数量没有限制，每个字节发送完成之后，从机必须跟一个应答信号。</p><img src="https://yun.ksfu.top/blog/SHT30H/17.webp" style="zoom:67%;" /><p>I2C总线通信时数据位传输采用MSB(最高位优先)方式发送，其中高电平表示数据位1，低电平表示数据位0。</p><p>当传输的数据位需要改变时(如上一个位发送的是1，下一个位要发送0)，必须发生在SCL为低电平期间。另外在传输过程中， SDA上的数据位在SCL高电平期间必须保持稳定不变。</p><p>假设SCL在高电平，想一下是不是就会触发起始位或者终止位。想一想起始信号与停止信号是怎么发送的就会明白为什么SCL一定要在高电平才能改变SDA。</p><h3 id="I2C协议主机收发数据流程"><a href="#I2C协议主机收发数据流程" class="headerlink" title="I2C协议主机收发数据流程"></a>I2C协议主机收发数据流程</h3><h4 id="（1）主机发送数据"><a href="#（1）主机发送数据" class="headerlink" title="（1）主机发送数据"></a>（1）主机发送数据</h4><p>主机在检测到总线为“空闲状态”（即 SDA、SCL 线均为高电平）时，发送一个启动信号“S”，开始一次通信的开始；</p><p>主机接着发送一个从设备地址，它由7bit物理地址和1bit读写控制位R&#x2F;W组成（此时R&#x2F;W&#x3D;0）；<br>相对应的从机收到命令字节后向主机回馈应答信号 ACK（ACK&#x3D;0）；</p><p>主机收到从机的应答信号后开始发送第一个字节的数据；</p><p>从机收到数据后返回一个应答信号 ACK；</p><p>主机收到应答信号后再发送下一个数据字节；</p><p>当主机发送最后一个数据字节并收到从机的 ACK 后，通过向从机发送一个停止信号P结束本次通信并释放总线。从机收到P信号后也退出与主机之间的通信。</p><img src="https://yun.ksfu.top/blog/SHT30H/18.webp" style="zoom:67%;" /><blockquote><p><code>注意</code> ：</p><ul><li>主机通过发送地址码与对应的从机建立了通信关系，而挂接在总线上的其它从机虽然同时也收到了地址码，但因为与其自身的地址不相符合，因此提前退出与主机的通信；</li><li>主机的一次发送通信，其发送的数据数量不受限制。主机是通过 P 信号通知发送的结束，从机收到 P 信号后退出本次通信；</li><li>主机的每一次发送后都是通过从机的 ACK 信号了解从机的接收状况，如果应答错误则重发。</li></ul></blockquote><h4 id="（2）主机接收数据"><a href="#（2）主机接收数据" class="headerlink" title="（2）主机接收数据"></a>（2）主机接收数据</h4><ul><li>主机发送起始信号后，接着发送地址字节(其中R&#x2F;W&#x3D;1)；</li><li>对应的从机收到地址字节后，返回一个应答信号并向主机发送数据；</li><li>主机收到数据后向从机反馈一个应答信号ACK；</li><li>从机收到应答信号后再向主机发送下一个数据；</li><li>当主机完成接收数据后，向从机发送一个NAK，从机收到非应答信号后便停止发送；</li><li>主机发送非应答信号后，再发送一个停止信号，释放总线结束通信。</li></ul><img src="https://yun.ksfu.top/blog/SHT30H/19.webp" style="zoom:67%;" /><blockquote><p><code>注意</code> ：</p><ul><li>主机所接收数据的数量是由主机自身决定，当发送“非应答信号NAK”时从机便结束传送并释放总线。</li><li>非应答信号的两个作用：前一个数据接收成功，停止从机的再次发送。</li></ul></blockquote><h2 id="SHT30-温湿度传感器"><a href="#SHT30-温湿度传感器" class="headerlink" title="SHT30 温湿度传感器"></a>SHT30 温湿度传感器</h2><p><del>）睡醒再写……</del></p><p><strong>SHT3X数据手册下载： <a href="https://sensirion.com/media/documents/213E6A3B/63A5A569/Datasheet_SHT3x_DIS.pdf">[Datasheet SHT3x-DIS]</a></strong></p><h3 id="SHT30简介"><a href="#SHT30简介" class="headerlink" title="SHT30简介"></a>SHT30简介</h3><p>SHT30数字温湿度传感器采用业内知名的瑞士Sensirion公司推出的新一代SHT30温湿度传感器芯片，它能够提供极高的可靠性和出色的长期稳定性，具有功耗低、反应快、抗干扰能力强等优点。IIC通讯，兼容3.3V&#x2F;5V，可以非常容易的集成到智能楼宇、天气站、仓库存储、养殖、孵化等应用场景中，其中小米的温湿度传感器使用的也是SHT30。</p><img src="https://yun.ksfu.top/blog/SHT30H/index.webp" style="zoom: 50%;" /><ul><li>高精度，内部自动校准，数字输出</li><li>低功耗、响应速度快、抗干扰能力强</li><li>兼容3.3V&#x2F;5V控制器</li></ul><h3 id="SHT30工作原理"><a href="#SHT30工作原理" class="headerlink" title="SHT30工作原理"></a>SHT30工作原理</h3><p>SHT30 芯片有八个引脚，利用I2C进行数据传输，具有两个可选地址，宽电源电压从2.4V到5.5V。下面是引脚说明：</p><table><thead><tr><th>管脚</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>SDA</td><td>I2C数据引脚，输入&#x2F;输出</td></tr><tr><td>2</td><td>ADDR</td><td>地址引脚，输入</td></tr><tr><td>3</td><td>ALENT</td><td>报警引脚，输出；<strong>不使用时悬空</strong></td></tr><tr><td>4</td><td>SCL</td><td>I2C时钟引脚，输入&#x2F;输出</td></tr><tr><td>5</td><td>VDD</td><td>电源引脚，输入</td></tr><tr><td>6</td><td>nRESET</td><td>复位引脚，输入</td></tr><tr><td>7</td><td>R</td><td>无用引脚，接地</td></tr><tr><td>8</td><td>VSS</td><td>接地引脚</td></tr></tbody></table><h4 id="SHT30地址选择"><a href="#SHT30地址选择" class="headerlink" title="SHT30地址选择"></a>SHT30地址选择</h4><p>SHT3x有两个地址，可以将<code>ADDR</code>接到不同电平进行切换：</p><table><thead><tr><th>SHT3x-DIS</th><th>I2C地址</th><th>条件</th></tr></thead><tbody><tr><td>I2C地址A</td><td>0x44（默认）</td><td><code>ADDR</code>引脚接<strong>低</strong>电平</td></tr><tr><td>I2C地址B</td><td>0x45</td><td><code>ADDR</code>引脚接<strong>高</strong>电平</td></tr></tbody></table><h4 id="SHT3x电路图"><a href="#SHT3x电路图" class="headerlink" title="SHT3x电路图"></a>SHT3x电路图</h4><p>因为是开漏，所以记得将<code>SDA</code>,<code>SCL</code>两个引脚拉高。（因为直接买的模块，所以就不用操心了。</p><img src="https://yun.ksfu.top/blog/SHT30H/20.webp" alt="电路图" style="zoom:67%;" /><h3 id="SHT30数据采集"><a href="#SHT30数据采集" class="headerlink" title="SHT30数据采集"></a>SHT30数据采集</h3><p>SHT3x有单次测量命令数据采集模式和周期性测量命令数据采集模式，这里选择<strong>周期性测量命令数据采集模式</strong>。</p><h4 id="定期数据采集模式的测量命令"><a href="#定期数据采集模式的测量命令" class="headerlink" title="定期数据采集模式的测量命令"></a>定期数据采集模式的测量命令</h4><p>在这种模式下，一个发出的测量命令会产生一个数据对流。每个数据对由一个16位温度值和一个16位湿度值（按此顺序）组成。在周期模式下，可以选择不同的测量命令。对应的16位命令如表9所示。它们在可重复性（低、中、高）和数据采集频率(每秒0.5、1、2、4和10次测量值，mps)方面存在差异。在此模式下不能选择时钟拉伸。数据采集频率和可重复性设置会影响传感器的测量持续时间和电流消耗。</p><img src="https://yun.ksfu.top/blog/SHT30H/21.webp" style="zoom:80%;" /><p>根据表格的通信时序，主机发送起始信号，然后发送从机地址加写指令命令，等待从机应答，再发送命令的高位（MSB），等待从机应答，再发送命令的低位（LSB）。</p><h4 id="周期模式下测量结果的读数"><a href="#周期模式下测量结果的读数" class="headerlink" title="周期模式下测量结果的读数"></a>周期模式下测量结果的读数</h4><p><strong>读数据的命令是： <code>0xE000</code></strong></p><img src="https://yun.ksfu.top/blog/SHT30H/22.webp" style="zoom:67%;" /><p>读数可以通过上表所示的命令启动。如果没有测量数据，I2C读取头用NACK而不是ACK（表中的位9）响应，通信停止。</p><p>空白的数据块是由32发送，黑色的数据块是由SHT30发送。</p><p>根据表中的通信时序，获取SHT30的温湿度数据，获取到的是16位的温度值和16位的湿度值，温度和湿度后都有CRC-8校验。</p><h4 id="SHT30复位"><a href="#SHT30复位" class="headerlink" title="SHT30复位"></a>SHT30复位</h4><p>SHT30的系统复位有两种方式，一种是发出命令（软重置），一种是通过外部向专用复位引脚（<code>nRESET</code>）发送脉冲。我们选择<strong>软重置</strong>。</p><p><strong>软重置的命令是： <code>0x30A2</code></strong></p><img src="https://yun.ksfu.top/blog/SHT30H/23.webp" style="zoom:67%;" /><h4 id="差错校验"><a href="#差错校验" class="headerlink" title="差错校验"></a>差错校验</h4><p><a href="https://www.jianshu.com/p/f0c68eebb8a1">CRC8校验 - 简书 (jianshu.com)</a> <del>(原理进行一个参考链接的抄)</del></p><p>CRC覆盖了先前传输的两个数据字节的内容。 为了计算校验和，仅使用这两个先前发送的数据字节。</p><img src="https://yun.ksfu.top/blog/SHT30H/24.webp" style="zoom:67%;" /><h4 id="温湿度转换"><a href="#温湿度转换" class="headerlink" title="温湿度转换"></a>温湿度转换</h4><p>测量数据始终以 16 位值（无符号整数）形式传输。 这些值已经线性化并补偿了温度和电源电压的影响。 可以使用以下公式将这些原始值转换为物理标度。</p><p>相对湿度换算公式（结果以%RH为单位）：</p><p>$$RH&#x3D;100\times \frac{S_{RH}}{2^{16}-1}$$</p><p>温度换算公式（结果以 °C 和 °F 为单位）：</p><p>$$T[°C]&#x3D;-45+175\times\frac{S_T}{2^{16}-1}$$</p><p>$$T[°F]&#x3D;-49+315\times\frac{S_T}{2^{16}-1}$$</p><p>$S_{RH}$ 和 $S_{T}$ 分别表示湿度和温度的原始传感器输出。 仅当$S_{RH}$ 和 $S_{T}$ 以十进制表示形式使用时，这些公式才能正确工作。</p><h2 id="代码驱动SHT30"><a href="#代码驱动SHT30" class="headerlink" title="代码驱动SHT30"></a>代码驱动SHT30</h2><p>首先使用 STM32CubeMX进行一些常规配置，时钟，调试选项……</p><p>然后配置串口： <a href="https://blog.ksfu.top/posts/b619/">STM32&amp;UART串口通信(使用CubeMX)</a></p><p>在I2C2中选择I2C，打开硬件I2C。</p><h3 id="HAL库中I2C发送接收数据函数"><a href="#HAL库中I2C发送接收数据函数" class="headerlink" title="HAL库中I2C发送接收数据函数"></a>HAL库中I2C发送接收数据函数</h3><h4 id="（1）HAL-I2C-Master-Transmit"><a href="#（1）HAL-I2C-Master-Transmit" class="headerlink" title="（1）HAL_I2C_Master_Transmit()"></a>（1）HAL_I2C_Master_Transmit()</h4><ol><li><p>函数原型</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HAL_I2C_Master_Transmit</span><span class="token punctuation">(</span>I2C_HandleTypeDef <span class="token operator">*</span>hi2c<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> DevAddress<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pData<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>函数功能：IIC发送数据，主机需要将数据通过IIC发送过去</p></li><li><p>参数介绍：</p><ul><li><code>*hi2c</code> 设置使用的是那个IIC</li><li><code>DevAddress</code> 写入的地址，设置写入数据的地址</li><li><code>*pData</code> 需要写入的数据</li><li><code>Size</code> 要发送的字节数</li><li><code>Timeout</code> 最大传输时间，超过传输时间将自动退出传输函数</li></ul></li><li><p>使用到的函数参数讲解（🌰）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HAL_I2C_Master_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hi2c2<span class="token punctuation">,</span> SHT30_ADDR_WR<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><code>&amp;hi2c2</code>：我们使用的是：<code>hi2c2</code>，传地址<code>&amp;hi2c2</code></li><li><code>SHT30_ADDR_WR</code>：我们宏定义了写的地址，传写的地址<code>#define SHT30_ADDR_WR (SHT30_ADDR&lt;&lt;1)</code></li><li><code>(uint8_t*)buf</code>：我们将需要传的数据保存在<code>buf</code>中</li><li><code>2</code>：传<code>2</code>个字节，<code>16</code>个位</li><li><code>0xFFFF</code>超时：<code>0xFFFF</code>（4 294 967 295也就是无符号整型所能表示的最大值）</li></ul></li></ol><h4 id="HAL-I2C-Master-Receive"><a href="#HAL-I2C-Master-Receive" class="headerlink" title="HAL_I2C_Master_Receive()"></a>HAL_I2C_Master_Receive()</h4><ol><li><p>函数原型</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HAL_I2C_Master_Receive</span><span class="token punctuation">(</span>I2C_HandleTypeDef <span class="token operator">*</span>hi2c<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> DevAddress<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pData<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>函数功能：IIC接收数据，从机发送给主机，主机需要将数据通过IIC接收</p></li><li><p>函数参数和HAL_I2C_Master_Transmit()大概是一样的，只是取到的数据保存在pData中。</p></li><li><p>使用到的函数参数讲解（🌰）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HAL_I2C_Master_Receive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hi2c2<span class="token punctuation">,</span> SHT30_ADDR_RD<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> SHT30_DATA_SIZE<span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><code>&amp;hi2c2</code>：我们使用的是：<code>hi2c2</code>，传地址<code>&amp;hi2c2</code></li><li><code>SHT30_ADDR_RD</code>：我们宏定义了读的地址，传读的地址<code>#define SHT30_ADDR_RD ((SHT30_ADDR&lt;&lt;1) | 0x01)</code></li><li><code>buf</code>：我们将获取到的数据保存在<code>buf</code>中</li><li><code>SHT30_DATA_SIZE</code>：宏定义，6个字节<code>#define SHT30_DATA_SIZE 6</code></li><li><code>0xFFFF</code>超时：<code>0xFFFF</code>（4 294 967 295也就是无符号整型所能表示的最大值）</li></ul></li></ol><h3 id="头文件-sht30-h"><a href="#头文件-sht30-h" class="headerlink" title="头文件 sht30.h"></a>头文件 <code>sht30.h</code></h3><p>在头文件中我们提前定义好相关命令与函数原型。</p><p><code>enum</code>用于定义枚举类型，它本质上是一种整数类型。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">INC_SHT30_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INC_SHT30_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f4xx_hal.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHT30_ADDR</span> <span class="token expression"><span class="token number">0x44</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHT30_ADDR_WR</span> <span class="token expression"><span class="token punctuation">(</span>SHT30_ADDR<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHT30_ADDR_RD</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>SHT30_ADDR<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHT30_DATA_SIZE</span> <span class="token expression"><span class="token number">6</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 软件复位命令 */</span>    SOFT_RESET_CMD <span class="token operator">=</span> <span class="token number">0x30A2</span><span class="token punctuation">,</span>        <span class="token comment">/*    单次测量模式    命名格式：Repeatability_CS_CMD    CS： Clock stretching    */</span>    HIGH_ENABLED_CMD    <span class="token operator">=</span> <span class="token number">0x2C06</span><span class="token punctuation">,</span>    MEDIUM_ENABLED_CMD  <span class="token operator">=</span> <span class="token number">0x2C0D</span><span class="token punctuation">,</span>    LOW_ENABLED_CMD     <span class="token operator">=</span> <span class="token number">0x2C10</span><span class="token punctuation">,</span>    HIGH_DISABLED_CMD   <span class="token operator">=</span> <span class="token number">0x2400</span><span class="token punctuation">,</span>    MEDIUM_DISABLED_CMD <span class="token operator">=</span> <span class="token number">0x240B</span><span class="token punctuation">,</span>    LOW_DISABLED_CMD    <span class="token operator">=</span> <span class="token number">0x2416</span><span class="token punctuation">,</span>    <span class="token comment">/*    周期测量模式    命名格式：Repeatability_MPS_CMD    MPS：measurement per second    */</span>    HIGH_0_5_CMD   <span class="token operator">=</span> <span class="token number">0x2032</span><span class="token punctuation">,</span>    MEDIUM_0_5_CMD <span class="token operator">=</span> <span class="token number">0x2024</span><span class="token punctuation">,</span>    LOW_0_5_CMD    <span class="token operator">=</span> <span class="token number">0x202F</span><span class="token punctuation">,</span>    HIGH_1_CMD     <span class="token operator">=</span> <span class="token number">0x2130</span><span class="token punctuation">,</span>    MEDIUM_1_CMD   <span class="token operator">=</span> <span class="token number">0x2126</span><span class="token punctuation">,</span>    LOW_1_CMD      <span class="token operator">=</span> <span class="token number">0x212D</span><span class="token punctuation">,</span>    HIGH_2_CMD     <span class="token operator">=</span> <span class="token number">0x2236</span><span class="token punctuation">,</span>    MEDIUM_2_CMD   <span class="token operator">=</span> <span class="token number">0x2220</span><span class="token punctuation">,</span>    LOW_2_CMD      <span class="token operator">=</span> <span class="token number">0x222B</span><span class="token punctuation">,</span>    HIGH_4_CMD     <span class="token operator">=</span> <span class="token number">0x2334</span><span class="token punctuation">,</span>    MEDIUM_4_CMD   <span class="token operator">=</span> <span class="token number">0x2322</span><span class="token punctuation">,</span>    LOW_4_CMD      <span class="token operator">=</span> <span class="token number">0x2329</span><span class="token punctuation">,</span>    HIGH_10_CMD    <span class="token operator">=</span> <span class="token number">0x2737</span><span class="token punctuation">,</span>    MEDIUM_10_CMD  <span class="token operator">=</span> <span class="token number">0x2721</span><span class="token punctuation">,</span>    LOW_10_CMD     <span class="token operator">=</span> <span class="token number">0x272A</span><span class="token punctuation">,</span>        <span class="token comment">/* 周期测量模式读取数据命令 */</span>    READOUT_FOR_PERIODIC_MODE <span class="token operator">=</span> <span class="token number">0xE000</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> SHT30_CMD<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">sht30_soft_reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> <span class="token function">SHT30_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> <span class="token function">SHT30_Read_Dat</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> dat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> <span class="token function">CheckCrc8</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> <span class="token keyword">const</span> message<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> initial_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> <span class="token function">SHT30_Dat_To_Float</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> <span class="token keyword">const</span> dat<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* INC_SHT30_H_ */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="主要文件-sht30-c"><a href="#主要文件-sht30-c" class="headerlink" title="主要文件 sht30.c"></a>主要文件 <code>sht30.c</code></h3><p>先包含主要的一些头文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"i2c.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sht30.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="发送指令"><a href="#发送指令" class="headerlink" title="发送指令"></a>发送指令</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * @brief    向SHT30发送一条指令(16bit) * @param    cmd —— SHT30指令（在SHT30_MODE中枚举定义） * @retval    成功返回HAL_OK*/</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sht30_send_cmd</span><span class="token punctuation">(</span>SHT30_CMD cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cmd <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cmd<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">HAL_I2C_Master_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hi2c2<span class="token punctuation">,</span> SHT30_ADDR_WR<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="复位SHT30"><a href="#复位SHT30" class="headerlink" title="复位SHT30"></a>复位SHT30</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * @brief    复位SHT30 * @param    none * @retval    none*/</span><span class="token keyword">void</span> <span class="token function">sht30_soft_reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">sht30_send_cmd</span><span class="token punctuation">(</span>SOFT_RESET_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="初始化SHT30"><a href="#初始化SHT30" class="headerlink" title="初始化SHT30"></a>初始化SHT30</h4><figure><div class="code-wrapper"><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;** * @brief    初始化SHT30 * @param    none * @retval    成功返回HAL_OK * @note    周期测量模式*&#x2F;uint8_t SHT30_Init(void) &#123;return sht30_send_cmd(MEDIUM_2_CMD);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * @brief    从SHT30读取一次数据 * @param    dat —— 存储读取数据的地址（6个字节数组） * @retval    成功 —— 返回HAL_OK*/</span><span class="token class-name">uint8_t</span> <span class="token function">SHT30_Read_Dat</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> dat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sht30_send_cmd</span><span class="token punctuation">(</span>READOUT_FOR_PERIODIC_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">HAL_I2C_Master_Receive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hi2c2<span class="token punctuation">,</span> SHT30_ADDR_RD<span class="token punctuation">,</span> dat<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="CRC-8校验"><a href="#CRC-8校验" class="headerlink" title="CRC-8校验"></a>CRC-8校验</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRC8_POLYNOMIAL</span> <span class="token expression"><span class="token number">0x31</span></span></span><span class="token class-name">uint8_t</span> <span class="token function">CheckCrc8</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> <span class="token keyword">const</span> message<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> initial_value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint8_t</span>  remainder<span class="token punctuation">;</span>        <span class="token comment">//余数</span>    <span class="token class-name">uint8_t</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//循环变量</span>    <span class="token comment">/* 初始化 */</span>    remainder <span class="token operator">=</span> initial_value<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        remainder <span class="token operator">^=</span> message<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/* 从最高位开始依次计算  */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                remainder <span class="token operator">=</span> <span class="token punctuation">(</span>remainder <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>CRC8_POLYNOMIAL<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                remainder <span class="token operator">=</span> <span class="token punctuation">(</span>remainder <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 返回计算的CRC码 */</span>    <span class="token keyword">return</span> remainder<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="温湿度转换-1"><a href="#温湿度转换-1" class="headerlink" title="温湿度转换"></a>温湿度转换</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * @brief    将SHT30接收的6个字节数据进行CRC校验，并转换为温度值和湿度值 * @param    dat  —— 存储接收数据的地址（6个字节数组） * @retval    校验成功  —— 返回0 *             校验失败  —— 返回1，并设置温度值和湿度值为0*/</span><span class="token class-name">uint8_t</span> <span class="token function">SHT30_Dat_To_Float</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> <span class="token keyword">const</span> dat<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> recv_temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">uint16_t</span> recv_humidity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/* 校验温度数据和湿度数据是否接收正确 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">CheckCrc8</span><span class="token punctuation">(</span>dat<span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">!=</span> dat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">CheckCrc8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dat<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">!=</span> dat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">/* 转换温度数据 */</span>    recv_temperature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>dat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>temperature <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">45</span> <span class="token operator">+</span> <span class="token number">175</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>recv_temperature<span class="token operator">/</span><span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 转换湿度数据 */</span>    recv_humidity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>dat<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>dat<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>humidity <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>recv_humidity <span class="token operator">/</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="在main-c中使用SHT30"><a href="#在main-c中使用SHT30" class="headerlink" title="在main.c中使用SHT30"></a>在<code>main.c</code>中使用SHT30</h3><p>在<code>int main()</code>外定义格式化函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">report_tempRH_json</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> dat<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在<code>int main()</code>的<code>while (1)</code>前定义相关变量与SHT30初始化：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> dat<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">float</span> temperature <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">float</span> humidity <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token function">sht30_soft_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SHT30_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> HAL_OK<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sht30 init is ok!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sht30 init is not ok!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在<code>while(1)</code>内调用格式化函数，每次调用后进行适当延时。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">report_tempRH_json</span><span class="token punctuation">(</span>dat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temperature<span class="token punctuation">,</span> <span class="token operator">&amp;</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="格式化函数"><a href="#格式化函数" class="headerlink" title="格式化函数"></a>格式化函数</h4><p>将格式化函数写在 <code>/* USER CODE BEGIN 4 */</code> 与 <code>/* USER CODE END 4 */</code> 之中。</p><blockquote><p>字符串格式化输出 <code>sprintf()</code>：</p><p><code>int sprintf(char * s, const char * format, ...);</code>定义在<code>stdio.h</code>中，适用于 <code> string</code> 版本的格式化输出，其目标不是控制台，而是一个字符串。</p><p>用<code>sprintf()</code> 格式化一个字符串，例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Name:%s,Age:%d,Weight:%.2f\n"</span><span class="token punctuation">,</span> <span class="token string">"LiMing"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">1.68</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>运行后目标<code>buf</code>格式化为：<code>Name:LiMing,Age:30,Weight:1.68</code></p><p><code>sprintf()</code>对于字符串的处理非常有用。</p></blockquote><p>将SHT30温湿度数据格式化并通过串口输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">report_tempRH_json</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> dat<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SHT30_Read_Dat</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span> <span class="token operator">==</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SHT30_Dat_To_Float</span><span class="token punctuation">(</span>dat<span class="token punctuation">,</span>temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">)</span> <span class="token operator">==</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&#123;\"Temperature\":\"%.2f\", \"Humidity\":\"%.2f\"&#125;"</span><span class="token punctuation">,</span> <span class="token operator">*</span>temperature<span class="token punctuation">,</span> <span class="token operator">*</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sht30 check failed!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sht30 read date failed!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h2><p>随便复制几段单片机串口发过来的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">53.824</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.36"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.92"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">55.818</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.34"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.85"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">57.818</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.41"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.88"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">59.815</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.33"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.98"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">01.809</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.40"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.89"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">03.808</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.38"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.96"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">05.804</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.38"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.94"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">07.799</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.38"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"54.02"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">09.796</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.36"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.84"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">11.807</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.37"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.82"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">13.788</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token property">"Temperature"</span><span class="token operator">:</span><span class="token string">"21.36"</span><span class="token punctuation">,</span> <span class="token property">"Humidity"</span><span class="token operator">:</span><span class="token string">"53.71"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>手机上看一眼小米温湿度传感器的：</p><img src="https://yun.ksfu.top/blog/SHT30H/res.webp" style="zoom:67%;" /><p>还行。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://www.analog.com/cn/analog-dialogue/articles/i2c-communication-protocol-understanding-i2c-primer-pmbus-and-smbus.html">I2C通信协议：了解I2C Primer、 PMBus和SMBus | 亚德诺半导体 (analog.com)</a></p><p><a href="https://blog.csdn.net/m0_51429770/article/details/127661382?spm=1001.2014.3001.5506">I2C协议介绍以及HAL库实现I2C对SHT30温湿度采样_hal i2c_HaiQinyanAN的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Yangtzey/article/details/129660763?spm=1001.2014.3001.5506">IIC及配置应用（SHT30读取温湿度）_嵌不入的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_46251230/article/details/126722112?spm=1001.2014.3001.5506">STM32物联网项目-SHT30温湿度采集(IIC通信)_ONE_Day|的博客-CSDN博客</a></p><p><a href="https://sensirion.com/media/documents/213E6A3B/63A5A569/Datasheet_SHT3x_DIS.pdf">[Datasheet SHT3x-DIS]</a></p><p><a href="https://www.jianshu.com/p/f0c68eebb8a1">CRC8校验 - 简书 (jianshu.com)</a></p><p><a href="https://blog.ksfu.top/posts/b619/">STM32&amp;UART串口通信(使用CubeMX)</a></p></blockquote>